// Code generated by protoc-gen-go-xorm. DO NOT EDIT.
// Source: client_match.proto

package pb

import (
	"github.com/golang/protobuf/proto"
)

func (x *TexasRoomListReq) SetGameType(val int32) {
	x.GameType = val
}

func (x *TexasRoomListReq) SetCoinType(val int32) {
	x.CoinType = val
}

func (x *TexasRoomListReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasRoomListReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TexasRoomListRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *TexasRoomListRsp) SetRoomList(val []*TexasRoomInfo) {
	x.RoomList = val
}

func (x *TexasRoomListRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasRoomListRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyRoomListReq) SetGameType(val int32) {
	x.GameType = val
}

func (x *RummyRoomListReq) SetCoinType(val int32) {
	x.CoinType = val
}

func (x *RummyRoomListReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyRoomListReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyRoomListRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *RummyRoomListRsp) SetRoomList(val []*RummyRoomPubData) {
	x.RoomList = val
}

func (x *RummyRoomListRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyRoomListRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *HasRoomReq) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *HasRoomReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *HasRoomReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *HasRoomRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *HasRoomRsp) SetIsExist(val bool) {
	x.IsExist = val
}

func (x *HasRoomRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *HasRoomRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}
