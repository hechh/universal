//
// 本代码由cfgtool工具生成，请勿手动修改

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: table_cfg.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BreakInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Interval      int64                  `protobuf:"varint,1,opt,name=Interval,proto3" json:"Interval,omitempty"`   // 间隔时长(等多久休息)
	BreakTime     int64                  `protobuf:"varint,2,opt,name=BreakTime,proto3" json:"BreakTime,omitempty"` // 每场休息时长
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *BreakInfo) Reset() {
	*x = BreakInfo{}
	mi := &file_table_cfg_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BreakInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakInfo) ProtoMessage() {}

func (x *BreakInfo) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakInfo.ProtoReflect.Descriptor instead.
func (*BreakInfo) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{0}
}

func (x *BreakInfo) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *BreakInfo) GetBreakTime() int64 {
	if x != nil {
		return x.BreakTime
	}
	return 0
}

type CoinReward struct {
	state         protoimpl.MessageState `xorm:"-"` 
	CoinType      CoinType               `protobuf:"varint,1,opt,name=CoinType,proto3,enum=poker.CoinType" json:"CoinType,omitempty"` // 货币类型
	Incr          int64                  `protobuf:"varint,2,opt,name=Incr,proto3" json:"Incr,omitempty"`                             // 数量
	Total         int64                  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`                           // 总数量
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *CoinReward) Reset() {
	*x = CoinReward{}
	mi := &file_table_cfg_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReward) ProtoMessage() {}

func (x *CoinReward) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReward.ProtoReflect.Descriptor instead.
func (*CoinReward) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{1}
}

func (x *CoinReward) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *CoinReward) GetIncr() int64 {
	if x != nil {
		return x.Incr
	}
	return 0
}

func (x *CoinReward) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TexasTestHandCard struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Hand1         string                 `protobuf:"bytes,1,opt,name=Hand1,proto3" json:"Hand1,omitempty"` // 玩家手牌
	Hand2         string                 `protobuf:"bytes,2,opt,name=Hand2,proto3" json:"Hand2,omitempty"` // 玩家手牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasTestHandCard) Reset() {
	*x = TexasTestHandCard{}
	mi := &file_table_cfg_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasTestHandCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTestHandCard) ProtoMessage() {}

func (x *TexasTestHandCard) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTestHandCard.ProtoReflect.Descriptor instead.
func (*TexasTestHandCard) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{2}
}

func (x *TexasTestHandCard) GetHand1() string {
	if x != nil {
		return x.Hand1
	}
	return ""
}

func (x *TexasTestHandCard) GetHand2() string {
	if x != nil {
		return x.Hand2
	}
	return ""
}

type MachineConfig struct {
	state           protoimpl.MessageState `xorm:"-"` 
	ID              int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                 // 唯一ID
	GameType        GameType               `protobuf:"varint,2,opt,name=GameType,proto3,enum=poker.GameType" json:"GameType,omitempty"` // 游戏类型
	StartDuration   int64                  `protobuf:"varint,3,opt,name=StartDuration,proto3" json:"StartDuration,omitempty"`           // 开始时长(秒)
	PreFlopDuration int64                  `protobuf:"varint,4,opt,name=PreFlopDuration,proto3" json:"PreFlopDuration,omitempty"`       // 翻牌前时长
	FlopDuration    int64                  `protobuf:"varint,5,opt,name=FlopDuration,proto3" json:"FlopDuration,omitempty"`             // 翻牌下注轮时长
	TurnDuration    int64                  `protobuf:"varint,6,opt,name=TurnDuration,proto3" json:"TurnDuration,omitempty"`             // 转牌下注轮时长
	RiverDuration   int64                  `protobuf:"varint,7,opt,name=RiverDuration,proto3" json:"RiverDuration,omitempty"`           // 河牌下注轮时长
	EndDuration     int64                  `protobuf:"varint,8,opt,name=EndDuration,proto3" json:"EndDuration,omitempty"`               // 结算时长
	DefaultDuration int64                  `protobuf:"varint,9,opt,name=DefaultDuration,proto3" json:"DefaultDuration,omitempty"`       // 默认时长
	unknownFields   protoimpl.UnknownFields `xorm:"-"`
	sizeCache       protoimpl.SizeCache `xorm:"-"`
}

func (x *MachineConfig) Reset() {
	*x = MachineConfig{}
	mi := &file_table_cfg_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfig) ProtoMessage() {}

func (x *MachineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfig.ProtoReflect.Descriptor instead.
func (*MachineConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{3}
}

func (x *MachineConfig) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MachineConfig) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *MachineConfig) GetStartDuration() int64 {
	if x != nil {
		return x.StartDuration
	}
	return 0
}

func (x *MachineConfig) GetPreFlopDuration() int64 {
	if x != nil {
		return x.PreFlopDuration
	}
	return 0
}

func (x *MachineConfig) GetFlopDuration() int64 {
	if x != nil {
		return x.FlopDuration
	}
	return 0
}

func (x *MachineConfig) GetTurnDuration() int64 {
	if x != nil {
		return x.TurnDuration
	}
	return 0
}

func (x *MachineConfig) GetRiverDuration() int64 {
	if x != nil {
		return x.RiverDuration
	}
	return 0
}

func (x *MachineConfig) GetEndDuration() int64 {
	if x != nil {
		return x.EndDuration
	}
	return 0
}

func (x *MachineConfig) GetDefaultDuration() int64 {
	if x != nil {
		return x.DefaultDuration
	}
	return 0
}

type MachineConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Ary           []*MachineConfig       `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *MachineConfigAry) Reset() {
	*x = MachineConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfigAry) ProtoMessage() {}

func (x *MachineConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfigAry.ProtoReflect.Descriptor instead.
func (*MachineConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{4}
}

func (x *MachineConfigAry) GetAry() []*MachineConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type RouterConfig struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Cmd           uint32                 `protobuf:"varint,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`                                     // 消息唯一ID（一定是偶数）
	NodeType      NodeType               `protobuf:"varint,2,opt,name=NodeType,proto3,enum=poker.NodeType" json:"NodeType,omitempty"`       // 节点类型
	RouterType    RouterType             `protobuf:"varint,3,opt,name=RouterType,proto3,enum=poker.RouterType" json:"RouterType,omitempty"` // 路由类型
	Request       string                 `protobuf:"bytes,4,opt,name=Request,proto3" json:"Request,omitempty"`                              // 请求协议名
	Response      string                 `protobuf:"bytes,5,opt,name=Response,proto3" json:"Response,omitempty"`                            // 应答协议名
	ActorName     string                 `protobuf:"bytes,6,opt,name=ActorName,proto3" json:"ActorName,omitempty"`                          // Actor名称
	FuncName      string                 `protobuf:"bytes,7,opt,name=FuncName,proto3" json:"FuncName,omitempty"`                            // 请求方法名称
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RouterConfig) Reset() {
	*x = RouterConfig{}
	mi := &file_table_cfg_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfig) ProtoMessage() {}

func (x *RouterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfig.ProtoReflect.Descriptor instead.
func (*RouterConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{5}
}

func (x *RouterConfig) GetCmd() uint32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *RouterConfig) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NodeTypeBegin
}

func (x *RouterConfig) GetRouterType() RouterType {
	if x != nil {
		return x.RouterType
	}
	return RouterType_RouterTypeNone
}

func (x *RouterConfig) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *RouterConfig) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *RouterConfig) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *RouterConfig) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

type RouterConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Ary           []*RouterConfig        `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RouterConfigAry) Reset() {
	*x = RouterConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouterConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigAry) ProtoMessage() {}

func (x *RouterConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigAry.ProtoReflect.Descriptor instead.
func (*RouterConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{6}
}

func (x *RouterConfigAry) GetAry() []*RouterConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type RummyConfig struct {
	state          protoimpl.MessageState `xorm:"-"` 
	ID             uint32                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                 // 唯一ID
	GameType       GameType               `protobuf:"varint,2,opt,name=GameType,proto3,enum=poker.GameType" json:"GameType,omitempty"` // 游戏类型
	RoomType       RoomType               `protobuf:"varint,3,opt,name=RoomType,proto3,enum=poker.RoomType" json:"RoomType,omitempty"` // 房间类型
	CoinType       CoinType               `protobuf:"varint,4,opt,name=CoinType,proto3,enum=poker.CoinType" json:"CoinType,omitempty"` // 货币类型
	RoomKeepLive   int64                  `protobuf:"varint,5,opt,name=RoomKeepLive,proto3" json:"RoomKeepLive,omitempty"`             // 房间存在时长(分钟)
	BaseScore      int64                  `protobuf:"varint,6,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"`                   // 底分
	MinBuyIn       int64                  `protobuf:"varint,7,opt,name=MinBuyIn,proto3" json:"MinBuyIn,omitempty"`                     // 最小入桌
	RakeRate       int64                  `protobuf:"varint,8,opt,name=RakeRate,proto3" json:"RakeRate,omitempty"`                     // 每局抽水万分比
	MinPlayerCount uint32                 `protobuf:"varint,9,opt,name=MinPlayerCount,proto3" json:"MinPlayerCount,omitempty"`         // 最低开始游戏玩家人数
	MaxPlayerCount uint32                 `protobuf:"varint,10,opt,name=MaxPlayerCount,proto3" json:"MaxPlayerCount,omitempty"`        // 最大玩家人数
	FirstDrop      int64                  `protobuf:"varint,11,opt,name=FirstDrop,proto3" json:"FirstDrop,omitempty"`                  // 没抽牌投降扣分
	MiddleDrop     int64                  `protobuf:"varint,12,opt,name=MiddleDrop,proto3" json:"MiddleDrop,omitempty"`                // 中途投降扣分
	Decks          uint32                 `protobuf:"varint,13,opt,name=Decks,proto3" json:"Decks,omitempty"`                          // 游戏采用几幅牌
	Jokers         uint32                 `protobuf:"varint,14,opt,name=Jokers,proto3" json:"Jokers,omitempty"`                        // joker牌数
	unknownFields  protoimpl.UnknownFields `xorm:"-"`
	sizeCache      protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyConfig) Reset() {
	*x = RummyConfig{}
	mi := &file_table_cfg_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyConfig) ProtoMessage() {}

func (x *RummyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyConfig.ProtoReflect.Descriptor instead.
func (*RummyConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{7}
}

func (x *RummyConfig) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RummyConfig) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummyConfig) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *RummyConfig) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *RummyConfig) GetRoomKeepLive() int64 {
	if x != nil {
		return x.RoomKeepLive
	}
	return 0
}

func (x *RummyConfig) GetBaseScore() int64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *RummyConfig) GetMinBuyIn() int64 {
	if x != nil {
		return x.MinBuyIn
	}
	return 0
}

func (x *RummyConfig) GetRakeRate() int64 {
	if x != nil {
		return x.RakeRate
	}
	return 0
}

func (x *RummyConfig) GetMinPlayerCount() uint32 {
	if x != nil {
		return x.MinPlayerCount
	}
	return 0
}

func (x *RummyConfig) GetMaxPlayerCount() uint32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

func (x *RummyConfig) GetFirstDrop() int64 {
	if x != nil {
		return x.FirstDrop
	}
	return 0
}

func (x *RummyConfig) GetMiddleDrop() int64 {
	if x != nil {
		return x.MiddleDrop
	}
	return 0
}

func (x *RummyConfig) GetDecks() uint32 {
	if x != nil {
		return x.Decks
	}
	return 0
}

func (x *RummyConfig) GetJokers() uint32 {
	if x != nil {
		return x.Jokers
	}
	return 0
}

type RummyConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Ary           []*RummyConfig         `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyConfigAry) Reset() {
	*x = RummyConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyConfigAry) ProtoMessage() {}

func (x *RummyConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyConfigAry.ProtoReflect.Descriptor instead.
func (*RummyConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{8}
}

func (x *RummyConfigAry) GetAry() []*RummyConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type RummyMachineConfig struct {
	state           protoimpl.MessageState `xorm:"-"` 
	GameType        GameType               `protobuf:"varint,1,opt,name=GameType,proto3,enum=poker.GameType" json:"GameType,omitempty"` // 游戏类型
	ReadyDuration   int64                  `protobuf:"varint,2,opt,name=ReadyDuration,proto3" json:"ReadyDuration,omitempty"`           // 准备倒计时(秒)
	StartDuration   int64                  `protobuf:"varint,3,opt,name=StartDuration,proto3" json:"StartDuration,omitempty"`           // 游戏开始时间
	HostDuration    int64                  `protobuf:"varint,4,opt,name=HostDuration,proto3" json:"HostDuration,omitempty"`             // 定庄时间
	DealDuration    int64                  `protobuf:"varint,5,opt,name=DealDuration,proto3" json:"DealDuration,omitempty"`             // 发牌
	ShuffleDuration int64                  `protobuf:"varint,6,opt,name=ShuffleDuration,proto3" json:"ShuffleDuration,omitempty"`       // 打牌过程洗牌动画时间
	PlayDuration    int64                  `protobuf:"varint,7,opt,name=PlayDuration,proto3" json:"PlayDuration,omitempty"`             // 打牌时间
	FixDuration     int64                  `protobuf:"varint,8,opt,name=FixDuration,proto3" json:"FixDuration,omitempty"`               // 最后调整牌时间
	SettleDuration  int64                  `protobuf:"varint,9,opt,name=SettleDuration,proto3" json:"SettleDuration,omitempty"`         // 结算展示时间
	unknownFields   protoimpl.UnknownFields `xorm:"-"`
	sizeCache       protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyMachineConfig) Reset() {
	*x = RummyMachineConfig{}
	mi := &file_table_cfg_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyMachineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyMachineConfig) ProtoMessage() {}

func (x *RummyMachineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyMachineConfig.ProtoReflect.Descriptor instead.
func (*RummyMachineConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{9}
}

func (x *RummyMachineConfig) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummyMachineConfig) GetReadyDuration() int64 {
	if x != nil {
		return x.ReadyDuration
	}
	return 0
}

func (x *RummyMachineConfig) GetStartDuration() int64 {
	if x != nil {
		return x.StartDuration
	}
	return 0
}

func (x *RummyMachineConfig) GetHostDuration() int64 {
	if x != nil {
		return x.HostDuration
	}
	return 0
}

func (x *RummyMachineConfig) GetDealDuration() int64 {
	if x != nil {
		return x.DealDuration
	}
	return 0
}

func (x *RummyMachineConfig) GetShuffleDuration() int64 {
	if x != nil {
		return x.ShuffleDuration
	}
	return 0
}

func (x *RummyMachineConfig) GetPlayDuration() int64 {
	if x != nil {
		return x.PlayDuration
	}
	return 0
}

func (x *RummyMachineConfig) GetFixDuration() int64 {
	if x != nil {
		return x.FixDuration
	}
	return 0
}

func (x *RummyMachineConfig) GetSettleDuration() int64 {
	if x != nil {
		return x.SettleDuration
	}
	return 0
}

type RummyMachineConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Ary           []*RummyMachineConfig  `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyMachineConfigAry) Reset() {
	*x = RummyMachineConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyMachineConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyMachineConfigAry) ProtoMessage() {}

func (x *RummyMachineConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyMachineConfigAry.ProtoReflect.Descriptor instead.
func (*RummyMachineConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{10}
}

func (x *RummyMachineConfigAry) GetAry() []*RummyMachineConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type SngMatchConfig struct {
	state         protoimpl.MessageState `xorm:"-"` 
	GameId        int32                  `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`                         // 唯一ID
	Title         string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`                            // 赛事标题
	CoinType      CoinType               `protobuf:"varint,3,opt,name=CoinType,proto3,enum=poker.CoinType" json:"CoinType,omitempty"` // 货币类型
	Consume       *CoinReward            `protobuf:"bytes,4,opt,name=Consume,proto3" json:"Consume,omitempty"`                        // 报名消耗货币类型
	EntryFee      int64                  `protobuf:"varint,5,opt,name=EntryFee,proto3" json:"EntryFee,omitempty"`                     // 报名服务费
	Chip          int64                  `protobuf:"varint,6,opt,name=Chip,proto3" json:"Chip,omitempty"`                             // 获得的筹码数量
	PrizeType     int32                  `protobuf:"varint,7,opt,name=PrizeType,proto3" json:"PrizeType,omitempty"`                   // 排名奖励类型
	BreakInfos    []*BreakInfo           `protobuf:"bytes,8,rep,name=BreakInfos,proto3" json:"BreakInfos,omitempty"`                  // 间隔时间
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngMatchConfig) Reset() {
	*x = SngMatchConfig{}
	mi := &file_table_cfg_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngMatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngMatchConfig) ProtoMessage() {}

func (x *SngMatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngMatchConfig.ProtoReflect.Descriptor instead.
func (*SngMatchConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{11}
}

func (x *SngMatchConfig) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SngMatchConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SngMatchConfig) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *SngMatchConfig) GetConsume() *CoinReward {
	if x != nil {
		return x.Consume
	}
	return nil
}

func (x *SngMatchConfig) GetEntryFee() int64 {
	if x != nil {
		return x.EntryFee
	}
	return 0
}

func (x *SngMatchConfig) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *SngMatchConfig) GetPrizeType() int32 {
	if x != nil {
		return x.PrizeType
	}
	return 0
}

func (x *SngMatchConfig) GetBreakInfos() []*BreakInfo {
	if x != nil {
		return x.BreakInfos
	}
	return nil
}

type SngMatchConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Ary           []*SngMatchConfig      `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngMatchConfigAry) Reset() {
	*x = SngMatchConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngMatchConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngMatchConfigAry) ProtoMessage() {}

func (x *SngMatchConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngMatchConfigAry.ProtoReflect.Descriptor instead.
func (*SngMatchConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{12}
}

func (x *SngMatchConfigAry) GetAry() []*SngMatchConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type SngMatchRankRewardConfig struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PrizeType     int32                  `protobuf:"varint,1,opt,name=PrizeType,proto3" json:"PrizeType,omitempty"` // 奖励类型
	Level         int32                  `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`         // 排名
	Rewards       []*CoinReward          `protobuf:"bytes,3,rep,name=Rewards,proto3" json:"Rewards,omitempty"`      // 奖励
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngMatchRankRewardConfig) Reset() {
	*x = SngMatchRankRewardConfig{}
	mi := &file_table_cfg_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngMatchRankRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngMatchRankRewardConfig) ProtoMessage() {}

func (x *SngMatchRankRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngMatchRankRewardConfig.ProtoReflect.Descriptor instead.
func (*SngMatchRankRewardConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{13}
}

func (x *SngMatchRankRewardConfig) GetPrizeType() int32 {
	if x != nil {
		return x.PrizeType
	}
	return 0
}

func (x *SngMatchRankRewardConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SngMatchRankRewardConfig) GetRewards() []*CoinReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SngMatchRankRewardConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"`      
	Ary           []*SngMatchRankRewardConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngMatchRankRewardConfigAry) Reset() {
	*x = SngMatchRankRewardConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngMatchRankRewardConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngMatchRankRewardConfigAry) ProtoMessage() {}

func (x *SngMatchRankRewardConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngMatchRankRewardConfigAry.ProtoReflect.Descriptor instead.
func (*SngMatchRankRewardConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{14}
}

func (x *SngMatchRankRewardConfigAry) GetAry() []*SngMatchRankRewardConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type TexasConfig struct {
	state              protoimpl.MessageState `xorm:"-"` 
	ID                 int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                    // 唯一ID
	GameType           GameType               `protobuf:"varint,2,opt,name=GameType,proto3,enum=poker.GameType" json:"GameType,omitempty"`    // 游戏类型
	MatchType          MatchType              `protobuf:"varint,3,opt,name=MatchType,proto3,enum=poker.MatchType" json:"MatchType,omitempty"` // 是否为赛事德州扑克
	RoomType           RoomType               `protobuf:"varint,4,opt,name=RoomType,proto3,enum=poker.RoomType" json:"RoomType,omitempty"`    // 房间类型
	CoinType           CoinType               `protobuf:"varint,5,opt,name=CoinType,proto3,enum=poker.CoinType" json:"CoinType,omitempty"`    // 货币类型
	RoomKeepLive       int64                  `protobuf:"varint,6,opt,name=RoomKeepLive,proto3" json:"RoomKeepLive,omitempty"`                // 房间存在时长(分钟)
	SmallBlind         int64                  `protobuf:"varint,7,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`                    // 小盲注
	BigBlind           int64                  `protobuf:"varint,8,opt,name=BigBlind,proto3" json:"BigBlind,omitempty"`                        // 大盲注
	MinBuyIn           int32                  `protobuf:"varint,9,opt,name=MinBuyIn,proto3" json:"MinBuyIn,omitempty"`                        // 最小买入筹码
	MaxBuyIn           int32                  `protobuf:"varint,10,opt,name=MaxBuyIn,proto3" json:"MaxBuyIn,omitempty"`                       // 最大买入筹码
	RakeRate           int64                  `protobuf:"varint,11,opt,name=RakeRate,proto3" json:"RakeRate,omitempty"`                       // 每局抽水万分比
	MinPlayerCount     int32                  `protobuf:"varint,12,opt,name=MinPlayerCount,proto3" json:"MinPlayerCount,omitempty"`           // 最低开始游戏玩家人数
	MaxPlayerCount     int32                  `protobuf:"varint,13,opt,name=MaxPlayerCount,proto3" json:"MaxPlayerCount,omitempty"`           // 最大玩家人数
	RakeUpLimit        []int64                `protobuf:"varint,14,rep,packed,name=RakeUpLimit,proto3" json:"RakeUpLimit,omitempty"`          // 每局多少人的抽水上限，2人，3人等抽水
	MaxRoomPlayerCount uint32                 `protobuf:"varint,15,opt,name=MaxRoomPlayerCount,proto3" json:"MaxRoomPlayerCount,omitempty"`   // 最大房间人数
	IsNoFlopNoDrop     bool                   `protobuf:"varint,16,opt,name=IsNoFlopNoDrop,proto3" json:"IsNoFlopNoDrop,omitempty"`           // 是否开启
	IsTest             bool                   `protobuf:"varint,17,opt,name=IsTest,proto3" json:"IsTest,omitempty"`                           // 是否为测试
	unknownFields      protoimpl.UnknownFields `xorm:"-"`
	sizeCache          protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasConfig) Reset() {
	*x = TexasConfig{}
	mi := &file_table_cfg_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasConfig) ProtoMessage() {}

func (x *TexasConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasConfig.ProtoReflect.Descriptor instead.
func (*TexasConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{15}
}

func (x *TexasConfig) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TexasConfig) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *TexasConfig) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MatchTypeNone
}

func (x *TexasConfig) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *TexasConfig) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *TexasConfig) GetRoomKeepLive() int64 {
	if x != nil {
		return x.RoomKeepLive
	}
	return 0
}

func (x *TexasConfig) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *TexasConfig) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *TexasConfig) GetMinBuyIn() int32 {
	if x != nil {
		return x.MinBuyIn
	}
	return 0
}

func (x *TexasConfig) GetMaxBuyIn() int32 {
	if x != nil {
		return x.MaxBuyIn
	}
	return 0
}

func (x *TexasConfig) GetRakeRate() int64 {
	if x != nil {
		return x.RakeRate
	}
	return 0
}

func (x *TexasConfig) GetMinPlayerCount() int32 {
	if x != nil {
		return x.MinPlayerCount
	}
	return 0
}

func (x *TexasConfig) GetMaxPlayerCount() int32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

func (x *TexasConfig) GetRakeUpLimit() []int64 {
	if x != nil {
		return x.RakeUpLimit
	}
	return nil
}

func (x *TexasConfig) GetMaxRoomPlayerCount() uint32 {
	if x != nil {
		return x.MaxRoomPlayerCount
	}
	return 0
}

func (x *TexasConfig) GetIsNoFlopNoDrop() bool {
	if x != nil {
		return x.IsNoFlopNoDrop
	}
	return false
}

func (x *TexasConfig) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

type TexasConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Ary           []*TexasConfig         `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasConfigAry) Reset() {
	*x = TexasConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasConfigAry) ProtoMessage() {}

func (x *TexasConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasConfigAry.ProtoReflect.Descriptor instead.
func (*TexasConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{16}
}

func (x *TexasConfigAry) GetAry() []*TexasConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type TexasTestConfig struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Round         uint32                 `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`    // 第几轮牌局
	Publics       []string               `protobuf:"bytes,2,rep,name=Publics,proto3" json:"Publics,omitempty"` // 公共牌
	Hands         []*TexasTestHandCard   `protobuf:"bytes,3,rep,name=Hands,proto3" json:"Hands,omitempty"`     // 玩家手牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasTestConfig) Reset() {
	*x = TexasTestConfig{}
	mi := &file_table_cfg_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasTestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTestConfig) ProtoMessage() {}

func (x *TexasTestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTestConfig.ProtoReflect.Descriptor instead.
func (*TexasTestConfig) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{17}
}

func (x *TexasTestConfig) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasTestConfig) GetPublics() []string {
	if x != nil {
		return x.Publics
	}
	return nil
}

func (x *TexasTestConfig) GetHands() []*TexasTestHandCard {
	if x != nil {
		return x.Hands
	}
	return nil
}

type TexasTestConfigAry struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Ary           []*TexasTestConfig     `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasTestConfigAry) Reset() {
	*x = TexasTestConfigAry{}
	mi := &file_table_cfg_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasTestConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTestConfigAry) ProtoMessage() {}

func (x *TexasTestConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_table_cfg_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTestConfigAry.ProtoReflect.Descriptor instead.
func (*TexasTestConfigAry) Descriptor() ([]byte, []int) {
	return file_table_cfg_proto_rawDescGZIP(), []int{18}
}

func (x *TexasTestConfigAry) GetAry() []*TexasTestConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

var File_table_cfg_proto protoreflect.FileDescriptor

var file_table_cfg_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x45, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x49, 0x6e, 0x63, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3f, 0x0a, 0x11, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x48, 0x61, 0x6e, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x48, 0x61, 0x6e, 0x64, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x61, 0x6e, 0x64, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x48, 0x61, 0x6e, 0x64, 0x32, 0x22, 0xd6, 0x02, 0x0a,
	0x0d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x46,
	0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x46, 0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x69, 0x76, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x45, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72,
	0x79, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x43, 0x6d, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0xda,
	0x03, 0x0a, 0x0b, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x65,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x6f, 0x6f,
	0x6d, 0x4b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x42, 0x75,
	0x79, 0x49, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x42, 0x75,
	0x79, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x0e, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x41, 0x72, 0x79, 0x22, 0xed, 0x02, 0x0a, 0x12, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x61, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44,
	0x65, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x46, 0x69, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x03,
	0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x53, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x43, 0x68, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x3c, 0x0a, 0x11, 0x53, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x03, 0x41, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41,
	0x72, 0x79, 0x22, 0x7b, 0x0a, 0x18, 0x53, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x50, 0x0a, 0x1b, 0x53, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x53, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72,
	0x79, 0x22, 0xea, 0x04, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x2b, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d,
	0x4b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x42,
	0x75, 0x79, 0x49, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x42,
	0x75, 0x79, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x49, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x49, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x61,
	0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0b, 0x52, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x52,
	0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x70, 0x4e, 0x6f, 0x44, 0x72, 0x6f, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x70,
	0x4e, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x22, 0x36,
	0x0a, 0x0e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79,
	0x12, 0x24, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0x71, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x05, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x12, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_table_cfg_proto_rawDescOnce sync.Once
	file_table_cfg_proto_rawDescData []byte
)

func file_table_cfg_proto_rawDescGZIP() []byte {
	file_table_cfg_proto_rawDescOnce.Do(func() {
		file_table_cfg_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_table_cfg_proto_rawDesc), len(file_table_cfg_proto_rawDesc)))
	})
	return file_table_cfg_proto_rawDescData
}

var file_table_cfg_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_table_cfg_proto_goTypes = []any{
	(*BreakInfo)(nil),                   // 0: poker.BreakInfo
	(*CoinReward)(nil),                  // 1: poker.CoinReward
	(*TexasTestHandCard)(nil),           // 2: poker.TexasTestHandCard
	(*MachineConfig)(nil),               // 3: poker.MachineConfig
	(*MachineConfigAry)(nil),            // 4: poker.MachineConfigAry
	(*RouterConfig)(nil),                // 5: poker.RouterConfig
	(*RouterConfigAry)(nil),             // 6: poker.RouterConfigAry
	(*RummyConfig)(nil),                 // 7: poker.RummyConfig
	(*RummyConfigAry)(nil),              // 8: poker.RummyConfigAry
	(*RummyMachineConfig)(nil),          // 9: poker.RummyMachineConfig
	(*RummyMachineConfigAry)(nil),       // 10: poker.RummyMachineConfigAry
	(*SngMatchConfig)(nil),              // 11: poker.SngMatchConfig
	(*SngMatchConfigAry)(nil),           // 12: poker.SngMatchConfigAry
	(*SngMatchRankRewardConfig)(nil),    // 13: poker.SngMatchRankRewardConfig
	(*SngMatchRankRewardConfigAry)(nil), // 14: poker.SngMatchRankRewardConfigAry
	(*TexasConfig)(nil),                 // 15: poker.TexasConfig
	(*TexasConfigAry)(nil),              // 16: poker.TexasConfigAry
	(*TexasTestConfig)(nil),             // 17: poker.TexasTestConfig
	(*TexasTestConfigAry)(nil),          // 18: poker.TexasTestConfigAry
	(CoinType)(0),                       // 19: poker.CoinType
	(GameType)(0),                       // 20: poker.GameType
	(NodeType)(0),                       // 21: poker.NodeType
	(RouterType)(0),                     // 22: poker.RouterType
	(RoomType)(0),                       // 23: poker.RoomType
	(MatchType)(0),                      // 24: poker.MatchType
}
var file_table_cfg_proto_depIdxs = []int32{
	19, // 0: poker.CoinReward.CoinType:type_name -> poker.CoinType
	20, // 1: poker.MachineConfig.GameType:type_name -> poker.GameType
	3,  // 2: poker.MachineConfigAry.Ary:type_name -> poker.MachineConfig
	21, // 3: poker.RouterConfig.NodeType:type_name -> poker.NodeType
	22, // 4: poker.RouterConfig.RouterType:type_name -> poker.RouterType
	5,  // 5: poker.RouterConfigAry.Ary:type_name -> poker.RouterConfig
	20, // 6: poker.RummyConfig.GameType:type_name -> poker.GameType
	23, // 7: poker.RummyConfig.RoomType:type_name -> poker.RoomType
	19, // 8: poker.RummyConfig.CoinType:type_name -> poker.CoinType
	7,  // 9: poker.RummyConfigAry.Ary:type_name -> poker.RummyConfig
	20, // 10: poker.RummyMachineConfig.GameType:type_name -> poker.GameType
	9,  // 11: poker.RummyMachineConfigAry.Ary:type_name -> poker.RummyMachineConfig
	19, // 12: poker.SngMatchConfig.CoinType:type_name -> poker.CoinType
	1,  // 13: poker.SngMatchConfig.Consume:type_name -> poker.CoinReward
	0,  // 14: poker.SngMatchConfig.BreakInfos:type_name -> poker.BreakInfo
	11, // 15: poker.SngMatchConfigAry.Ary:type_name -> poker.SngMatchConfig
	1,  // 16: poker.SngMatchRankRewardConfig.Rewards:type_name -> poker.CoinReward
	13, // 17: poker.SngMatchRankRewardConfigAry.Ary:type_name -> poker.SngMatchRankRewardConfig
	20, // 18: poker.TexasConfig.GameType:type_name -> poker.GameType
	24, // 19: poker.TexasConfig.MatchType:type_name -> poker.MatchType
	23, // 20: poker.TexasConfig.RoomType:type_name -> poker.RoomType
	19, // 21: poker.TexasConfig.CoinType:type_name -> poker.CoinType
	15, // 22: poker.TexasConfigAry.Ary:type_name -> poker.TexasConfig
	2,  // 23: poker.TexasTestConfig.Hands:type_name -> poker.TexasTestHandCard
	17, // 24: poker.TexasTestConfigAry.Ary:type_name -> poker.TexasTestConfig
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_table_cfg_proto_init() }
func file_table_cfg_proto_init() {
	if File_table_cfg_proto != nil {
		return
	}
	file_global_enum_cfg_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_table_cfg_proto_rawDesc), len(file_table_cfg_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_table_cfg_proto_goTypes,
		DependencyIndexes: file_table_cfg_proto_depIdxs,
		MessageInfos:      file_table_cfg_proto_msgTypes,
	}.Build()
	File_table_cfg_proto = out.File
	file_table_cfg_proto_goTypes = nil
	file_table_cfg_proto_depIdxs = nil
}
