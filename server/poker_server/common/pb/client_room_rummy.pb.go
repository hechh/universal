// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: client_room_rummy.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RummyPlayerActionType 玩家行为类型
type RummyPlayerActionType int32

const (
	RummyPlayerActionType_Rummy_PLAYER_ACTION_ONLINE     RummyPlayerActionType = 0 // 玩家上线
	RummyPlayerActionType_Rummy_PLAYER_ACTION_OFFLINE    RummyPlayerActionType = 1 // 玩家离线
	RummyPlayerActionType_Rummy_PLAYER_ACTION_FINISH_ERR RummyPlayerActionType = 2 // 炸胡
	RummyPlayerActionType_Rummy_PLAYER_ACTION_ELIMINATED RummyPlayerActionType = 3 // 淘汰
	RummyPlayerActionType_Rummy_PLAYER_ACTION_GIVEUP     RummyPlayerActionType = 4 // 超时没有操作 被系统自动踢出
)

// Enum value maps for RummyPlayerActionType.
var (
	RummyPlayerActionType_name = map[int32]string{
		0: "Rummy_PLAYER_ACTION_ONLINE",
		1: "Rummy_PLAYER_ACTION_OFFLINE",
		2: "Rummy_PLAYER_ACTION_FINISH_ERR",
		3: "Rummy_PLAYER_ACTION_ELIMINATED",
		4: "Rummy_PLAYER_ACTION_GIVEUP",
	}
	RummyPlayerActionType_value = map[string]int32{
		"Rummy_PLAYER_ACTION_ONLINE":     0,
		"Rummy_PLAYER_ACTION_OFFLINE":    1,
		"Rummy_PLAYER_ACTION_FINISH_ERR": 2,
		"Rummy_PLAYER_ACTION_ELIMINATED": 3,
		"Rummy_PLAYER_ACTION_GIVEUP":     4,
	}
)

func (x RummyPlayerActionType) Enum() *RummyPlayerActionType {
	p := new(RummyPlayerActionType)
	*p = x
	return p
}

func (x RummyPlayerActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyPlayerActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_room_rummy_proto_enumTypes[0].Descriptor()
}

func (RummyPlayerActionType) Type() protoreflect.EnumType {
	return &file_client_room_rummy_proto_enumTypes[0]
}

func (x RummyPlayerActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyPlayerActionType.Descriptor instead.
func (RummyPlayerActionType) EnumDescriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{0}
}

// RummyPlayState 玩牌状态
type RummyPlayState int32

const (
	RummyPlayState_Rummy_PLAYSTATE_INIT       RummyPlayState = 0 // 玩家初始状态
	RummyPlayState_Rummy_PLAYSTATE_PLAY       RummyPlayState = 1 // 玩家就绪状态
	RummyPlayState_Rummy_PLAYSTATE_GIVEUP     RummyPlayState = 2 // 投降状态
	RummyPlayState_Rummy_PLAYSTATE_WIN        RummyPlayState = 3 // 赢牌状态
	RummyPlayState_Rummy_PLAYSTATE_LOSE       RummyPlayState = 4 // 输牌状态
	RummyPlayState_Rummy_PLAYSTATE_ELIMINATED RummyPlayState = 5 // 淘汰状态
	RummyPlayState_Rummy_PLAYSTATE_READY      RummyPlayState = 6 // 预备状态 滚场时检测余额通过转正式状态
)

// Enum value maps for RummyPlayState.
var (
	RummyPlayState_name = map[int32]string{
		0: "Rummy_PLAYSTATE_INIT",
		1: "Rummy_PLAYSTATE_PLAY",
		2: "Rummy_PLAYSTATE_GIVEUP",
		3: "Rummy_PLAYSTATE_WIN",
		4: "Rummy_PLAYSTATE_LOSE",
		5: "Rummy_PLAYSTATE_ELIMINATED",
		6: "Rummy_PLAYSTATE_READY",
	}
	RummyPlayState_value = map[string]int32{
		"Rummy_PLAYSTATE_INIT":       0,
		"Rummy_PLAYSTATE_PLAY":       1,
		"Rummy_PLAYSTATE_GIVEUP":     2,
		"Rummy_PLAYSTATE_WIN":        3,
		"Rummy_PLAYSTATE_LOSE":       4,
		"Rummy_PLAYSTATE_ELIMINATED": 5,
		"Rummy_PLAYSTATE_READY":      6,
	}
)

func (x RummyPlayState) Enum() *RummyPlayState {
	p := new(RummyPlayState)
	*p = x
	return p
}

func (x RummyPlayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyPlayState) Descriptor() protoreflect.EnumDescriptor {
	return file_client_room_rummy_proto_enumTypes[1].Descriptor()
}

func (RummyPlayState) Type() protoreflect.EnumType {
	return &file_client_room_rummy_proto_enumTypes[1]
}

func (x RummyPlayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyPlayState.Descriptor instead.
func (RummyPlayState) EnumDescriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{1}
}

// rummy 玩家健康状态
type RummyPlayHealth int32

const (
	RummyPlayHealth_Rummy_NORMAL  RummyPlayHealth = 0 //正常
	RummyPlayHealth_Rummy_QUIT    RummyPlayHealth = 1 //玩家主动退出游戏
	RummyPlayHealth_Rummy_KICK    RummyPlayHealth = 2 //gm干预t出
	RummyPlayHealth_Rummy_OFFLINE RummyPlayHealth = 3 //网关检测掉线
	RummyPlayHealth_Rummy_TIMEOUT RummyPlayHealth = 4 //玩家长时间不动 投降并移除游戏
)

// Enum value maps for RummyPlayHealth.
var (
	RummyPlayHealth_name = map[int32]string{
		0: "Rummy_NORMAL",
		1: "Rummy_QUIT",
		2: "Rummy_KICK",
		3: "Rummy_OFFLINE",
		4: "Rummy_TIMEOUT",
	}
	RummyPlayHealth_value = map[string]int32{
		"Rummy_NORMAL":  0,
		"Rummy_QUIT":    1,
		"Rummy_KICK":    2,
		"Rummy_OFFLINE": 3,
		"Rummy_TIMEOUT": 4,
	}
)

func (x RummyPlayHealth) Enum() *RummyPlayHealth {
	p := new(RummyPlayHealth)
	*p = x
	return p
}

func (x RummyPlayHealth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyPlayHealth) Descriptor() protoreflect.EnumDescriptor {
	return file_client_room_rummy_proto_enumTypes[2].Descriptor()
}

func (RummyPlayHealth) Type() protoreflect.EnumType {
	return &file_client_room_rummy_proto_enumTypes[2]
}

func (x RummyPlayHealth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyPlayHealth.Descriptor instead.
func (RummyPlayHealth) EnumDescriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{2}
}

// RummyOprType 操作牌类型
type RummyOprType int32

const (
	RummyOprType_Rummy_OPR_TYPE_UNDEFINE   RummyOprType = 0 //站位
	RummyOprType_Rummy_OPR_TYPE_CHI        RummyOprType = 1 // 吃明牌（别人打的牌）
	RummyOprType_Rummy_OPR_TYPE_GRAB       RummyOprType = 2 // 抓暗牌
	RummyOprType_Rummy_OPR_TYPE_GIVEUP     RummyOprType = 3 // 投降
	RummyOprType_Rummy_OPR_TYPE_OUT        RummyOprType = 4 // 出牌
	RummyOprType_Rummy_OPR_TYPE_FIX        RummyOprType = 5 // 确认牌组 赢家 胡牌
	RummyOprType_Rummy_OPR_TYPE_FIX_FINISH RummyOprType = 6 // 确认牌组 胡牌完成
	RummyOprType_Rummy_OPR_TYPE_LOSE       RummyOprType = 7 // 弃牌 (玩家超时行为 归还抽取明牌 转为抽暗牌打暗牌)
)

// Enum value maps for RummyOprType.
var (
	RummyOprType_name = map[int32]string{
		0: "Rummy_OPR_TYPE_UNDEFINE",
		1: "Rummy_OPR_TYPE_CHI",
		2: "Rummy_OPR_TYPE_GRAB",
		3: "Rummy_OPR_TYPE_GIVEUP",
		4: "Rummy_OPR_TYPE_OUT",
		5: "Rummy_OPR_TYPE_FIX",
		6: "Rummy_OPR_TYPE_FIX_FINISH",
		7: "Rummy_OPR_TYPE_LOSE",
	}
	RummyOprType_value = map[string]int32{
		"Rummy_OPR_TYPE_UNDEFINE":   0,
		"Rummy_OPR_TYPE_CHI":        1,
		"Rummy_OPR_TYPE_GRAB":       2,
		"Rummy_OPR_TYPE_GIVEUP":     3,
		"Rummy_OPR_TYPE_OUT":        4,
		"Rummy_OPR_TYPE_FIX":        5,
		"Rummy_OPR_TYPE_FIX_FINISH": 6,
		"Rummy_OPR_TYPE_LOSE":       7,
	}
)

func (x RummyOprType) Enum() *RummyOprType {
	p := new(RummyOprType)
	*p = x
	return p
}

func (x RummyOprType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyOprType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_room_rummy_proto_enumTypes[3].Descriptor()
}

func (RummyOprType) Type() protoreflect.EnumType {
	return &file_client_room_rummy_proto_enumTypes[3]
}

func (x RummyOprType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyOprType.Descriptor instead.
func (RummyOprType) EnumDescriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{3}
}

// RummyGroupType 牌组类型
type RummyGroupType int32

const (
	RummyGroupType_Rummy_GROUP_TYPE_NONE     RummyGroupType = 0
	RummyGroupType_Rummy_GROUP_TYPE_INVALID  RummyGroupType = 1 //  无效牌
	RummyGroupType_Rummy_GROUP_TYPE_PURE_SEQ RummyGroupType = 2 //  纯顺子
	RummyGroupType_Rummy_GROUP_TYPE_SEQ      RummyGroupType = 3 // 癞子顺子
	RummyGroupType_Rummy_GROUP_TYPE_SET      RummyGroupType = 4 // 3张或4张
)

// Enum value maps for RummyGroupType.
var (
	RummyGroupType_name = map[int32]string{
		0: "Rummy_GROUP_TYPE_NONE",
		1: "Rummy_GROUP_TYPE_INVALID",
		2: "Rummy_GROUP_TYPE_PURE_SEQ",
		3: "Rummy_GROUP_TYPE_SEQ",
		4: "Rummy_GROUP_TYPE_SET",
	}
	RummyGroupType_value = map[string]int32{
		"Rummy_GROUP_TYPE_NONE":     0,
		"Rummy_GROUP_TYPE_INVALID":  1,
		"Rummy_GROUP_TYPE_PURE_SEQ": 2,
		"Rummy_GROUP_TYPE_SEQ":      3,
		"Rummy_GROUP_TYPE_SET":      4,
	}
)

func (x RummyGroupType) Enum() *RummyGroupType {
	p := new(RummyGroupType)
	*p = x
	return p
}

func (x RummyGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_room_rummy_proto_enumTypes[4].Descriptor()
}

func (RummyGroupType) Type() protoreflect.EnumType {
	return &file_client_room_rummy_proto_enumTypes[4]
}

func (x RummyGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyGroupType.Descriptor instead.
func (RummyGroupType) EnumDescriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{4}
}

// RummyLeaveType 玩家离开类型
type RummyLeaveType int32

const (
	RummyLeaveType_Rummy_LEAVE_TYPE_QUIT RummyLeaveType = 0 //  正常退出
	RummyLeaveType_Rummy_LEAVE_TYPE_KICK RummyLeaveType = 1 // 被踢出
)

// Enum value maps for RummyLeaveType.
var (
	RummyLeaveType_name = map[int32]string{
		0: "Rummy_LEAVE_TYPE_QUIT",
		1: "Rummy_LEAVE_TYPE_KICK",
	}
	RummyLeaveType_value = map[string]int32{
		"Rummy_LEAVE_TYPE_QUIT": 0,
		"Rummy_LEAVE_TYPE_KICK": 1,
	}
)

func (x RummyLeaveType) Enum() *RummyLeaveType {
	p := new(RummyLeaveType)
	*p = x
	return p
}

func (x RummyLeaveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyLeaveType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_room_rummy_proto_enumTypes[5].Descriptor()
}

func (RummyLeaveType) Type() protoreflect.EnumType {
	return &file_client_room_rummy_proto_enumTypes[5]
}

func (x RummyLeaveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyLeaveType.Descriptor instead.
func (RummyLeaveType) EnumDescriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{5}
}

// RummyCardGroup rummy牌组
type RummyCardGroup struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Cards         []uint32               `protobuf:"varint,1,rep,packed,name=cards,proto3" json:"cards,omitempty"`                                             // 牌
	GroupType     RummyGroupType         `protobuf:"varint,2,opt,name=group_type,json=groupType,proto3,enum=poker.RummyGroupType" json:"group_type,omitempty"` // 牌组类型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyCardGroup) Reset() {
	*x = RummyCardGroup{}
	mi := &file_client_room_rummy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyCardGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyCardGroup) ProtoMessage() {}

func (x *RummyCardGroup) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyCardGroup.ProtoReflect.Descriptor instead.
func (*RummyCardGroup) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{0}
}

func (x *RummyCardGroup) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *RummyCardGroup) GetGroupType() RummyGroupType {
	if x != nil {
		return x.GroupType
	}
	return RummyGroupType_Rummy_GROUP_TYPE_NONE
}

// RummyZhuangCard 定庄时给玩家发的牌
type RummyZhuangCard struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PlayerId      uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 玩家id
	Card          uint32                 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`                         // 定庄发给玩家的牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyZhuangCard) Reset() {
	*x = RummyZhuangCard{}
	mi := &file_client_room_rummy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyZhuangCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyZhuangCard) ProtoMessage() {}

func (x *RummyZhuangCard) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyZhuangCard.ProtoReflect.Descriptor instead.
func (*RummyZhuangCard) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{1}
}

func (x *RummyZhuangCard) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyZhuangCard) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

// RummySettlePlayerInfo 结算玩家账单
type RummySettlePlayerInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PlayerId      uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`     // 玩家ID
	CardGroup     []*RummyCardGroup      `protobuf:"bytes,2,rep,name=card_group,json=cardGroup,proto3" json:"card_group,omitempty"`   // 玩家手牌牌组
	Score         int64                  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                           // 手牌得分
	Coin          int64                  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`                             // 输赢金币=hand_score*底分（points） 或者总积分（pool,deal） ############
	State         RummyPlayState         `protobuf:"varint,5,opt,name=state,proto3,enum=poker.RummyPlayState" json:"state,omitempty"` // 状态
	NickName      string                 `protobuf:"bytes,6,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`      // 玩家昵称
	BonusCash     int64                  `protobuf:"varint,7,opt,name=bonus_cash,json=bonusCash,proto3" json:"bonus_cash,omitempty"`  // 玩家余额
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettlePlayerInfo) Reset() {
	*x = RummySettlePlayerInfo{}
	mi := &file_client_room_rummy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettlePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettlePlayerInfo) ProtoMessage() {}

func (x *RummySettlePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettlePlayerInfo.ProtoReflect.Descriptor instead.
func (*RummySettlePlayerInfo) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{2}
}

func (x *RummySettlePlayerInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummySettlePlayerInfo) GetCardGroup() []*RummyCardGroup {
	if x != nil {
		return x.CardGroup
	}
	return nil
}

func (x *RummySettlePlayerInfo) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RummySettlePlayerInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RummySettlePlayerInfo) GetState() RummyPlayState {
	if x != nil {
		return x.State
	}
	return RummyPlayState_Rummy_PLAYSTATE_INIT
}

func (x *RummySettlePlayerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RummySettlePlayerInfo) GetBonusCash() int64 {
	if x != nil {
		return x.BonusCash
	}
	return 0
}

// RummyTotalSettlePlayer 总结算玩家账单
type RummyTotalSettlePlayer struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PlayerId      uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`       // 玩家ID
	NickName      string                 `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`        // 玩家昵称
	PicUrl        string                 `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`              // 玩家昵称
	State         RummyPlayState         `protobuf:"varint,4,opt,name=state,proto3,enum=poker.RummyPlayState" json:"state,omitempty"`   // 状态
	TotalScore    int64                  `protobuf:"varint,5,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"` // 总得分
	Prize         string                 `protobuf:"bytes,6,opt,name=prize,proto3" json:"prize,omitempty"`                              // 赢家的奖金 #########
	BonusCash     string                 `protobuf:"bytes,7,opt,name=bonus_cash,json=bonusCash,proto3" json:"bonus_cash,omitempty"`     // bonus-->cash数
	VipPoints     string                 `protobuf:"bytes,8,opt,name=vip_points,json=vipPoints,proto3" json:"vip_points,omitempty"`     // 得到的vip点数
	NewIcon       string                 `protobuf:"bytes,9,opt,name=new_icon,json=newIcon,proto3" json:"new_icon,omitempty"`           // 玩家头像
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyTotalSettlePlayer) Reset() {
	*x = RummyTotalSettlePlayer{}
	mi := &file_client_room_rummy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyTotalSettlePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyTotalSettlePlayer) ProtoMessage() {}

func (x *RummyTotalSettlePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyTotalSettlePlayer.ProtoReflect.Descriptor instead.
func (*RummyTotalSettlePlayer) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{3}
}

func (x *RummyTotalSettlePlayer) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyTotalSettlePlayer) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RummyTotalSettlePlayer) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *RummyTotalSettlePlayer) GetState() RummyPlayState {
	if x != nil {
		return x.State
	}
	return RummyPlayState_Rummy_PLAYSTATE_INIT
}

func (x *RummyTotalSettlePlayer) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *RummyTotalSettlePlayer) GetPrize() string {
	if x != nil {
		return x.Prize
	}
	return ""
}

func (x *RummyTotalSettlePlayer) GetBonusCash() string {
	if x != nil {
		return x.BonusCash
	}
	return ""
}

func (x *RummyTotalSettlePlayer) GetVipPoints() string {
	if x != nil {
		return x.VipPoints
	}
	return ""
}

func (x *RummyTotalSettlePlayer) GetNewIcon() string {
	if x != nil {
		return x.NewIcon
	}
	return ""
}

// RummyScoreBoardPlayer 积分板玩家
type RummyScoreBoardPlayer struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PlayerId      uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 玩家ID
	NickName      string                 `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`  // 玩家昵称
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyScoreBoardPlayer) Reset() {
	*x = RummyScoreBoardPlayer{}
	mi := &file_client_room_rummy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyScoreBoardPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyScoreBoardPlayer) ProtoMessage() {}

func (x *RummyScoreBoardPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyScoreBoardPlayer.ProtoReflect.Descriptor instead.
func (*RummyScoreBoardPlayer) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{4}
}

func (x *RummyScoreBoardPlayer) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyScoreBoardPlayer) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

// RummyPlayerScore 玩家积分
type RummyPlayerScore struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PlayerId      uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 玩家ID
	Score         int64                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                       // 本局分数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyPlayerScore) Reset() {
	*x = RummyPlayerScore{}
	mi := &file_client_room_rummy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyPlayerScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyPlayerScore) ProtoMessage() {}

func (x *RummyPlayerScore) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyPlayerScore.ProtoReflect.Descriptor instead.
func (*RummyPlayerScore) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{5}
}

func (x *RummyPlayerScore) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyPlayerScore) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// RummyRoundSettle 每轮结算
type RummyRoundSettle struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Round         int32                  `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`  // 当前局ID
	Scores        []*RummyPlayerScore    `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"` // 玩家积分列表
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyRoundSettle) Reset() {
	*x = RummyRoundSettle{}
	mi := &file_client_room_rummy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyRoundSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyRoundSettle) ProtoMessage() {}

func (x *RummyRoundSettle) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyRoundSettle.ProtoReflect.Descriptor instead.
func (*RummyRoundSettle) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{6}
}

func (x *RummyRoundSettle) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RummyRoundSettle) GetScores() []*RummyPlayerScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

// RummyRoomPlayer 游戏中的玩家公开信息
type RummyRoomPlayer struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PlayerId      uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`      // 玩家id
	PlayerNick    string                 `protobuf:"bytes,2,opt,name=player_nick,json=playerNick,proto3" json:"player_nick,omitempty"` // 玩家昵称
	PicUrl        string                 `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`             // 玩家头像
	State         RummyPlayState         `protobuf:"varint,4,opt,name=state,proto3,enum=poker.RummyPlayState" json:"state,omitempty"`
	Health        RummyPlayHealth        `protobuf:"varint,5,opt,name=health,proto3,enum=poker.RummyPlayHealth" json:"health,omitempty"`
	Coin          uint64                 `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`        // 金币值(points)或者总积分（pool，deal) ##################
	Seat          uint32                 `protobuf:"varint,7,opt,name=seat,proto3" json:"seat,omitempty"`        // 位置ID
	Vip           int32                  `protobuf:"varint,8,opt,name=vip,proto3" json:"vip,omitempty"`          // VIP等级
	Location      string                 `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"` // 玩家所在地区
	Private       *RummyPlayerRumtime    `protobuf:"bytes,10,opt,name=private,proto3" json:"private,omitempty"`
	TimeoutCount  uint32                 `protobuf:"varint,11,opt,name=timeout_count,json=timeoutCount,proto3" json:"timeout_count,omitempty"` //玩家连续超时次数
	ReadyTimeout  int64                  `protobuf:"varint,12,opt,name=ready_timeout,json=readyTimeout,proto3" json:"ready_timeout,omitempty"` // 玩家准备超时时间
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyRoomPlayer) Reset() {
	*x = RummyRoomPlayer{}
	mi := &file_client_room_rummy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyRoomPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyRoomPlayer) ProtoMessage() {}

func (x *RummyRoomPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyRoomPlayer.ProtoReflect.Descriptor instead.
func (*RummyRoomPlayer) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{7}
}

func (x *RummyRoomPlayer) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyRoomPlayer) GetPlayerNick() string {
	if x != nil {
		return x.PlayerNick
	}
	return ""
}

func (x *RummyRoomPlayer) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *RummyRoomPlayer) GetState() RummyPlayState {
	if x != nil {
		return x.State
	}
	return RummyPlayState_Rummy_PLAYSTATE_INIT
}

func (x *RummyRoomPlayer) GetHealth() RummyPlayHealth {
	if x != nil {
		return x.Health
	}
	return RummyPlayHealth_Rummy_NORMAL
}

func (x *RummyRoomPlayer) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RummyRoomPlayer) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *RummyRoomPlayer) GetVip() int32 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *RummyRoomPlayer) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *RummyRoomPlayer) GetPrivate() *RummyPlayerRumtime {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *RummyRoomPlayer) GetTimeoutCount() uint32 {
	if x != nil {
		return x.TimeoutCount
	}
	return 0
}

func (x *RummyRoomPlayer) GetReadyTimeout() int64 {
	if x != nil {
		return x.ReadyTimeout
	}
	return 0
}

// @pbtool:hash|poker|room|RoomId@uint64|#rummy房间数据
type RummyRoomData struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Stage         GameState              `protobuf:"varint,1,opt,name=stage,proto3,enum=poker.GameState" json:"stage,omitempty"` // 玩牌阶段
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`      // 桌子ID
	GameId        uint32                 `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`      //游戏id 联动配置
	RoomName      string                 `protobuf:"bytes,5,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"` // 桌子名称
	Common        *RummyCommon           `protobuf:"bytes,6,opt,name=common,proto3" json:"common,omitempty"`
	Match         *MatchParam            `protobuf:"bytes,7,opt,name=match,proto3" json:"match,omitempty"`                             // 比赛局数信息
	MachineCfg    *RummyMachineConfig    `protobuf:"bytes,8,opt,name=machine_cfg,json=machineCfg,proto3" json:"machine_cfg,omitempty"` // 状态机配置
	RoomCfg       *RummyConfig           `protobuf:"bytes,10,opt,name=room_cfg,json=roomCfg,proto3" json:"room_cfg,omitempty"`         // 桌子配置
	Private       *RummyPrivate          `protobuf:"bytes,11,opt,name=private,proto3" json:"private,omitempty"`                        // 暗牌堆
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyRoomData) Reset() {
	*x = RummyRoomData{}
	mi := &file_client_room_rummy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyRoomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyRoomData) ProtoMessage() {}

func (x *RummyRoomData) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyRoomData.ProtoReflect.Descriptor instead.
func (*RummyRoomData) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{8}
}

func (x *RummyRoomData) GetStage() GameState {
	if x != nil {
		return x.Stage
	}
	return GameState_TEXAS_INIT
}

func (x *RummyRoomData) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyRoomData) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RummyRoomData) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RummyRoomData) GetCommon() *RummyCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RummyRoomData) GetMatch() *MatchParam {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RummyRoomData) GetMachineCfg() *RummyMachineConfig {
	if x != nil {
		return x.MachineCfg
	}
	return nil
}

func (x *RummyRoomData) GetRoomCfg() *RummyConfig {
	if x != nil {
		return x.RoomCfg
	}
	return nil
}

func (x *RummyRoomData) GetPrivate() *RummyPrivate {
	if x != nil {
		return x.Private
	}
	return nil
}

// 玩家重连信息
type RummyRoomPubData struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Stage         GameState              `protobuf:"varint,1,opt,name=stage,proto3,enum=poker.GameState" json:"stage,omitempty"` // 玩牌阶段
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`      // 房间ID
	GameId        uint32                 `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`      //游戏id 联动配置
	RoomName      string                 `protobuf:"bytes,5,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"` // 桌子名称
	Common        *RummyCommon           `protobuf:"bytes,6,opt,name=common,proto3" json:"common,omitempty"`
	Match         *MatchParam            `protobuf:"bytes,7,opt,name=match,proto3" json:"match,omitempty"`                     // 比赛局数信息
	RoomCfg       *RummyConfig           `protobuf:"bytes,10,opt,name=room_cfg,json=roomCfg,proto3" json:"room_cfg,omitempty"` // 桌子配置
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyRoomPubData) Reset() {
	*x = RummyRoomPubData{}
	mi := &file_client_room_rummy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyRoomPubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyRoomPubData) ProtoMessage() {}

func (x *RummyRoomPubData) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyRoomPubData.ProtoReflect.Descriptor instead.
func (*RummyRoomPubData) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{9}
}

func (x *RummyRoomPubData) GetStage() GameState {
	if x != nil {
		return x.Stage
	}
	return GameState_TEXAS_INIT
}

func (x *RummyRoomPubData) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyRoomPubData) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RummyRoomPubData) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RummyRoomPubData) GetCommon() *RummyCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RummyRoomPubData) GetMatch() *MatchParam {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RummyRoomPubData) GetRoomCfg() *RummyConfig {
	if x != nil {
		return x.RoomCfg
	}
	return nil
}

type RummyPrivate struct {
	state         protoimpl.MessageState `xorm:"-"` 
	CardIdx       uint32                 `protobuf:"varint,1,opt,name=card_idx,json=cardIdx,proto3" json:"card_idx,omitempty"` //当前卡组滑动标志
	Cards         []uint32               `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`             //暗牌堆
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyPrivate) Reset() {
	*x = RummyPrivate{}
	mi := &file_client_room_rummy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyPrivate) ProtoMessage() {}

func (x *RummyPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyPrivate.ProtoReflect.Descriptor instead.
func (*RummyPrivate) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{10}
}

func (x *RummyPrivate) GetCardIdx() uint32 {
	if x != nil {
		return x.CardIdx
	}
	return 0
}

func (x *RummyPrivate) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// RummyCommon 运行时共有属性
type RummyCommon struct {
	state         protoimpl.MessageState `xorm:"-"`      
	Seats         map[uint32]uint64           `protobuf:"bytes,1,rep,name=seats,proto3" json:"seats,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`    //座位和玩家关系
	Players       map[uint64]*RummyRoomPlayer `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 玩家公示信息
	PlayerIds     []uint64                    `protobuf:"varint,4,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`                                               //对战玩家id
	GhostCard     uint32                      `protobuf:"varint,5,opt,name=ghost_card,json=ghostCard,proto3" json:"ghost_card,omitempty"`                                                      // 癞子牌
	ShowCard      uint32                      `protobuf:"varint,6,opt,name=show_card,json=showCard,proto3" json:"show_card,omitempty"`                                                         // 最后一张明牌
	ZhuangId      uint64                      `protobuf:"varint,7,opt,name=zhuang_id,json=zhuangId,proto3" json:"zhuang_id,omitempty"`                                                         // 庄家id
	TimeOut       int64                       `protobuf:"varint,8,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`                                                            // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	FixCard       uint32                      `protobuf:"varint,9,opt,name=fix_card,json=fixCard,proto3" json:"fix_card,omitempty"`                                                            // 赢家的完成牌
	ShowCard2     uint32                      `protobuf:"varint,10,opt,name=show_card2,json=showCard2,proto3" json:"show_card2,omitempty"`                                                     // 最后一张明牌2
	CreateTime    int64                       `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                                  // 房间创建时间
	WinnerId      uint64                      `protobuf:"varint,12,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`
	GameFinish    bool                        `protobuf:"varint,13,opt,name=game_finish,json=gameFinish,proto3" json:"game_finish,omitempty"`
	OprPlayer     *RummyOprPlayer             `protobuf:"bytes,14,opt,name=opr_player,json=oprPlayer,proto3" json:"opr_player,omitempty"`
	EmptySeats    []uint32                    `protobuf:"varint,15,rep,packed,name=empty_seats,json=emptySeats,proto3" json:"empty_seats,omitempty"`
	TotalTime     int64                       `protobuf:"varint,16,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyCommon) Reset() {
	*x = RummyCommon{}
	mi := &file_client_room_rummy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyCommon) ProtoMessage() {}

func (x *RummyCommon) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyCommon.ProtoReflect.Descriptor instead.
func (*RummyCommon) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{11}
}

func (x *RummyCommon) GetSeats() map[uint32]uint64 {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *RummyCommon) GetPlayers() map[uint64]*RummyRoomPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RummyCommon) GetPlayerIds() []uint64 {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *RummyCommon) GetGhostCard() uint32 {
	if x != nil {
		return x.GhostCard
	}
	return 0
}

func (x *RummyCommon) GetShowCard() uint32 {
	if x != nil {
		return x.ShowCard
	}
	return 0
}

func (x *RummyCommon) GetZhuangId() uint64 {
	if x != nil {
		return x.ZhuangId
	}
	return 0
}

func (x *RummyCommon) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummyCommon) GetFixCard() uint32 {
	if x != nil {
		return x.FixCard
	}
	return 0
}

func (x *RummyCommon) GetShowCard2() uint32 {
	if x != nil {
		return x.ShowCard2
	}
	return 0
}

func (x *RummyCommon) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RummyCommon) GetWinnerId() uint64 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *RummyCommon) GetGameFinish() bool {
	if x != nil {
		return x.GameFinish
	}
	return false
}

func (x *RummyCommon) GetOprPlayer() *RummyOprPlayer {
	if x != nil {
		return x.OprPlayer
	}
	return nil
}

func (x *RummyCommon) GetEmptySeats() []uint32 {
	if x != nil {
		return x.EmptySeats
	}
	return nil
}

func (x *RummyCommon) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

type RummyOprPlayer struct {
	state          protoimpl.MessageState `xorm:"-"` 
	Step           RummyRoundStep         `protobuf:"varint,1,opt,name=step,proto3,enum=poker.RummyRoundStep" json:"step,omitempty"`
	CurOprPlayerId uint64                 `protobuf:"varint,2,opt,name=cur_opr_player_id,json=curOprPlayerId,proto3" json:"cur_opr_player_id,omitempty"`
	OprCurId       uint32                 `protobuf:"varint,3,opt,name=opr_cur_id,json=oprCurId,proto3" json:"opr_cur_id,omitempty"` //playerids key
	PrevOutUid     uint64                 `protobuf:"varint,4,opt,name=prev_out_uid,json=prevOutUid,proto3" json:"prev_out_uid,omitempty"`
	IsEat          bool                   `protobuf:"varint,5,opt,name=is_eat,json=isEat,proto3" json:"is_eat,omitempty"`
	ScorePool      int64                  `protobuf:"varint,6,opt,name=score_pool,json=scorePool,proto3" json:"score_pool,omitempty"`     //奖池
	Round          uint32                 `protobuf:"varint,7,opt,name=round,proto3" json:"round,omitempty"`                              //当前回合
	ZhuangId       uint64                 `protobuf:"varint,8,opt,name=zhuang_id,json=zhuangId,proto3" json:"zhuang_id,omitempty"`        // 庄家id
	OutCards       []uint32               `protobuf:"varint,9,rep,packed,name=out_cards,json=outCards,proto3" json:"out_cards,omitempty"` // 明牌堆
	unknownFields  protoimpl.UnknownFields `xorm:"-"`
	sizeCache      protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyOprPlayer) Reset() {
	*x = RummyOprPlayer{}
	mi := &file_client_room_rummy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyOprPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyOprPlayer) ProtoMessage() {}

func (x *RummyOprPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyOprPlayer.ProtoReflect.Descriptor instead.
func (*RummyOprPlayer) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{12}
}

func (x *RummyOprPlayer) GetStep() RummyRoundStep {
	if x != nil {
		return x.Step
	}
	return RummyRoundStep_PLAYSTEPNONE
}

func (x *RummyOprPlayer) GetCurOprPlayerId() uint64 {
	if x != nil {
		return x.CurOprPlayerId
	}
	return 0
}

func (x *RummyOprPlayer) GetOprCurId() uint32 {
	if x != nil {
		return x.OprCurId
	}
	return 0
}

func (x *RummyOprPlayer) GetPrevOutUid() uint64 {
	if x != nil {
		return x.PrevOutUid
	}
	return 0
}

func (x *RummyOprPlayer) GetIsEat() bool {
	if x != nil {
		return x.IsEat
	}
	return false
}

func (x *RummyOprPlayer) GetScorePool() int64 {
	if x != nil {
		return x.ScorePool
	}
	return 0
}

func (x *RummyOprPlayer) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RummyOprPlayer) GetZhuangId() uint64 {
	if x != nil {
		return x.ZhuangId
	}
	return 0
}

func (x *RummyOprPlayer) GetOutCards() []uint32 {
	if x != nil {
		return x.OutCards
	}
	return nil
}

// Rummy玩家私有数据
type RummyPlayerRumtime struct {
	state         protoimpl.MessageState `xorm:"-"` 
	IsGrabCard    bool                   `protobuf:"varint,3,opt,name=is_grab_card,json=isGrabCard,proto3" json:"is_grab_card,omitempty"`   // 当前回合是否抓暗牌
	HandCards     []uint32               `protobuf:"varint,4,rep,packed,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"` //手牌
	CardGroup     []*RummyCardGroup      `protobuf:"bytes,5,rep,name=card_group,json=cardGroup,proto3" json:"card_group,omitempty"`         //牌序
	Score         int64                  `protobuf:"varint,6,opt,name=Score,proto3" json:"Score,omitempty"`
	PrevCard      uint32                 `protobuf:"varint,7,opt,name=prev_card,json=prevCard,proto3" json:"prev_card,omitempty"`        //上一抽
	OutCards      []uint32               `protobuf:"varint,8,rep,packed,name=out_cards,json=outCards,proto3" json:"out_cards,omitempty"` // 个人出牌历史
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyPlayerRumtime) Reset() {
	*x = RummyPlayerRumtime{}
	mi := &file_client_room_rummy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyPlayerRumtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyPlayerRumtime) ProtoMessage() {}

func (x *RummyPlayerRumtime) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyPlayerRumtime.ProtoReflect.Descriptor instead.
func (*RummyPlayerRumtime) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{13}
}

func (x *RummyPlayerRumtime) GetIsGrabCard() bool {
	if x != nil {
		return x.IsGrabCard
	}
	return false
}

func (x *RummyPlayerRumtime) GetHandCards() []uint32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *RummyPlayerRumtime) GetCardGroup() []*RummyCardGroup {
	if x != nil {
		return x.CardGroup
	}
	return nil
}

func (x *RummyPlayerRumtime) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RummyPlayerRumtime) GetPrevCard() uint32 {
	if x != nil {
		return x.PrevCard
	}
	return 0
}

func (x *RummyPlayerRumtime) GetOutCards() []uint32 {
	if x != nil {
		return x.OutCards
	}
	return nil
}

type MatchParam struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Match         uint32                 `protobuf:"varint,1,opt,name=match,proto3" json:"match,omitempty"`                          //当前比赛多少局
	StartTime     int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //当局比赛开始时间
	EndTime       int64                  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 当局比赛结束时间
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *MatchParam) Reset() {
	*x = MatchParam{}
	mi := &file_client_room_rummy_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchParam) ProtoMessage() {}

func (x *MatchParam) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchParam.ProtoReflect.Descriptor instead.
func (*MatchParam) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{14}
}

func (x *MatchParam) GetMatch() uint32 {
	if x != nil {
		return x.Match
	}
	return 0
}

func (x *MatchParam) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MatchParam) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// RummyEnterDeskReq 进入桌子或重连请求
type RummyJoinRoomReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`            // 房间id
	PlayerInfo    *PlayerInfo            `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"` // 玩家信息
	IsChange      bool                   `protobuf:"varint,3,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`      // 换桌请求
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyJoinRoomReq) Reset() {
	*x = RummyJoinRoomReq{}
	mi := &file_client_room_rummy_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyJoinRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyJoinRoomReq) ProtoMessage() {}

func (x *RummyJoinRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyJoinRoomReq.ProtoReflect.Descriptor instead.
func (*RummyJoinRoomReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{15}
}

func (x *RummyJoinRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyJoinRoomReq) GetPlayerInfo() *PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *RummyJoinRoomReq) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

// RummyJoinRoomReq 进入桌子或重连响应
type RummyJoinRoomRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                                   //请求结果信息
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                // 进入的房间桌子ID
	RoomInfo      *RummyRoomPubData      `protobuf:"bytes,3,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`           // 返回桌子信息
	IsReconnect   bool                   `protobuf:"varint,4,opt,name=is_reconnect,json=isReconnect,proto3" json:"is_reconnect,omitempty"` // 是否是重连
	GaveScore     int64                  `protobuf:"varint,5,opt,name=gave_score,json=gaveScore,proto3" json:"gave_score,omitempty"`       // 投降分数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyJoinRoomRsp) Reset() {
	*x = RummyJoinRoomRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyJoinRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyJoinRoomRsp) ProtoMessage() {}

func (x *RummyJoinRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyJoinRoomRsp.ProtoReflect.Descriptor instead.
func (*RummyJoinRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{16}
}

func (x *RummyJoinRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyJoinRoomRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyJoinRoomRsp) GetRoomInfo() *RummyRoomPubData {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *RummyJoinRoomRsp) GetIsReconnect() bool {
	if x != nil {
		return x.IsReconnect
	}
	return false
}

func (x *RummyJoinRoomRsp) GetGaveScore() int64 {
	if x != nil {
		return x.GaveScore
	}
	return 0
}

// 通知消息
type RummyEventNotify struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Event         RummyEventType         `protobuf:"varint,1,opt,name=Event,proto3,enum=poker.RummyEventType" json:"Event,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyEventNotify) Reset() {
	*x = RummyEventNotify{}
	mi := &file_client_room_rummy_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyEventNotify) ProtoMessage() {}

func (x *RummyEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyEventNotify.ProtoReflect.Descriptor instead.
func (*RummyEventNotify) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{17}
}

func (x *RummyEventNotify) GetEvent() RummyEventType {
	if x != nil {
		return x.Event
	}
	return RummyEventType_RummyEnterNone
}

func (x *RummyEventNotify) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// RummyEnterDeskNtf 玩家进入桌子通知
type RummyEnterDeskNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 桌子ID
	Player        *RummyRoomPlayer       `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`                // 玩家信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyEnterDeskNtf) Reset() {
	*x = RummyEnterDeskNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyEnterDeskNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyEnterDeskNtf) ProtoMessage() {}

func (x *RummyEnterDeskNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyEnterDeskNtf.ProtoReflect.Descriptor instead.
func (*RummyEnterDeskNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{18}
}

func (x *RummyEnterDeskNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyEnterDeskNtf) GetPlayer() *RummyRoomPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

// RummyQuitRoomReq 离开的房间ID
type RummyQuitRoomReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`       // 离开的房间ID
	IsChange      bool                   `protobuf:"varint,2,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"` // 换桌请求
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyQuitRoomReq) Reset() {
	*x = RummyQuitRoomReq{}
	mi := &file_client_room_rummy_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyQuitRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyQuitRoomReq) ProtoMessage() {}

func (x *RummyQuitRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyQuitRoomReq.ProtoReflect.Descriptor instead.
func (*RummyQuitRoomReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{19}
}

func (x *RummyQuitRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyQuitRoomReq) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

// RummyQuitRoomRsp 离开房间响应
type RummyQuitRoomRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                    //请求结果信息
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 离开的房间ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyQuitRoomRsp) Reset() {
	*x = RummyQuitRoomRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyQuitRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyQuitRoomRsp) ProtoMessage() {}

func (x *RummyQuitRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyQuitRoomRsp.ProtoReflect.Descriptor instead.
func (*RummyQuitRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{20}
}

func (x *RummyQuitRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyQuitRoomRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// RummyQuitRoomNtf 玩家离开桌子通知
type RummyQuitRoomNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                    // 房间ID
	PlayerId      uint64                 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                              // 玩家id
	LeaveType     RummyLeaveType         `protobuf:"varint,3,opt,name=leave_type,json=leaveType,proto3,enum=poker.RummyLeaveType" json:"leave_type,omitempty"` // 玩家离开类型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyQuitRoomNtf) Reset() {
	*x = RummyQuitRoomNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyQuitRoomNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyQuitRoomNtf) ProtoMessage() {}

func (x *RummyQuitRoomNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyQuitRoomNtf.ProtoReflect.Descriptor instead.
func (*RummyQuitRoomNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{21}
}

func (x *RummyQuitRoomNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyQuitRoomNtf) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyQuitRoomNtf) GetLeaveType() RummyLeaveType {
	if x != nil {
		return x.LeaveType
	}
	return RummyLeaveType_Rummy_LEAVE_TYPE_QUIT
}

// RummyReadyStartGameNtf Rummy游戏开始倒计时通知
type RummyReadyStartGameNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`    // 房间ID
	TimeOut       int64                  `protobuf:"varint,2,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"` // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	TotalTime     int64                  `protobuf:"varint,3,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyReadyStartGameNtf) Reset() {
	*x = RummyReadyStartGameNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyReadyStartGameNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyReadyStartGameNtf) ProtoMessage() {}

func (x *RummyReadyStartGameNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyReadyStartGameNtf.ProtoReflect.Descriptor instead.
func (*RummyReadyStartGameNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{22}
}

func (x *RummyReadyStartGameNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyReadyStartGameNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummyReadyStartGameNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

// RummyStartGameNtf Rummy游戏开始通知（开局直接发牌）
type RummyStartGameNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`       // 房间ID
	ZhuangId      uint64                 `protobuf:"varint,2,opt,name=zhuang_id,json=zhuangId,proto3" json:"zhuang_id,omitempty"` // 庄玩家id
	CurMatch      uint32                 `protobuf:"varint,3,opt,name=cur_match,json=curMatch,proto3" json:"cur_match,omitempty"` // 当前局
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyStartGameNtf) Reset() {
	*x = RummyStartGameNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyStartGameNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyStartGameNtf) ProtoMessage() {}

func (x *RummyStartGameNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyStartGameNtf.ProtoReflect.Descriptor instead.
func (*RummyStartGameNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{23}
}

func (x *RummyStartGameNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyStartGameNtf) GetZhuangId() uint64 {
	if x != nil {
		return x.ZhuangId
	}
	return 0
}

func (x *RummyStartGameNtf) GetCurMatch() uint32 {
	if x != nil {
		return x.CurMatch
	}
	return 0
}

// RummySetZhuangNtf 发定庄通知
type RummySetZhuangNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`       // 桌子ID
	Cards         []*RummyZhuangCard     `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`                        // 定庄时给玩家发的牌，每人一张牌
	ZhuangId      uint64                 `protobuf:"varint,3,opt,name=zhuang_id,json=zhuangId,proto3" json:"zhuang_id,omitempty"` // 庄玩家id
	TimeOut       uint64                 `protobuf:"varint,4,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`    // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	TotalTime     int64                  `protobuf:"varint,5,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySetZhuangNtf) Reset() {
	*x = RummySetZhuangNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySetZhuangNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySetZhuangNtf) ProtoMessage() {}

func (x *RummySetZhuangNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySetZhuangNtf.ProtoReflect.Descriptor instead.
func (*RummySetZhuangNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{24}
}

func (x *RummySetZhuangNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummySetZhuangNtf) GetCards() []*RummyZhuangCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *RummySetZhuangNtf) GetZhuangId() uint64 {
	if x != nil {
		return x.ZhuangId
	}
	return 0
}

func (x *RummySetZhuangNtf) GetTimeOut() uint64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummySetZhuangNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

// RummyDealNtf 发手牌通知
type RummyDealNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                 // 桌子ID
	HandCards     []uint32               `protobuf:"varint,2,rep,packed,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"` // 玩家本人手牌，13张，仅本人能看到牌
	GhostCard     uint32                 `protobuf:"varint,3,opt,name=ghost_card,json=ghostCard,proto3" json:"ghost_card,omitempty"`        // 癞子牌
	ShowCard      uint32                 `protobuf:"varint,4,opt,name=show_card,json=showCard,proto3" json:"show_card,omitempty"`           // 明牌
	TimeOut       int64                  `protobuf:"varint,5,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`              // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	Groups        []*RummyCardGroup      `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`                                // 牌组合
	GroupsScore   int64                  `protobuf:"varint,7,opt,name=groups_score,json=groupsScore,proto3" json:"groups_score,omitempty"`  // 牌组分数
	ShowCard2     uint32                 `protobuf:"varint,8,opt,name=show_card2,json=showCard2,proto3" json:"show_card2,omitempty"`        // 最后一张明牌2
	TotalTime     int64                  `protobuf:"varint,9,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyDealNtf) Reset() {
	*x = RummyDealNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyDealNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyDealNtf) ProtoMessage() {}

func (x *RummyDealNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyDealNtf.ProtoReflect.Descriptor instead.
func (*RummyDealNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{25}
}

func (x *RummyDealNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyDealNtf) GetHandCards() []uint32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *RummyDealNtf) GetGhostCard() uint32 {
	if x != nil {
		return x.GhostCard
	}
	return 0
}

func (x *RummyDealNtf) GetShowCard() uint32 {
	if x != nil {
		return x.ShowCard
	}
	return 0
}

func (x *RummyDealNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummyDealNtf) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RummyDealNtf) GetGroupsScore() int64 {
	if x != nil {
		return x.GroupsScore
	}
	return 0
}

func (x *RummyDealNtf) GetShowCard2() uint32 {
	if x != nil {
		return x.ShowCard2
	}
	return 0
}

func (x *RummyDealNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

// 出牌之前，必须先抓牌或弃牌，可以抓明牌（别人出的牌），暗牌（牌墙）。抓牌后，可以出牌或胡牌。
// RummyPlayCardNtf 玩牌通知
type RummyPlayCardNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // 房间ID
	PlayerId      uint64                 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`    // 当前玩牌玩家id
	PlayStep      int32                  `protobuf:"varint,3,opt,name=play_step,json=playStep,proto3" json:"play_step,omitempty"`    // Step 打牌阶段： 0=不可操作。1=摸牌，吃牌，投降。 2=出牌，胡牌。 3=结束状态。
	IsChi         bool                   `protobuf:"varint,4,opt,name=is_chi,json=isChi,proto3" json:"is_chi,omitempty"`             //是否吃牌
	TimeOut       int64                  `protobuf:"varint,5,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`       // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	TotalTime     int64                  `protobuf:"varint,6,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"` // 总时间。用于玩牌操作，单位：秒
	GaveScore     int64                  `protobuf:"varint,8,opt,name=gave_score,json=gaveScore,proto3" json:"gave_score,omitempty"` // 投降分数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyPlayCardNtf) Reset() {
	*x = RummyPlayCardNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyPlayCardNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyPlayCardNtf) ProtoMessage() {}

func (x *RummyPlayCardNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyPlayCardNtf.ProtoReflect.Descriptor instead.
func (*RummyPlayCardNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{26}
}

func (x *RummyPlayCardNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyPlayCardNtf) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyPlayCardNtf) GetPlayStep() int32 {
	if x != nil {
		return x.PlayStep
	}
	return 0
}

func (x *RummyPlayCardNtf) GetIsChi() bool {
	if x != nil {
		return x.IsChi
	}
	return false
}

func (x *RummyPlayCardNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummyPlayCardNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *RummyPlayCardNtf) GetGaveScore() int64 {
	if x != nil {
		return x.GaveScore
	}
	return 0
}

// RummyOprCardReq 操作牌请求
type RummyOprCardReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                            // 桌子ID
	OprType       RummyOprType           `protobuf:"varint,2,opt,name=opr_type,json=oprType,proto3,enum=poker.RummyOprType" json:"opr_type,omitempty"` // 操作类型
	OprCard       uint32                 `protobuf:"varint,3,opt,name=opr_card,json=oprCard,proto3" json:"opr_card,omitempty"`                         // 出牌和结束牌时！=0，抓牌，弃牌，吃牌=0.
	Groups        []*RummyCardGroup      `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`                                           // 牌组合
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyOprCardReq) Reset() {
	*x = RummyOprCardReq{}
	mi := &file_client_room_rummy_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyOprCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyOprCardReq) ProtoMessage() {}

func (x *RummyOprCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyOprCardReq.ProtoReflect.Descriptor instead.
func (*RummyOprCardReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{27}
}

func (x *RummyOprCardReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyOprCardReq) GetOprType() RummyOprType {
	if x != nil {
		return x.OprType
	}
	return RummyOprType_Rummy_OPR_TYPE_UNDEFINE
}

func (x *RummyOprCardReq) GetOprCard() uint32 {
	if x != nil {
		return x.OprCard
	}
	return 0
}

func (x *RummyOprCardReq) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// RummyOprCardRsp 操作牌响应
type RummyOprCardRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                                               //请求结果信息
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                            // 桌子ID
	OprCard       uint32                 `protobuf:"varint,3,opt,name=opr_card,json=oprCard,proto3" json:"opr_card,omitempty"`                         // 抓牌，吃牌得到的牌
	PlayStep      int32                  `protobuf:"varint,4,opt,name=play_step,json=playStep,proto3" json:"play_step,omitempty"`                      // Step 打牌阶段： 0=不可操作。1=摸牌，吃牌，投降。 2=出牌，胡牌。 3=结束状态。
	IsEat         bool                   `protobuf:"varint,5,opt,name=is_eat,json=isEat,proto3" json:"is_eat,omitempty"`                               // 是否吃明牌：true表示可以抓明牌，false表示只能抓暗牌。
	OprType       RummyOprType           `protobuf:"varint,6,opt,name=opr_type,json=oprType,proto3,enum=poker.RummyOprType" json:"opr_type,omitempty"` // 操作类型
	Groups        []*RummyCardGroup      `protobuf:"bytes,7,rep,name=groups,proto3" json:"groups,omitempty"`                                           // 牌组合
	GroupsScore   int64                  `protobuf:"varint,8,opt,name=groups_score,json=groupsScore,proto3" json:"groups_score,omitempty"`             // 牌组分数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyOprCardRsp) Reset() {
	*x = RummyOprCardRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyOprCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyOprCardRsp) ProtoMessage() {}

func (x *RummyOprCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyOprCardRsp.ProtoReflect.Descriptor instead.
func (*RummyOprCardRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{28}
}

func (x *RummyOprCardRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyOprCardRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyOprCardRsp) GetOprCard() uint32 {
	if x != nil {
		return x.OprCard
	}
	return 0
}

func (x *RummyOprCardRsp) GetPlayStep() int32 {
	if x != nil {
		return x.PlayStep
	}
	return 0
}

func (x *RummyOprCardRsp) GetIsEat() bool {
	if x != nil {
		return x.IsEat
	}
	return false
}

func (x *RummyOprCardRsp) GetOprType() RummyOprType {
	if x != nil {
		return x.OprType
	}
	return RummyOprType_Rummy_OPR_TYPE_UNDEFINE
}

func (x *RummyOprCardRsp) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RummyOprCardRsp) GetGroupsScore() int64 {
	if x != nil {
		return x.GroupsScore
	}
	return 0
}

// RummyOprCardNtf 操作牌通知
type RummyOprCardNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                            // 桌子ID
	PlayerId      uint64                 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                      // 当前玩牌玩家id
	OprType       RummyOprType           `protobuf:"varint,3,opt,name=opr_type,json=oprType,proto3,enum=poker.RummyOprType" json:"opr_type,omitempty"` // 操作类型
	OprCard       uint32                 `protobuf:"varint,4,opt,name=opr_card,json=oprCard,proto3" json:"opr_card,omitempty"`                         // 出牌，结束牌，吃牌时！=0，抓牌，弃牌=0.
	ShowCard      uint32                 `protobuf:"varint,5,opt,name=show_card,json=showCard,proto3" json:"show_card,omitempty"`                      // 操作后的明牌： =0表示没有明牌。（比如第1张明牌，别吃后，就没有明牌了）
	ShowCard2     uint32                 `protobuf:"varint,7,opt,name=show_card2,json=showCard2,proto3" json:"show_card2,omitempty"`                   // 明牌2
	ScorePoll     int64                  `protobuf:"varint,8,opt,name=score_poll,json=scorePoll,proto3" json:"score_poll,omitempty"`                   // 奖池分数
	DrawCount     uint32                 `protobuf:"varint,9,opt,name=draw_count,json=drawCount,proto3" json:"draw_count,omitempty"`                   //可抽牌数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyOprCardNtf) Reset() {
	*x = RummyOprCardNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyOprCardNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyOprCardNtf) ProtoMessage() {}

func (x *RummyOprCardNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyOprCardNtf.ProtoReflect.Descriptor instead.
func (*RummyOprCardNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{29}
}

func (x *RummyOprCardNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyOprCardNtf) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyOprCardNtf) GetOprType() RummyOprType {
	if x != nil {
		return x.OprType
	}
	return RummyOprType_Rummy_OPR_TYPE_UNDEFINE
}

func (x *RummyOprCardNtf) GetOprCard() uint32 {
	if x != nil {
		return x.OprCard
	}
	return 0
}

func (x *RummyOprCardNtf) GetShowCard() uint32 {
	if x != nil {
		return x.ShowCard
	}
	return 0
}

func (x *RummyOprCardNtf) GetShowCard2() uint32 {
	if x != nil {
		return x.ShowCard2
	}
	return 0
}

func (x *RummyOprCardNtf) GetScorePoll() int64 {
	if x != nil {
		return x.ScorePoll
	}
	return 0
}

func (x *RummyOprCardNtf) GetDrawCount() uint32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

// RummyFixCardReq 确定调整卡组请求，服务器对上报的牌组进行校验
type RummyFixCardReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`    // 桌子ID
	Groups        []*RummyCardGroup      `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`                   // 牌组合
	Score         int64                  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                    // 牌桌分数
	OprCard       uint32                 `protobuf:"varint,4,opt,name=opr_card,json=oprCard,proto3" json:"opr_card,omitempty"` // 确认牌打出卡牌 胡牌前必须打出
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyFixCardReq) Reset() {
	*x = RummyFixCardReq{}
	mi := &file_client_room_rummy_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyFixCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyFixCardReq) ProtoMessage() {}

func (x *RummyFixCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyFixCardReq.ProtoReflect.Descriptor instead.
func (*RummyFixCardReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{30}
}

func (x *RummyFixCardReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyFixCardReq) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RummyFixCardReq) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RummyFixCardReq) GetOprCard() uint32 {
	if x != nil {
		return x.OprCard
	}
	return 0
}

// RummyFixCardRsp 确定调整卡组响应
type RummyFixCardRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`     //请求结果信息
	Score         int64                  `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`  // 新卡组分数
	Groups        []*RummyCardGroup      `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"` // 牌组合
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyFixCardRsp) Reset() {
	*x = RummyFixCardRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyFixCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyFixCardRsp) ProtoMessage() {}

func (x *RummyFixCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyFixCardRsp.ProtoReflect.Descriptor instead.
func (*RummyFixCardRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{31}
}

func (x *RummyFixCardRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyFixCardRsp) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RummyFixCardRsp) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// RummyFixCardPlayersNtf 确认牌组玩家列表通知
type RummyFixCardPlayersNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                  // 房间ID
	TimeOut       int64                  `protobuf:"varint,2,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`               // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	Players       []uint64               `protobuf:"varint,4,rep,packed,name=players,proto3" json:"players,omitempty"`                       // 正在确认牌组的玩家列表
	WinId         uint64                 `protobuf:"varint,5,opt,name=win_id,json=winId,proto3" json:"win_id,omitempty"`                     // 赢家ID
	CurPlayerId   uint64                 `protobuf:"varint,7,opt,name=cur_player_id,json=curPlayerId,proto3" json:"cur_player_id,omitempty"` // 当前已确定玩家
	TotalTime     int64                  `protobuf:"varint,8,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyFixCardPlayersNtf) Reset() {
	*x = RummyFixCardPlayersNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyFixCardPlayersNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyFixCardPlayersNtf) ProtoMessage() {}

func (x *RummyFixCardPlayersNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyFixCardPlayersNtf.ProtoReflect.Descriptor instead.
func (*RummyFixCardPlayersNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{32}
}

func (x *RummyFixCardPlayersNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyFixCardPlayersNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummyFixCardPlayersNtf) GetPlayers() []uint64 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RummyFixCardPlayersNtf) GetWinId() uint64 {
	if x != nil {
		return x.WinId
	}
	return 0
}

func (x *RummyFixCardPlayersNtf) GetCurPlayerId() uint64 {
	if x != nil {
		return x.CurPlayerId
	}
	return 0
}

func (x *RummyFixCardPlayersNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

// RummySettleNtf 游戏结算通知
type RummySettleNtf struct {
	state         protoimpl.MessageState `xorm:"-"`   
	RoomId        uint64                   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // 桌子ID
	Players       []*RummySettlePlayerInfo `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`                       // 玩家手牌和结算账单
	TimeOut       int64                    `protobuf:"varint,3,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`       // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	Rake          int64                    `protobuf:"varint,4,opt,name=rake,proto3" json:"rake,omitempty"`                            // 抽水金额
	GhostCard     uint32                   `protobuf:"varint,5,opt,name=ghost_card,json=ghostCard,proto3" json:"ghost_card,omitempty"` // 癞子牌
	TotalTime     int64                    `protobuf:"varint,6,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleNtf) Reset() {
	*x = RummySettleNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleNtf) ProtoMessage() {}

func (x *RummySettleNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleNtf.ProtoReflect.Descriptor instead.
func (*RummySettleNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{33}
}

func (x *RummySettleNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummySettleNtf) GetPlayers() []*RummySettlePlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RummySettleNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummySettleNtf) GetRake() int64 {
	if x != nil {
		return x.Rake
	}
	return 0
}

func (x *RummySettleNtf) GetGhostCard() uint32 {
	if x != nil {
		return x.GhostCard
	}
	return 0
}

func (x *RummySettleNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

// RummyPlayerActionNtf 玩家行为通知
type RummyPlayerActionNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                // 桌子ID
	PlayerId      uint64                 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`          // 行为玩家ID
	Type          RummyPlayerActionType  `protobuf:"varint,3,opt,name=type,proto3,enum=poker.RummyPlayerActionType" json:"type,omitempty"` // 行为类型ID
	OprCard       uint32                 `protobuf:"varint,4,opt,name=opr_card,json=oprCard,proto3" json:"opr_card,omitempty"`             // 出牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyPlayerActionNtf) Reset() {
	*x = RummyPlayerActionNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyPlayerActionNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyPlayerActionNtf) ProtoMessage() {}

func (x *RummyPlayerActionNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyPlayerActionNtf.ProtoReflect.Descriptor instead.
func (*RummyPlayerActionNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{34}
}

func (x *RummyPlayerActionNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyPlayerActionNtf) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyPlayerActionNtf) GetType() RummyPlayerActionType {
	if x != nil {
		return x.Type
	}
	return RummyPlayerActionType_Rummy_PLAYER_ACTION_ONLINE
}

func (x *RummyPlayerActionNtf) GetOprCard() uint32 {
	if x != nil {
		return x.OprCard
	}
	return 0
}

// RummyGiveUpNtf 玩家投降通知
type RummyGiveUpNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`       // 桌子ID
	PlayerId      uint64                 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 行为玩家ID
	Score         int64                  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                       // 弃牌分数
	IsFinish      bool                   `protobuf:"varint,4,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"` // 是否是完成牌失败导致的弃牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGiveUpNtf) Reset() {
	*x = RummyGiveUpNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGiveUpNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGiveUpNtf) ProtoMessage() {}

func (x *RummyGiveUpNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGiveUpNtf.ProtoReflect.Descriptor instead.
func (*RummyGiveUpNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{35}
}

func (x *RummyGiveUpNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyGiveUpNtf) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyGiveUpNtf) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RummyGiveUpNtf) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

// RummySaveCardGroupReq 保存牌组请求 任意时候都可以保存手牌 但是在胡牌后只能最后一次调整并保存
type RummySaveCardGroupReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`    // 桌子ID
	Groups        []*RummyCardGroup      `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`                   // 牌组合
	LastReq       bool                   `protobuf:"varint,3,opt,name=last_req,json=lastReq,proto3" json:"last_req,omitempty"` // 最后确认
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySaveCardGroupReq) Reset() {
	*x = RummySaveCardGroupReq{}
	mi := &file_client_room_rummy_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySaveCardGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySaveCardGroupReq) ProtoMessage() {}

func (x *RummySaveCardGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySaveCardGroupReq.ProtoReflect.Descriptor instead.
func (*RummySaveCardGroupReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{36}
}

func (x *RummySaveCardGroupReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummySaveCardGroupReq) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RummySaveCardGroupReq) GetLastReq() bool {
	if x != nil {
		return x.LastReq
	}
	return false
}

// RummySaveCardGroupRsp 保存牌组响应
type RummySaveCardGroupRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                    //请求结果信息
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 桌子ID
	Score         int64                  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                 //手牌积分 在胡牌后确认阶段会变成负数
	Groups        []*RummyCardGroup      `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`                // 牌组合
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySaveCardGroupRsp) Reset() {
	*x = RummySaveCardGroupRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySaveCardGroupRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySaveCardGroupRsp) ProtoMessage() {}

func (x *RummySaveCardGroupRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySaveCardGroupRsp.ProtoReflect.Descriptor instead.
func (*RummySaveCardGroupRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{37}
}

func (x *RummySaveCardGroupRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummySaveCardGroupRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummySaveCardGroupRsp) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RummySaveCardGroupRsp) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// RummyGetScoreBoardReq 获取积分请求
type RummyGetScoreBoardReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 桌子ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGetScoreBoardReq) Reset() {
	*x = RummyGetScoreBoardReq{}
	mi := &file_client_room_rummy_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGetScoreBoardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGetScoreBoardReq) ProtoMessage() {}

func (x *RummyGetScoreBoardReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGetScoreBoardReq.ProtoReflect.Descriptor instead.
func (*RummyGetScoreBoardReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{38}
}

func (x *RummyGetScoreBoardReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// RummyGetScoreBoardRsp 获取积分响应
type RummyGetScoreBoardRsp struct {
	state         protoimpl.MessageState `xorm:"-"`   
	Head          *RspHead                 `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                             // 请求结果信息
	RoomId        uint64                   `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // 桌子ID
	Players       []*RummyScoreBoardPlayer `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`                       // 玩家列表
	Rounds        []*RummyRoundSettle      `protobuf:"bytes,4,rep,name=rounds,proto3" json:"rounds,omitempty"`                         // 每局结算
	InitScore     int64                    `protobuf:"varint,5,opt,name=init_score,json=initScore,proto3" json:"init_score,omitempty"` // 初始积分(deals)
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGetScoreBoardRsp) Reset() {
	*x = RummyGetScoreBoardRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGetScoreBoardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGetScoreBoardRsp) ProtoMessage() {}

func (x *RummyGetScoreBoardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGetScoreBoardRsp.ProtoReflect.Descriptor instead.
func (*RummyGetScoreBoardRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{39}
}

func (x *RummyGetScoreBoardRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyGetScoreBoardRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyGetScoreBoardRsp) GetPlayers() []*RummyScoreBoardPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RummyGetScoreBoardRsp) GetRounds() []*RummyRoundSettle {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *RummyGetScoreBoardRsp) GetInitScore() int64 {
	if x != nil {
		return x.InitScore
	}
	return 0
}

// RummyGetLastSettleReq 获取上局结算请求
type RummyGetLastSettleReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 桌子ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGetLastSettleReq) Reset() {
	*x = RummyGetLastSettleReq{}
	mi := &file_client_room_rummy_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGetLastSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGetLastSettleReq) ProtoMessage() {}

func (x *RummyGetLastSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGetLastSettleReq.ProtoReflect.Descriptor instead.
func (*RummyGetLastSettleReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{40}
}

func (x *RummyGetLastSettleReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// RummyGetScoreBoardRsp 获取上局结算响应
type RummyGetLastSettleRsp struct {
	state         protoimpl.MessageState `xorm:"-"`   
	Head          *RspHead                 `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                             // 请求结果信息
	RoomId        uint64                   `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // 桌子ID
	Players       []*RummySettlePlayerInfo `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`                       // 玩家手牌和结算账单
	GhostCard     uint32                   `protobuf:"varint,4,opt,name=ghost_card,json=ghostCard,proto3" json:"ghost_card,omitempty"` // 癞子牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGetLastSettleRsp) Reset() {
	*x = RummyGetLastSettleRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGetLastSettleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGetLastSettleRsp) ProtoMessage() {}

func (x *RummyGetLastSettleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGetLastSettleRsp.ProtoReflect.Descriptor instead.
func (*RummyGetLastSettleRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{41}
}

func (x *RummyGetLastSettleRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyGetLastSettleRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyGetLastSettleRsp) GetPlayers() []*RummySettlePlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RummyGetLastSettleRsp) GetGhostCard() uint32 {
	if x != nil {
		return x.GhostCard
	}
	return 0
}

// RummyPauseDeskMsgReq 暂停桌子消息请求
type RummyPauseDeskMsgReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 桌子ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyPauseDeskMsgReq) Reset() {
	*x = RummyPauseDeskMsgReq{}
	mi := &file_client_room_rummy_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyPauseDeskMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyPauseDeskMsgReq) ProtoMessage() {}

func (x *RummyPauseDeskMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyPauseDeskMsgReq.ProtoReflect.Descriptor instead.
func (*RummyPauseDeskMsgReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{42}
}

func (x *RummyPauseDeskMsgReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// RummyStopDeskMsgRsp 暂停桌子消息响应
type RummyPauseDeskMsgRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                    // 请求结果信息
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 桌子ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyPauseDeskMsgRsp) Reset() {
	*x = RummyPauseDeskMsgRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyPauseDeskMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyPauseDeskMsgRsp) ProtoMessage() {}

func (x *RummyPauseDeskMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyPauseDeskMsgRsp.ProtoReflect.Descriptor instead.
func (*RummyPauseDeskMsgRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{43}
}

func (x *RummyPauseDeskMsgRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyPauseDeskMsgRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// PlayerOutCards
type PlayerOutCards struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PlayerId      uint64                 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 玩家
	NickName      string                 `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`  // 玩家昵称
	Cards         []uint32               `protobuf:"varint,3,rep,packed,name=cards,proto3" json:"cards,omitempty"`                // 出牌列表
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *PlayerOutCards) Reset() {
	*x = PlayerOutCards{}
	mi := &file_client_room_rummy_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerOutCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOutCards) ProtoMessage() {}

func (x *PlayerOutCards) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOutCards.ProtoReflect.Descriptor instead.
func (*PlayerOutCards) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{44}
}

func (x *PlayerOutCards) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerOutCards) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *PlayerOutCards) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// RummyGetOutCardsReq 获取出牌列表请求
type RummyGetOutCardsReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 进入的桌子ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGetOutCardsReq) Reset() {
	*x = RummyGetOutCardsReq{}
	mi := &file_client_room_rummy_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGetOutCardsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGetOutCardsReq) ProtoMessage() {}

func (x *RummyGetOutCardsReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGetOutCardsReq.ProtoReflect.Descriptor instead.
func (*RummyGetOutCardsReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{45}
}

func (x *RummyGetOutCardsReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// RummyGetOutCardsRsp 获取出牌列表请求响应
type RummyGetOutCardsRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                                 //请求结果信息
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`              // 进入的桌子ID
	OutCards      []uint32               `protobuf:"varint,3,rep,packed,name=out_cards,json=outCards,proto3" json:"out_cards,omitempty"` // 出牌列表
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGetOutCardsRsp) Reset() {
	*x = RummyGetOutCardsRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGetOutCardsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGetOutCardsRsp) ProtoMessage() {}

func (x *RummyGetOutCardsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGetOutCardsRsp.ProtoReflect.Descriptor instead.
func (*RummyGetOutCardsRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{46}
}

func (x *RummyGetOutCardsRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyGetOutCardsRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyGetOutCardsRsp) GetOutCards() []uint32 {
	if x != nil {
		return x.OutCards
	}
	return nil
}

type RummyReadyRoomReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 桌子ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyReadyRoomReq) Reset() {
	*x = RummyReadyRoomReq{}
	mi := &file_client_room_rummy_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyReadyRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyReadyRoomReq) ProtoMessage() {}

func (x *RummyReadyRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyReadyRoomReq.ProtoReflect.Descriptor instead.
func (*RummyReadyRoomReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{47}
}

func (x *RummyReadyRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type RummyReadyRoomRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                         //请求结果信息
	Stage         GameState              `protobuf:"varint,2,opt,name=stage,proto3,enum=poker.GameState" json:"stage,omitempty"` //当前游戏阶段
	RoomInfo      *RummyRoomPubData      `protobuf:"bytes,3,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"` // 返回桌子信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyReadyRoomRsp) Reset() {
	*x = RummyReadyRoomRsp{}
	mi := &file_client_room_rummy_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyReadyRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyReadyRoomRsp) ProtoMessage() {}

func (x *RummyReadyRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyReadyRoomRsp.ProtoReflect.Descriptor instead.
func (*RummyReadyRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{48}
}

func (x *RummyReadyRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyReadyRoomRsp) GetStage() GameState {
	if x != nil {
		return x.Stage
	}
	return GameState_TEXAS_INIT
}

func (x *RummyReadyRoomRsp) GetRoomInfo() *RummyRoomPubData {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

// RummyReadyRoomNtf 准备通知
type RummyReadyRoomNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`              // 房间ID
	PlayerId      []uint64               `protobuf:"varint,2,rep,packed,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` //就绪玩家id
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyReadyRoomNtf) Reset() {
	*x = RummyReadyRoomNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyReadyRoomNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyReadyRoomNtf) ProtoMessage() {}

func (x *RummyReadyRoomNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyReadyRoomNtf.ProtoReflect.Descriptor instead.
func (*RummyReadyRoomNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{49}
}

func (x *RummyReadyRoomNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyReadyRoomNtf) GetPlayerId() []uint64 {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

// RummyShuffleNtf 暗牌堆摸空触发洗牌
type RummyShuffleNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // 房间ID
	DrawCount     uint32                 `protobuf:"varint,2,opt,name=draw_count,json=drawCount,proto3" json:"draw_count,omitempty"` // 剩余牌数
	ShowCard      uint32                 `protobuf:"varint,3,opt,name=show_card,json=showCard,proto3" json:"show_card,omitempty"`    // 最后一张明牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyShuffleNtf) Reset() {
	*x = RummyShuffleNtf{}
	mi := &file_client_room_rummy_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyShuffleNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyShuffleNtf) ProtoMessage() {}

func (x *RummyShuffleNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyShuffleNtf.ProtoReflect.Descriptor instead.
func (*RummyShuffleNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_proto_rawDescGZIP(), []int{50}
}

func (x *RummyShuffleNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyShuffleNtf) GetDrawCount() uint32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

func (x *RummyShuffleNtf) GetShowCard() uint32 {
	if x != nil {
		return x.ShowCard
	}
	return 0
}

var File_client_room_rummy_proto protoreflect.FileDescriptor

var file_client_room_rummy_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x75,
	0x6d, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x1a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5a, 0x68, 0x75, 0x61,
	0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2b,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x43, 0x61, 0x73, 0x68, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x43, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x70, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69,
	0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x49, 0x63,
	0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x59, 0x0a, 0x10,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55,
	0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x75, 0x6d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x66,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x66, 0x67, 0x12, 0x2d,
	0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x66, 0x67, 0x12, 0x2d, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x02, 0x0a,
	0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x66, 0x67, 0x22, 0x3f, 0x0a, 0x0c,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0xad, 0x05,
	0x0a, 0x0b, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x68, 0x75, 0x61,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x7a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x78, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x70, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65, 0x61, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x38, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x02,
	0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x63,
	0x75, 0x72, 0x5f, 0x6f, 0x70, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x4f, 0x70, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x72, 0x5f, 0x63, 0x75,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x72, 0x43,
	0x75, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76,
	0x4f, 0x75, 0x74, 0x55, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x61, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0xdb, 0x01, 0x0a,
	0x12, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x75, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x62, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x47, 0x72, 0x61,
	0x62, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x0a, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x75, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x59, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x11, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x4e, 0x74, 0x66,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x10, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x51, 0x75, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x51, 0x75, 0x69, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x51, 0x75, 0x69,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x16, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x66, 0x0a, 0x11, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4e, 0x74, 0x66, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x7a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x02,
	0x0a, 0x0c, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x74, 0x66, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x68, 0x6f, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x32, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd5, 0x01,
	0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x65, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x43, 0x68, 0x69, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x76, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x61, 0x76, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f,
	0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x70, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x4f, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x9f, 0x02, 0x0a,
	0x0f, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x70, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6f, 0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x65, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x6f, 0x70, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8c,
	0x02, 0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x70, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6f, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x72, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x32, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01,
	0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x46, 0x69, 0x78, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x22, 0x7a, 0x0a, 0x0f, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x46, 0x69, 0x78, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x46, 0x69, 0x78, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x74,
	0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x77, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6b, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x70, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x22, 0x79, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47,
	0x69, 0x76, 0x65, 0x55, 0x70, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x22, 0x7a, 0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x99, 0x01,
	0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x30, 0x0a, 0x15, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x15,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x30, 0x0a, 0x15, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a,
	0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22, 0x2f, 0x0a, 0x14, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x4d, 0x73, 0x67,
	0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0x60, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x2e, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x11, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a, 0x11, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x74, 0x66, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x2a, 0xc0, 0x01, 0x0a,
	0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x55, 0x50, 0x10, 0x04, 0x2a,
	0xce, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x55, 0x50,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x06,
	0x2a, 0x69, 0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x51,
	0x55, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4b,
	0x49, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x2a, 0xdf, 0x01, 0x0a, 0x0c,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4f, 0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x5f, 0x4f, 0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4f, 0x50, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x5f, 0x4f, 0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x56,
	0x45, 0x55, 0x50, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4f,
	0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4f, 0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x49, 0x58, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4f,
	0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4f, 0x50,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x07, 0x2a, 0x9c, 0x01,
	0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x45, 0x51, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x51,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x0e,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x10, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_client_room_rummy_proto_rawDescOnce sync.Once
	file_client_room_rummy_proto_rawDescData []byte
)

func file_client_room_rummy_proto_rawDescGZIP() []byte {
	file_client_room_rummy_proto_rawDescOnce.Do(func() {
		file_client_room_rummy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_room_rummy_proto_rawDesc), len(file_client_room_rummy_proto_rawDesc)))
	})
	return file_client_room_rummy_proto_rawDescData
}

var file_client_room_rummy_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_client_room_rummy_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_client_room_rummy_proto_goTypes = []any{
	(RummyPlayerActionType)(0),     // 0: poker.RummyPlayerActionType
	(RummyPlayState)(0),            // 1: poker.RummyPlayState
	(RummyPlayHealth)(0),           // 2: poker.RummyPlayHealth
	(RummyOprType)(0),              // 3: poker.RummyOprType
	(RummyGroupType)(0),            // 4: poker.RummyGroupType
	(RummyLeaveType)(0),            // 5: poker.RummyLeaveType
	(*RummyCardGroup)(nil),         // 6: poker.RummyCardGroup
	(*RummyZhuangCard)(nil),        // 7: poker.RummyZhuangCard
	(*RummySettlePlayerInfo)(nil),  // 8: poker.RummySettlePlayerInfo
	(*RummyTotalSettlePlayer)(nil), // 9: poker.RummyTotalSettlePlayer
	(*RummyScoreBoardPlayer)(nil),  // 10: poker.RummyScoreBoardPlayer
	(*RummyPlayerScore)(nil),       // 11: poker.RummyPlayerScore
	(*RummyRoundSettle)(nil),       // 12: poker.RummyRoundSettle
	(*RummyRoomPlayer)(nil),        // 13: poker.RummyRoomPlayer
	(*RummyRoomData)(nil),          // 14: poker.RummyRoomData
	(*RummyRoomPubData)(nil),       // 15: poker.RummyRoomPubData
	(*RummyPrivate)(nil),           // 16: poker.RummyPrivate
	(*RummyCommon)(nil),            // 17: poker.RummyCommon
	(*RummyOprPlayer)(nil),         // 18: poker.RummyOprPlayer
	(*RummyPlayerRumtime)(nil),     // 19: poker.RummyPlayerRumtime
	(*MatchParam)(nil),             // 20: poker.MatchParam
	(*RummyJoinRoomReq)(nil),       // 21: poker.RummyJoinRoomReq
	(*RummyJoinRoomRsp)(nil),       // 22: poker.RummyJoinRoomRsp
	(*RummyEventNotify)(nil),       // 23: poker.RummyEventNotify
	(*RummyEnterDeskNtf)(nil),      // 24: poker.RummyEnterDeskNtf
	(*RummyQuitRoomReq)(nil),       // 25: poker.RummyQuitRoomReq
	(*RummyQuitRoomRsp)(nil),       // 26: poker.RummyQuitRoomRsp
	(*RummyQuitRoomNtf)(nil),       // 27: poker.RummyQuitRoomNtf
	(*RummyReadyStartGameNtf)(nil), // 28: poker.RummyReadyStartGameNtf
	(*RummyStartGameNtf)(nil),      // 29: poker.RummyStartGameNtf
	(*RummySetZhuangNtf)(nil),      // 30: poker.RummySetZhuangNtf
	(*RummyDealNtf)(nil),           // 31: poker.RummyDealNtf
	(*RummyPlayCardNtf)(nil),       // 32: poker.RummyPlayCardNtf
	(*RummyOprCardReq)(nil),        // 33: poker.RummyOprCardReq
	(*RummyOprCardRsp)(nil),        // 34: poker.RummyOprCardRsp
	(*RummyOprCardNtf)(nil),        // 35: poker.RummyOprCardNtf
	(*RummyFixCardReq)(nil),        // 36: poker.RummyFixCardReq
	(*RummyFixCardRsp)(nil),        // 37: poker.RummyFixCardRsp
	(*RummyFixCardPlayersNtf)(nil), // 38: poker.RummyFixCardPlayersNtf
	(*RummySettleNtf)(nil),         // 39: poker.RummySettleNtf
	(*RummyPlayerActionNtf)(nil),   // 40: poker.RummyPlayerActionNtf
	(*RummyGiveUpNtf)(nil),         // 41: poker.RummyGiveUpNtf
	(*RummySaveCardGroupReq)(nil),  // 42: poker.RummySaveCardGroupReq
	(*RummySaveCardGroupRsp)(nil),  // 43: poker.RummySaveCardGroupRsp
	(*RummyGetScoreBoardReq)(nil),  // 44: poker.RummyGetScoreBoardReq
	(*RummyGetScoreBoardRsp)(nil),  // 45: poker.RummyGetScoreBoardRsp
	(*RummyGetLastSettleReq)(nil),  // 46: poker.RummyGetLastSettleReq
	(*RummyGetLastSettleRsp)(nil),  // 47: poker.RummyGetLastSettleRsp
	(*RummyPauseDeskMsgReq)(nil),   // 48: poker.RummyPauseDeskMsgReq
	(*RummyPauseDeskMsgRsp)(nil),   // 49: poker.RummyPauseDeskMsgRsp
	(*PlayerOutCards)(nil),         // 50: poker.PlayerOutCards
	(*RummyGetOutCardsReq)(nil),    // 51: poker.RummyGetOutCardsReq
	(*RummyGetOutCardsRsp)(nil),    // 52: poker.RummyGetOutCardsRsp
	(*RummyReadyRoomReq)(nil),      // 53: poker.RummyReadyRoomReq
	(*RummyReadyRoomRsp)(nil),      // 54: poker.RummyReadyRoomRsp
	(*RummyReadyRoomNtf)(nil),      // 55: poker.RummyReadyRoomNtf
	(*RummyShuffleNtf)(nil),        // 56: poker.RummyShuffleNtf
	nil,                            // 57: poker.RummyCommon.SeatsEntry
	nil,                            // 58: poker.RummyCommon.PlayersEntry
	(GameState)(0),                 // 59: poker.GameState
	(*RummyMachineConfig)(nil),     // 60: poker.RummyMachineConfig
	(*RummyConfig)(nil),            // 61: poker.RummyConfig
	(RummyRoundStep)(0),            // 62: poker.RummyRoundStep
	(*PlayerInfo)(nil),             // 63: poker.PlayerInfo
	(*RspHead)(nil),                // 64: poker.RspHead
	(RummyEventType)(0),            // 65: poker.RummyEventType
}
var file_client_room_rummy_proto_depIdxs = []int32{
	4,  // 0: poker.RummyCardGroup.group_type:type_name -> poker.RummyGroupType
	6,  // 1: poker.RummySettlePlayerInfo.card_group:type_name -> poker.RummyCardGroup
	1,  // 2: poker.RummySettlePlayerInfo.state:type_name -> poker.RummyPlayState
	1,  // 3: poker.RummyTotalSettlePlayer.state:type_name -> poker.RummyPlayState
	11, // 4: poker.RummyRoundSettle.scores:type_name -> poker.RummyPlayerScore
	1,  // 5: poker.RummyRoomPlayer.state:type_name -> poker.RummyPlayState
	2,  // 6: poker.RummyRoomPlayer.health:type_name -> poker.RummyPlayHealth
	19, // 7: poker.RummyRoomPlayer.private:type_name -> poker.RummyPlayerRumtime
	59, // 8: poker.RummyRoomData.stage:type_name -> poker.GameState
	17, // 9: poker.RummyRoomData.common:type_name -> poker.RummyCommon
	20, // 10: poker.RummyRoomData.match:type_name -> poker.MatchParam
	60, // 11: poker.RummyRoomData.machine_cfg:type_name -> poker.RummyMachineConfig
	61, // 12: poker.RummyRoomData.room_cfg:type_name -> poker.RummyConfig
	16, // 13: poker.RummyRoomData.private:type_name -> poker.RummyPrivate
	59, // 14: poker.RummyRoomPubData.stage:type_name -> poker.GameState
	17, // 15: poker.RummyRoomPubData.common:type_name -> poker.RummyCommon
	20, // 16: poker.RummyRoomPubData.match:type_name -> poker.MatchParam
	61, // 17: poker.RummyRoomPubData.room_cfg:type_name -> poker.RummyConfig
	57, // 18: poker.RummyCommon.seats:type_name -> poker.RummyCommon.SeatsEntry
	58, // 19: poker.RummyCommon.players:type_name -> poker.RummyCommon.PlayersEntry
	18, // 20: poker.RummyCommon.opr_player:type_name -> poker.RummyOprPlayer
	62, // 21: poker.RummyOprPlayer.step:type_name -> poker.RummyRoundStep
	6,  // 22: poker.RummyPlayerRumtime.card_group:type_name -> poker.RummyCardGroup
	63, // 23: poker.RummyJoinRoomReq.player_info:type_name -> poker.PlayerInfo
	64, // 24: poker.RummyJoinRoomRsp.head:type_name -> poker.RspHead
	15, // 25: poker.RummyJoinRoomRsp.room_info:type_name -> poker.RummyRoomPubData
	65, // 26: poker.RummyEventNotify.Event:type_name -> poker.RummyEventType
	13, // 27: poker.RummyEnterDeskNtf.player:type_name -> poker.RummyRoomPlayer
	64, // 28: poker.RummyQuitRoomRsp.head:type_name -> poker.RspHead
	5,  // 29: poker.RummyQuitRoomNtf.leave_type:type_name -> poker.RummyLeaveType
	7,  // 30: poker.RummySetZhuangNtf.cards:type_name -> poker.RummyZhuangCard
	6,  // 31: poker.RummyDealNtf.groups:type_name -> poker.RummyCardGroup
	3,  // 32: poker.RummyOprCardReq.opr_type:type_name -> poker.RummyOprType
	6,  // 33: poker.RummyOprCardReq.groups:type_name -> poker.RummyCardGroup
	64, // 34: poker.RummyOprCardRsp.head:type_name -> poker.RspHead
	3,  // 35: poker.RummyOprCardRsp.opr_type:type_name -> poker.RummyOprType
	6,  // 36: poker.RummyOprCardRsp.groups:type_name -> poker.RummyCardGroup
	3,  // 37: poker.RummyOprCardNtf.opr_type:type_name -> poker.RummyOprType
	6,  // 38: poker.RummyFixCardReq.groups:type_name -> poker.RummyCardGroup
	64, // 39: poker.RummyFixCardRsp.head:type_name -> poker.RspHead
	6,  // 40: poker.RummyFixCardRsp.groups:type_name -> poker.RummyCardGroup
	8,  // 41: poker.RummySettleNtf.players:type_name -> poker.RummySettlePlayerInfo
	0,  // 42: poker.RummyPlayerActionNtf.type:type_name -> poker.RummyPlayerActionType
	6,  // 43: poker.RummySaveCardGroupReq.groups:type_name -> poker.RummyCardGroup
	64, // 44: poker.RummySaveCardGroupRsp.head:type_name -> poker.RspHead
	6,  // 45: poker.RummySaveCardGroupRsp.groups:type_name -> poker.RummyCardGroup
	64, // 46: poker.RummyGetScoreBoardRsp.head:type_name -> poker.RspHead
	10, // 47: poker.RummyGetScoreBoardRsp.players:type_name -> poker.RummyScoreBoardPlayer
	12, // 48: poker.RummyGetScoreBoardRsp.rounds:type_name -> poker.RummyRoundSettle
	64, // 49: poker.RummyGetLastSettleRsp.head:type_name -> poker.RspHead
	8,  // 50: poker.RummyGetLastSettleRsp.players:type_name -> poker.RummySettlePlayerInfo
	64, // 51: poker.RummyPauseDeskMsgRsp.head:type_name -> poker.RspHead
	64, // 52: poker.RummyGetOutCardsRsp.head:type_name -> poker.RspHead
	64, // 53: poker.RummyReadyRoomRsp.head:type_name -> poker.RspHead
	59, // 54: poker.RummyReadyRoomRsp.stage:type_name -> poker.GameState
	15, // 55: poker.RummyReadyRoomRsp.room_info:type_name -> poker.RummyRoomPubData
	13, // 56: poker.RummyCommon.PlayersEntry.value:type_name -> poker.RummyRoomPlayer
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_client_room_rummy_proto_init() }
func file_client_room_rummy_proto_init() {
	if File_client_room_rummy_proto != nil {
		return
	}
	file_packet_proto_init()
	file_table_cfg_proto_init()
	file_global_enum_proto_init()
	file_player_data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_room_rummy_proto_rawDesc), len(file_client_room_rummy_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_room_rummy_proto_goTypes,
		DependencyIndexes: file_client_room_rummy_proto_depIdxs,
		EnumInfos:         file_client_room_rummy_proto_enumTypes,
		MessageInfos:      file_client_room_rummy_proto_msgTypes,
	}.Build()
	File_client_room_rummy_proto = out.File
	file_client_room_rummy_proto_goTypes = nil
	file_client_room_rummy_proto_depIdxs = nil
}
