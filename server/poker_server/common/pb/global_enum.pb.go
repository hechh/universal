// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: global_enum.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 作为db服务唯一的IdType
type DataType int32

const (
	DataType_DataTypeDataTypeNone DataType = 0 // 数据类型-无
	DataType_DataTypeGenerator    DataType = 1 // 数据类型-Generator
	DataType_DataTypeTexasRoom    DataType = 2 // 数据类型-TexasRoom
	DataType_DataTypeRummyRoom    DataType = 3 // 数据类型-RummyRoom
	DataType_DataTypePlayerData   DataType = 4 // 数据类型-PlayerData
	DataType_DataTypeRummySettle  DataType = 5 // 数据类型-RummySettle
	DataType_DataTypeRummyMatch   DataType = 6 // 数据类型-RummyMatch
	DataType_DataTypeReport       DataType = 7 // 数据类型-数据上报
	DataType_DataTypeUserInfo     DataType = 8 // 数据类型-玩家信息缓存
	DataType_DataTypeSngRoom      DataType = 9 // 数据类型-SngRoom
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DataTypeDataTypeNone",
		1: "DataTypeGenerator",
		2: "DataTypeTexasRoom",
		3: "DataTypeRummyRoom",
		4: "DataTypePlayerData",
		5: "DataTypeRummySettle",
		6: "DataTypeRummyMatch",
		7: "DataTypeReport",
		8: "DataTypeUserInfo",
		9: "DataTypeSngRoom",
	}
	DataType_value = map[string]int32{
		"DataTypeDataTypeNone": 0,
		"DataTypeGenerator":    1,
		"DataTypeTexasRoom":    2,
		"DataTypeRummyRoom":    3,
		"DataTypePlayerData":   4,
		"DataTypeRummySettle":  5,
		"DataTypeRummyMatch":   6,
		"DataTypeReport":       7,
		"DataTypeUserInfo":     8,
		"DataTypeSngRoom":      9,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{0}
}

// 作为builder服务唯一的IdType
type GeneratorType int32

const (
	GeneratorType_GeneratorTypeBegin GeneratorType = 0 // 生成器类型-begin
	GeneratorType_GeneratorTypeTexas GeneratorType = 1 // 生成器类型-Texas
	GeneratorType_GeneratorTypeRummy GeneratorType = 2 // 生成器类型-Rummy
	GeneratorType_GeneratorTypeSng   GeneratorType = 3 // 生成器类型-Sng
	GeneratorType_GeneratorTypeEnd   GeneratorType = 4 // 生成器类型-end
)

// Enum value maps for GeneratorType.
var (
	GeneratorType_name = map[int32]string{
		0: "GeneratorTypeBegin",
		1: "GeneratorTypeTexas",
		2: "GeneratorTypeRummy",
		3: "GeneratorTypeSng",
		4: "GeneratorTypeEnd",
	}
	GeneratorType_value = map[string]int32{
		"GeneratorTypeBegin": 0,
		"GeneratorTypeTexas": 1,
		"GeneratorTypeRummy": 2,
		"GeneratorTypeSng":   3,
		"GeneratorTypeEnd":   4,
	}
)

func (x GeneratorType) Enum() *GeneratorType {
	p := new(GeneratorType)
	*p = x
	return p
}

func (x GeneratorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneratorType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[1].Descriptor()
}

func (GeneratorType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[1]
}

func (x GeneratorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneratorType.Descriptor instead.
func (GeneratorType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{1}
}

// 游戏状态
type GameState int32

const (
	GameState_TEXAS_INIT              GameState = 0   // 初始化状态
	GameState_TEXAS_START             GameState = 1   // 游戏开始阶段（包含底注和发底牌）
	GameState_TEXAS_PRE_FLOP          GameState = 2   // 底牌前下注轮（Pre-Flop）
	GameState_TEXAS_FLOP_ROUND        GameState = 3   // 翻牌圈（三张公共牌）
	GameState_TEXAS_TURN_ROUND        GameState = 4   // 转牌圈（第四张公共牌）
	GameState_TEXAS_RIVER_ROUND       GameState = 5   // 河牌圈（第五张公共牌）
	GameState_TEXAS_END               GameState = 6   // 结算阶段
	GameState_SNG_TEXAS_INIT          GameState = 10  // 初始化状态
	GameState_SNG_TEXAS_START         GameState = 11  // 游戏开始阶段（包含底注和发底牌）
	GameState_SNG_TEXAS_PRE_FLOP      GameState = 12  // 底牌前下注轮（Pre-Flop）
	GameState_SNG_TEXAS_FLOP_ROUND    GameState = 13  // 翻牌圈（三张公共牌）
	GameState_SNG_TEXAS_TURN_ROUND    GameState = 14  // 转牌圈（第四张公共牌）
	GameState_SNG_TEXAS_RIVER_ROUND   GameState = 15  // 河牌圈（第五张公共牌）
	GameState_SNG_TEXAS_END           GameState = 16  // 结算阶段
	GameState_SNG_TEXAS_END_FINISH    GameState = 100 // 德州分界线
	GameState_Rummy_STAGE_INIT        GameState = 101 // rummy游戏状态
	GameState_Rummy_STAGE_READY_START GameState = 102 // 倒计时开始阶段（人满了）
	GameState_Rummy_STAGE_START       GameState = 103 // 开始游戏
	GameState_Rummy_STAGE_ZHUANG      GameState = 104 // 定庄
	GameState_Rummy_STAGE_DEAL        GameState = 105 // 发手牌
	GameState_Rummy_STAGE_PLAYING     GameState = 106 // 玩牌
	GameState_Rummy_STAGE_SHUFFLE     GameState = 107 // 洗牌
	GameState_Rummy_STAGE_FIX_CARD    GameState = 108 // 确认牌组阶段
	GameState_Rummy_STAGE_SETTLE      GameState = 109 // 结算阶段
	GameState_Rummy_STAGE_OVER        GameState = 110 // rummy游戏结束
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0:   "TEXAS_INIT",
		1:   "TEXAS_START",
		2:   "TEXAS_PRE_FLOP",
		3:   "TEXAS_FLOP_ROUND",
		4:   "TEXAS_TURN_ROUND",
		5:   "TEXAS_RIVER_ROUND",
		6:   "TEXAS_END",
		10:  "SNG_TEXAS_INIT",
		11:  "SNG_TEXAS_START",
		12:  "SNG_TEXAS_PRE_FLOP",
		13:  "SNG_TEXAS_FLOP_ROUND",
		14:  "SNG_TEXAS_TURN_ROUND",
		15:  "SNG_TEXAS_RIVER_ROUND",
		16:  "SNG_TEXAS_END",
		100: "SNG_TEXAS_END_FINISH",
		101: "Rummy_STAGE_INIT",
		102: "Rummy_STAGE_READY_START",
		103: "Rummy_STAGE_START",
		104: "Rummy_STAGE_ZHUANG",
		105: "Rummy_STAGE_DEAL",
		106: "Rummy_STAGE_PLAYING",
		107: "Rummy_STAGE_SHUFFLE",
		108: "Rummy_STAGE_FIX_CARD",
		109: "Rummy_STAGE_SETTLE",
		110: "Rummy_STAGE_OVER",
	}
	GameState_value = map[string]int32{
		"TEXAS_INIT":              0,
		"TEXAS_START":             1,
		"TEXAS_PRE_FLOP":          2,
		"TEXAS_FLOP_ROUND":        3,
		"TEXAS_TURN_ROUND":        4,
		"TEXAS_RIVER_ROUND":       5,
		"TEXAS_END":               6,
		"SNG_TEXAS_INIT":          10,
		"SNG_TEXAS_START":         11,
		"SNG_TEXAS_PRE_FLOP":      12,
		"SNG_TEXAS_FLOP_ROUND":    13,
		"SNG_TEXAS_TURN_ROUND":    14,
		"SNG_TEXAS_RIVER_ROUND":   15,
		"SNG_TEXAS_END":           16,
		"SNG_TEXAS_END_FINISH":    100,
		"Rummy_STAGE_INIT":        101,
		"Rummy_STAGE_READY_START": 102,
		"Rummy_STAGE_START":       103,
		"Rummy_STAGE_ZHUANG":      104,
		"Rummy_STAGE_DEAL":        105,
		"Rummy_STAGE_PLAYING":     106,
		"Rummy_STAGE_SHUFFLE":     107,
		"Rummy_STAGE_FIX_CARD":    108,
		"Rummy_STAGE_SETTLE":      109,
		"Rummy_STAGE_OVER":        110,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[2].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[2]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{2}
}

// 房间状态
type RoomStatus int32

const (
	RoomStatus_RoomStatusNone     RoomStatus = 0 // 房间状态-无
	RoomStatus_RoomStatusWait     RoomStatus = 1 // 房间状态-等待开始
	RoomStatus_RoomStatusPlaying  RoomStatus = 2 // 房间状态-比赛中
	RoomStatus_RoomStatusFinished RoomStatus = 3 // 房间状态-已结束
	RoomStatus_RoomStatusPause    RoomStatus = 4 // 房间状态-暂停
)

// Enum value maps for RoomStatus.
var (
	RoomStatus_name = map[int32]string{
		0: "RoomStatusNone",
		1: "RoomStatusWait",
		2: "RoomStatusPlaying",
		3: "RoomStatusFinished",
		4: "RoomStatusPause",
	}
	RoomStatus_value = map[string]int32{
		"RoomStatusNone":     0,
		"RoomStatusWait":     1,
		"RoomStatusPlaying":  2,
		"RoomStatusFinished": 3,
		"RoomStatusPause":    4,
	}
)

func (x RoomStatus) Enum() *RoomStatus {
	p := new(RoomStatus)
	*p = x
	return p
}

func (x RoomStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[3].Descriptor()
}

func (RoomStatus) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[3]
}

func (x RoomStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomStatus.Descriptor instead.
func (RoomStatus) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{3}
}

// 玩家状态
type PlayerStatus int32

const (
	PlayerStatus_PlayerStatusNone     PlayerStatus = 0 // 玩家状态-无
	PlayerStatus_PlayerStatusJoinRoom PlayerStatus = 1 // 玩家状态-加入游戏
	PlayerStatus_PlayerStatusJoinGame PlayerStatus = 2 // 玩家状态-加入游戏
	PlayerStatus_PlayerStatusQuitGame PlayerStatus = 3 // 玩家状态-退出游戏
	PlayerStatus_PlayerStatusQuitRoom PlayerStatus = 4 // 玩家状态-退出游戏
)

// Enum value maps for PlayerStatus.
var (
	PlayerStatus_name = map[int32]string{
		0: "PlayerStatusNone",
		1: "PlayerStatusJoinRoom",
		2: "PlayerStatusJoinGame",
		3: "PlayerStatusQuitGame",
		4: "PlayerStatusQuitRoom",
	}
	PlayerStatus_value = map[string]int32{
		"PlayerStatusNone":     0,
		"PlayerStatusJoinRoom": 1,
		"PlayerStatusJoinGame": 2,
		"PlayerStatusQuitGame": 3,
		"PlayerStatusQuitRoom": 4,
	}
)

func (x PlayerStatus) Enum() *PlayerStatus {
	p := new(PlayerStatus)
	*p = x
	return p
}

func (x PlayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[4].Descriptor()
}

func (PlayerStatus) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[4]
}

func (x PlayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatus.Descriptor instead.
func (PlayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{4}
}

// 扑克牌型(德州+rummy共用)
type CardType int32

const (
	CardType_CardTypeNode    CardType = 0  // 无效牌型
	CardType_HIGH_CARD       CardType = 1  // 高牌
	CardType_ONE_PAIR        CardType = 2  // 一对
	CardType_TWO_PAIR        CardType = 3  // 两对
	CardType_THREE_OF_A_KIND CardType = 4  // 三条
	CardType_STRAIGHT        CardType = 5  // 顺子
	CardType_FLUSH           CardType = 6  // 同花
	CardType_FULL_HOUSE      CardType = 7  // 葫芦
	CardType_FOUR_OF_A_KIND  CardType = 8  // 四条
	CardType_STRAIGHT_FLUSH  CardType = 9  // 同花顺
	CardType_ROYAL_FLUSH     CardType = 10 // 皇家同花顺
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0:  "CardTypeNode",
		1:  "HIGH_CARD",
		2:  "ONE_PAIR",
		3:  "TWO_PAIR",
		4:  "THREE_OF_A_KIND",
		5:  "STRAIGHT",
		6:  "FLUSH",
		7:  "FULL_HOUSE",
		8:  "FOUR_OF_A_KIND",
		9:  "STRAIGHT_FLUSH",
		10: "ROYAL_FLUSH",
	}
	CardType_value = map[string]int32{
		"CardTypeNode":    0,
		"HIGH_CARD":       1,
		"ONE_PAIR":        2,
		"TWO_PAIR":        3,
		"THREE_OF_A_KIND": 4,
		"STRAIGHT":        5,
		"FLUSH":           6,
		"FULL_HOUSE":      7,
		"FOUR_OF_A_KIND":  8,
		"STRAIGHT_FLUSH":  9,
		"ROYAL_FLUSH":     10,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[5].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[5]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{5}
}

// 操作类型
type OperateType int32

const (
	OperateType_OperateNone     OperateType = 0 // 无效操作
	OperateType_BET             OperateType = 1 // 下注
	OperateType_CALL            OperateType = 2 // 跟注
	OperateType_RAISE           OperateType = 3 // 加注
	OperateType_CHECK           OperateType = 4 // 过牌
	OperateType_FOLD            OperateType = 5 // 弃牌
	OperateType_ALL_IN          OperateType = 6 // 全下
	OperateType_BET_SMALL_BLIND OperateType = 7 // 下小盲
	OperateType_BET_BIG_BLIND   OperateType = 8 // 下大盲
)

// Enum value maps for OperateType.
var (
	OperateType_name = map[int32]string{
		0: "OperateNone",
		1: "BET",
		2: "CALL",
		3: "RAISE",
		4: "CHECK",
		5: "FOLD",
		6: "ALL_IN",
		7: "BET_SMALL_BLIND",
		8: "BET_BIG_BLIND",
	}
	OperateType_value = map[string]int32{
		"OperateNone":     0,
		"BET":             1,
		"CALL":            2,
		"RAISE":           3,
		"CHECK":           4,
		"FOLD":            5,
		"ALL_IN":          6,
		"BET_SMALL_BLIND": 7,
		"BET_BIG_BLIND":   8,
	}
)

func (x OperateType) Enum() *OperateType {
	p := new(OperateType)
	*p = x
	return p
}

func (x OperateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperateType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[6].Descriptor()
}

func (OperateType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[6]
}

func (x OperateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperateType.Descriptor instead.
func (OperateType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{6}
}

// 点数
type RankType int32

const (
	RankType_RANK_0        RankType = 0 // 无点数
	RankType_RANK_1        RankType = 1 // A作为1的时候
	RankType_RANK_2        RankType = 2
	RankType_RANK_3        RankType = 3
	RankType_RANK_4        RankType = 4
	RankType_RANK_5        RankType = 5
	RankType_RANK_6        RankType = 6
	RankType_RANK_7        RankType = 7
	RankType_RANK_8        RankType = 8
	RankType_RANK_9        RankType = 9
	RankType_RANK_10       RankType = 10
	RankType_RANK_J        RankType = 11
	RankType_RANK_Q        RankType = 12
	RankType_RANK_K        RankType = 13
	RankType_RANK_A        RankType = 14
	RankType_RANK_JOKER    RankType = 15
	RankType_RANK_BIGJOKER RankType = 16 // 大王
)

// Enum value maps for RankType.
var (
	RankType_name = map[int32]string{
		0:  "RANK_0",
		1:  "RANK_1",
		2:  "RANK_2",
		3:  "RANK_3",
		4:  "RANK_4",
		5:  "RANK_5",
		6:  "RANK_6",
		7:  "RANK_7",
		8:  "RANK_8",
		9:  "RANK_9",
		10: "RANK_10",
		11: "RANK_J",
		12: "RANK_Q",
		13: "RANK_K",
		14: "RANK_A",
		15: "RANK_JOKER",
		16: "RANK_BIGJOKER",
	}
	RankType_value = map[string]int32{
		"RANK_0":        0,
		"RANK_1":        1,
		"RANK_2":        2,
		"RANK_3":        3,
		"RANK_4":        4,
		"RANK_5":        5,
		"RANK_6":        6,
		"RANK_7":        7,
		"RANK_8":        8,
		"RANK_9":        9,
		"RANK_10":       10,
		"RANK_J":        11,
		"RANK_Q":        12,
		"RANK_K":        13,
		"RANK_A":        14,
		"RANK_JOKER":    15,
		"RANK_BIGJOKER": 16,
	}
)

func (x RankType) Enum() *RankType {
	p := new(RankType)
	*p = x
	return p
}

func (x RankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[7].Descriptor()
}

func (RankType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[7]
}

func (x RankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RankType.Descriptor instead.
func (RankType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{7}
}

type ColorType int32

const (
	ColorType_ColorTypeNone ColorType = 0 // 花色类型-无
	ColorType_Diamond       ColorType = 1 // 花色类型-方块
	ColorType_Club          ColorType = 2 // 花色类型-梅花
	ColorType_Heart         ColorType = 4 // 花色类型-红桃
	ColorType_Spade         ColorType = 8 // 花色类型-黑桃
)

// Enum value maps for ColorType.
var (
	ColorType_name = map[int32]string{
		0: "ColorTypeNone",
		1: "Diamond",
		2: "Club",
		4: "Heart",
		8: "Spade",
	}
	ColorType_value = map[string]int32{
		"ColorTypeNone": 0,
		"Diamond":       1,
		"Club":          2,
		"Heart":         4,
		"Spade":         8,
	}
)

func (x ColorType) Enum() *ColorType {
	p := new(ColorType)
	*p = x
	return p
}

func (x ColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[8].Descriptor()
}

func (ColorType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[8]
}

func (x ColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorType.Descriptor instead.
func (ColorType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{8}
}

type TexasEventType int32

const (
	TexasEventType_EVENT_NONE            TexasEventType = 0  // 缺省通知
	TexasEventType_EVENT_BET             TexasEventType = 1  // 下注
	TexasEventType_EVENT_CALL            TexasEventType = 2  // 跟注
	TexasEventType_EVENT_RAISE           TexasEventType = 3  // 加注
	TexasEventType_EVENT_CHECK           TexasEventType = 4  // 看牌
	TexasEventType_EVENT_FOLD            TexasEventType = 5  // 弃牌
	TexasEventType_EVENT_BET_BIG_BLIND   TexasEventType = 6  // 下大盲
	TexasEventType_EVENT_BET_SMALL_BLIND TexasEventType = 7  // 下小盲
	TexasEventType_EVENT_BET_PRE_FOLP    TexasEventType = 8  // 翻牌下前注
	TexasEventType_EVENT_DEAL            TexasEventType = 9  // 发牌
	TexasEventType_EVENT_SIT_DOWN        TexasEventType = 10 // 坐下
	TexasEventType_EVENT_STAND_UP        TexasEventType = 11 // 站起
	TexasEventType_EVENT_LEAVE           TexasEventType = 12 // 离开
	TexasEventType_EVENT_READY           TexasEventType = 13 // 准备
	TexasEventType_EVENT_CANCEL_READY    TexasEventType = 14 // 取消准备
	TexasEventType_EVENT_GAME_START      TexasEventType = 15 // 游戏开始
	TexasEventType_EVENT_GAME_END        TexasEventType = 16 // 游戏结束
	TexasEventType_EVENT_GAME_PAUSE      TexasEventType = 17 // 游戏暂停
	TexasEventType_EVENT_GAME_RESUME     TexasEventType = 18 // 游戏恢复
	TexasEventType_EVENT_GAME_RESET      TexasEventType = 19 // 游戏重置
	TexasEventType_EVENT_BLIND           TexasEventType = 20 // 涨盲
	TexasEventType_EVENT_RANK            TexasEventType = 21 // 排名
	TexasEventType_EVENT_FLOP_CARD       TexasEventType = 24 // 翻牌，翻转牌，翻和牌
)

// Enum value maps for TexasEventType.
var (
	TexasEventType_name = map[int32]string{
		0:  "EVENT_NONE",
		1:  "EVENT_BET",
		2:  "EVENT_CALL",
		3:  "EVENT_RAISE",
		4:  "EVENT_CHECK",
		5:  "EVENT_FOLD",
		6:  "EVENT_BET_BIG_BLIND",
		7:  "EVENT_BET_SMALL_BLIND",
		8:  "EVENT_BET_PRE_FOLP",
		9:  "EVENT_DEAL",
		10: "EVENT_SIT_DOWN",
		11: "EVENT_STAND_UP",
		12: "EVENT_LEAVE",
		13: "EVENT_READY",
		14: "EVENT_CANCEL_READY",
		15: "EVENT_GAME_START",
		16: "EVENT_GAME_END",
		17: "EVENT_GAME_PAUSE",
		18: "EVENT_GAME_RESUME",
		19: "EVENT_GAME_RESET",
		20: "EVENT_BLIND",
		21: "EVENT_RANK",
		24: "EVENT_FLOP_CARD",
	}
	TexasEventType_value = map[string]int32{
		"EVENT_NONE":            0,
		"EVENT_BET":             1,
		"EVENT_CALL":            2,
		"EVENT_RAISE":           3,
		"EVENT_CHECK":           4,
		"EVENT_FOLD":            5,
		"EVENT_BET_BIG_BLIND":   6,
		"EVENT_BET_SMALL_BLIND": 7,
		"EVENT_BET_PRE_FOLP":    8,
		"EVENT_DEAL":            9,
		"EVENT_SIT_DOWN":        10,
		"EVENT_STAND_UP":        11,
		"EVENT_LEAVE":           12,
		"EVENT_READY":           13,
		"EVENT_CANCEL_READY":    14,
		"EVENT_GAME_START":      15,
		"EVENT_GAME_END":        16,
		"EVENT_GAME_PAUSE":      17,
		"EVENT_GAME_RESUME":     18,
		"EVENT_GAME_RESET":      19,
		"EVENT_BLIND":           20,
		"EVENT_RANK":            21,
		"EVENT_FLOP_CARD":       24,
	}
)

func (x TexasEventType) Enum() *TexasEventType {
	p := new(TexasEventType)
	*p = x
	return p
}

func (x TexasEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[9].Descriptor()
}

func (TexasEventType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[9]
}

func (x TexasEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasEventType.Descriptor instead.
func (TexasEventType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{9}
}

// 发牌类型
type DealType int32

const (
	DealType_DealTypeNone DealType = 0 // 无效发牌
	DealType_HAND         DealType = 1 // 发手牌
	DealType_FLOP         DealType = 2 // 发翻牌
	DealType_TURN         DealType = 3 // 发转牌
	DealType_RIVER        DealType = 4 // 发河牌
)

// Enum value maps for DealType.
var (
	DealType_name = map[int32]string{
		0: "DealTypeNone",
		1: "HAND",
		2: "FLOP",
		3: "TURN",
		4: "RIVER",
	}
	DealType_value = map[string]int32{
		"DealTypeNone": 0,
		"HAND":         1,
		"FLOP":         2,
		"TURN":         3,
		"RIVER":        4,
	}
)

func (x DealType) Enum() *DealType {
	p := new(DealType)
	*p = x
	return p
}

func (x DealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[10].Descriptor()
}

func (DealType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[10]
}

func (x DealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealType.Descriptor instead.
func (DealType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{10}
}

// -------------------rummy游戏事件类型
type RummyEventType int32

const (
	RummyEventType_RummyEnterNone RummyEventType = 0 // 缺省通知
	RummyEventType_RummyEnterDesk RummyEventType = 1 // 1.匹配 成功后，发送[RummyEnterDeskReq]进入桌子，广播【RummyEnterDeskNtf】通知给桌子上的其他玩家。
	RummyEventType_RummyQuitRoom  RummyEventType = 2 // 2.离开桌子,发送[RummyQuitRoomReq]，广播【RummyQuitRoomNtf】通知给桌子上的其他玩家。
	// 3.桌子创建后，进入Rummy_STAGE_INIT状态，等待玩家进入.
	// 4.桌子人满后，进入Rummy_STAGE_READY_START,并广播[RummyReadyStartGameNtf],客户端展示倒计时开局界面.
	RummyEventType_RummyReadyStartGame RummyEventType = 3
	// 5.开局倒计时结束，发送[RummyStartGameNtf]通知客户端开局了。
	RummyEventType_RummyStartGame RummyEventType = 4
	// 6.开局后，发送定庄通知消息[RummySetZhuangNtf]，客户端展示定庄牌和庄家ID.（Rummy_STAGE_ZHUANG）
	RummyEventType_RummySetZhuang RummyEventType = 5
	// 7.定庄后，发送手牌消息[RummyDealNtf],客户端展示手牌，癞子牌，明牌和手牌。（Rummy_STAGE_DEAL）
	RummyEventType_RummyDeal RummyEventType = 6
	// 8.进入玩牌阶段，发送【RummyPlayCardNtf】，通知某玩家进入玩牌操作状态。玩家可以摸牌，出牌和投降。（Rummy_STAGE_PLAYING）
	RummyEventType_RummyPlayCard RummyEventType = 7
	// 9.进入结束牌确认牌组阶段, 发送【RummyFixCardPlayersNtf】， 客户端展示确认牌组界面。（Rummy_STAGE_FIX_CARD）
	RummyEventType_RummyShuffle RummyEventType = 8 // 暗牌堆摸空 [RummyShuffleNtf] 通知玩家洗牌事件
	// 10.客户端发送【RummyFixCardReq】确认牌组。（Rummy_STAGE_FIX_CARD）
	// 11.进入结算阶段，服务器发送[RummySettleNtf]结算通知消息，客户端展示结算界面。（Rummy_STAGE_SETTLE）
	RummyEventType_RummySettle         RummyEventType = 9
	RummyEventType_RummyOprCard        RummyEventType = 10 // 玩牌阶段 玩家操作通知 [RummyOprCardNtf]
	RummyEventType_RummyFixCardPlayers RummyEventType = 11 // 玩牌阶段玩家可以随时保存手牌 确认阶段 玩家只能保存一次 [RummyFixCardPlayersNtf]
	RummyEventType_CustomFixCard       RummyEventType = 12 // 玩牌阶段只能胡牌一次 要么赢 要么炸胡 成功 [RummyOprCardNtf]
	RummyEventType_CustomFake          RummyEventType = 13 // 炸胡 [RummyPlayerActionNtf]
	RummyEventType_Timeout             RummyEventType = 14 // 玩家超时两次以上被t [RummyPlayerActionNtf]
	RummyEventType_Ready               RummyEventType = 15 // 玩家就绪广播
)

// Enum value maps for RummyEventType.
var (
	RummyEventType_name = map[int32]string{
		0:  "RummyEnterNone",
		1:  "RummyEnterDesk",
		2:  "RummyQuitRoom",
		3:  "RummyReadyStartGame",
		4:  "RummyStartGame",
		5:  "RummySetZhuang",
		6:  "RummyDeal",
		7:  "RummyPlayCard",
		8:  "RummyShuffle",
		9:  "RummySettle",
		10: "RummyOprCard",
		11: "RummyFixCardPlayers",
		12: "CustomFixCard",
		13: "CustomFake",
		14: "Timeout",
		15: "Ready",
	}
	RummyEventType_value = map[string]int32{
		"RummyEnterNone":      0,
		"RummyEnterDesk":      1,
		"RummyQuitRoom":       2,
		"RummyReadyStartGame": 3,
		"RummyStartGame":      4,
		"RummySetZhuang":      5,
		"RummyDeal":           6,
		"RummyPlayCard":       7,
		"RummyShuffle":        8,
		"RummySettle":         9,
		"RummyOprCard":        10,
		"RummyFixCardPlayers": 11,
		"CustomFixCard":       12,
		"CustomFake":          13,
		"Timeout":             14,
		"Ready":               15,
	}
)

func (x RummyEventType) Enum() *RummyEventType {
	p := new(RummyEventType)
	*p = x
	return p
}

func (x RummyEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[11].Descriptor()
}

func (RummyEventType) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[11]
}

func (x RummyEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyEventType.Descriptor instead.
func (RummyEventType) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{11}
}

type RummyRoundStep int32

const (
	RummyRoundStep_PLAYSTEPNONE        RummyRoundStep = 0 // 不可操作
	RummyRoundStep_PLAYSTEPDRAW        RummyRoundStep = 1 // 抽牌阶段
	RummyRoundStep_PLAYSTEPDRAWDECLARE RummyRoundStep = 2 // 出牌阶段
	RummyRoundStep_PLAYSTEPSTEAFINISH  RummyRoundStep = 3 // 结束阶段
)

// Enum value maps for RummyRoundStep.
var (
	RummyRoundStep_name = map[int32]string{
		0: "PLAYSTEPNONE",
		1: "PLAYSTEPDRAW",
		2: "PLAYSTEPDRAWDECLARE",
		3: "PLAYSTEPSTEAFINISH",
	}
	RummyRoundStep_value = map[string]int32{
		"PLAYSTEPNONE":        0,
		"PLAYSTEPDRAW":        1,
		"PLAYSTEPDRAWDECLARE": 2,
		"PLAYSTEPSTEAFINISH":  3,
	}
)

func (x RummyRoundStep) Enum() *RummyRoundStep {
	p := new(RummyRoundStep)
	*p = x
	return p
}

func (x RummyRoundStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RummyRoundStep) Descriptor() protoreflect.EnumDescriptor {
	return file_global_enum_proto_enumTypes[12].Descriptor()
}

func (RummyRoundStep) Type() protoreflect.EnumType {
	return &file_global_enum_proto_enumTypes[12]
}

func (x RummyRoundStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RummyRoundStep.Descriptor instead.
func (RummyRoundStep) EnumDescriptor() ([]byte, []int) {
	return file_global_enum_proto_rawDescGZIP(), []int{12}
}

var File_global_enum_proto protoreflect.FileDescriptor

var file_global_enum_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2a, 0xf1, 0x01, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x09, 0x2a, 0x83,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x61, 0x73, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x64, 0x10, 0x04, 0x2a, 0xc1, 0x04, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x58, 0x41, 0x53,
	0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52, 0x49, 0x56,
	0x45, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45,
	0x58, 0x41, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4e, 0x47,
	0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4e,
	0x47, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x41,
	0x53, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4e, 0x47,
	0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x10, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x66, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x67,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x5a, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x10, 0x68, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x69, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x6a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x46, 0x46, 0x4c, 0x45, 0x10, 0x6b,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x46, 0x49, 0x58, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x6e, 0x2a, 0x78, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x61, 0x69, 0x74, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x10, 0x04, 0x2a, 0x8c, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x69,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10,
	0x04, 0x2a, 0xbe, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x48, 0x52, 0x45, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x55,
	0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10,
	0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48,
	0x10, 0x0a, 0x2a, 0x85, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45, 0x54, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f,
	0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x54, 0x5f, 0x42,
	0x49, 0x47, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x08, 0x2a, 0xe2, 0x01, 0x0a, 0x08, 0x52,
	0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x30, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x31, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x35, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x38, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x39, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x31, 0x30, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4a, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x51, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4b, 0x10, 0x0d,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4a, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x42, 0x49, 0x47, 0x4a, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x10, 0x2a,
	0x4b, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x6c, 0x75, 0x62, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x65, 0x61, 0x72, 0x74, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x64, 0x65, 0x10, 0x08, 0x2a, 0xd2, 0x03, 0x0a,
	0x0e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x42, 0x49,
	0x47, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x4c, 0x49,
	0x4e, 0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x50, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x5f,
	0x55, 0x50, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45,
	0x41, 0x56, 0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0e, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x11, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4d, 0x45, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x18, 0x2a, 0x45, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x4f,
	0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x04, 0x2a, 0xb7, 0x02, 0x0a, 0x0e, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x6b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x51, 0x75, 0x69, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x44, 0x65, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x70, 0x72, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0a, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x46, 0x69, 0x78, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x69, 0x78, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61, 0x6b, 0x65, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x0f, 0x2a, 0x65, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x53, 0x54, 0x45, 0x50,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x53, 0x54,
	0x45, 0x50, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x59,
	0x53, 0x54, 0x45, 0x50, 0x44, 0x52, 0x41, 0x57, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x59, 0x53, 0x54, 0x45, 0x50, 0x53, 0x54, 0x45,
	0x41, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_global_enum_proto_rawDescOnce sync.Once
	file_global_enum_proto_rawDescData []byte
)

func file_global_enum_proto_rawDescGZIP() []byte {
	file_global_enum_proto_rawDescOnce.Do(func() {
		file_global_enum_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_global_enum_proto_rawDesc), len(file_global_enum_proto_rawDesc)))
	})
	return file_global_enum_proto_rawDescData
}

var file_global_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_global_enum_proto_goTypes = []any{
	(DataType)(0),       // 0: poker.DataType
	(GeneratorType)(0),  // 1: poker.GeneratorType
	(GameState)(0),      // 2: poker.GameState
	(RoomStatus)(0),     // 3: poker.RoomStatus
	(PlayerStatus)(0),   // 4: poker.PlayerStatus
	(CardType)(0),       // 5: poker.CardType
	(OperateType)(0),    // 6: poker.OperateType
	(RankType)(0),       // 7: poker.RankType
	(ColorType)(0),      // 8: poker.ColorType
	(TexasEventType)(0), // 9: poker.TexasEventType
	(DealType)(0),       // 10: poker.DealType
	(RummyEventType)(0), // 11: poker.RummyEventType
	(RummyRoundStep)(0), // 12: poker.RummyRoundStep
}
var file_global_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_global_enum_proto_init() }
func file_global_enum_proto_init() {
	if File_global_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_global_enum_proto_rawDesc), len(file_global_enum_proto_rawDesc)),
			NumEnums:      13,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_global_enum_proto_goTypes,
		DependencyIndexes: file_global_enum_proto_depIdxs,
		EnumInfos:         file_global_enum_proto_enumTypes,
	}.Build()
	File_global_enum_proto = out.File
	file_global_enum_proto_goTypes = nil
	file_global_enum_proto_depIdxs = nil
}
