// Code generated by protoc-gen-go-xorm. DO NOT EDIT.
// Source: table_cfg.proto

package pb

import (
	"github.com/golang/protobuf/proto"
)

func (x *BreakInfo) SetInterval(val int64) {
	x.Interval = val
}

func (x *BreakInfo) SetBreakTime(val int64) {
	x.BreakTime = val
}

func (x *BreakInfo) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *BreakInfo) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *CoinReward) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *CoinReward) SetIncr(val int64) {
	x.Incr = val
}

func (x *CoinReward) SetTotal(val int64) {
	x.Total = val
}

func (x *CoinReward) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *CoinReward) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TexasTestHandCard) SetHand1(val string) {
	x.Hand1 = val
}

func (x *TexasTestHandCard) SetHand2(val string) {
	x.Hand2 = val
}

func (x *TexasTestHandCard) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasTestHandCard) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *MachineConfig) SetID(val int32) {
	x.ID = val
}

func (x *MachineConfig) SetGameType(val GameType) {
	x.GameType = val
}

func (x *MachineConfig) SetStartDuration(val int64) {
	x.StartDuration = val
}

func (x *MachineConfig) SetPreFlopDuration(val int64) {
	x.PreFlopDuration = val
}

func (x *MachineConfig) SetFlopDuration(val int64) {
	x.FlopDuration = val
}

func (x *MachineConfig) SetTurnDuration(val int64) {
	x.TurnDuration = val
}

func (x *MachineConfig) SetRiverDuration(val int64) {
	x.RiverDuration = val
}

func (x *MachineConfig) SetEndDuration(val int64) {
	x.EndDuration = val
}

func (x *MachineConfig) SetDefaultDuration(val int64) {
	x.DefaultDuration = val
}

func (x *MachineConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *MachineConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *MachineConfigAry) SetAry(val []*MachineConfig) {
	x.Ary = val
}

func (x *MachineConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *MachineConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RouterConfig) SetCmd(val uint32) {
	x.Cmd = val
}

func (x *RouterConfig) SetNodeType(val NodeType) {
	x.NodeType = val
}

func (x *RouterConfig) SetRouterType(val RouterType) {
	x.RouterType = val
}

func (x *RouterConfig) SetRequest(val string) {
	x.Request = val
}

func (x *RouterConfig) SetResponse(val string) {
	x.Response = val
}

func (x *RouterConfig) SetActorName(val string) {
	x.ActorName = val
}

func (x *RouterConfig) SetFuncName(val string) {
	x.FuncName = val
}

func (x *RouterConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RouterConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RouterConfigAry) SetAry(val []*RouterConfig) {
	x.Ary = val
}

func (x *RouterConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RouterConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyConfig) SetID(val uint32) {
	x.ID = val
}

func (x *RummyConfig) SetGameType(val GameType) {
	x.GameType = val
}

func (x *RummyConfig) SetRoomType(val RoomType) {
	x.RoomType = val
}

func (x *RummyConfig) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *RummyConfig) SetRoomKeepLive(val int64) {
	x.RoomKeepLive = val
}

func (x *RummyConfig) SetBaseScore(val int64) {
	x.BaseScore = val
}

func (x *RummyConfig) SetMinBuyIn(val int64) {
	x.MinBuyIn = val
}

func (x *RummyConfig) SetRakeRate(val int64) {
	x.RakeRate = val
}

func (x *RummyConfig) SetMinPlayerCount(val uint32) {
	x.MinPlayerCount = val
}

func (x *RummyConfig) SetMaxPlayerCount(val uint32) {
	x.MaxPlayerCount = val
}

func (x *RummyConfig) SetFirstDrop(val int64) {
	x.FirstDrop = val
}

func (x *RummyConfig) SetMiddleDrop(val int64) {
	x.MiddleDrop = val
}

func (x *RummyConfig) SetDecks(val uint32) {
	x.Decks = val
}

func (x *RummyConfig) SetJokers(val uint32) {
	x.Jokers = val
}

func (x *RummyConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyConfigAry) SetAry(val []*RummyConfig) {
	x.Ary = val
}

func (x *RummyConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyMachineConfig) SetGameType(val GameType) {
	x.GameType = val
}

func (x *RummyMachineConfig) SetReadyDuration(val int64) {
	x.ReadyDuration = val
}

func (x *RummyMachineConfig) SetStartDuration(val int64) {
	x.StartDuration = val
}

func (x *RummyMachineConfig) SetHostDuration(val int64) {
	x.HostDuration = val
}

func (x *RummyMachineConfig) SetDealDuration(val int64) {
	x.DealDuration = val
}

func (x *RummyMachineConfig) SetShuffleDuration(val int64) {
	x.ShuffleDuration = val
}

func (x *RummyMachineConfig) SetPlayDuration(val int64) {
	x.PlayDuration = val
}

func (x *RummyMachineConfig) SetFixDuration(val int64) {
	x.FixDuration = val
}

func (x *RummyMachineConfig) SetSettleDuration(val int64) {
	x.SettleDuration = val
}

func (x *RummyMachineConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyMachineConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyMachineConfigAry) SetAry(val []*RummyMachineConfig) {
	x.Ary = val
}

func (x *RummyMachineConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyMachineConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *SngMatchConfig) SetGameId(val int32) {
	x.GameId = val
}

func (x *SngMatchConfig) SetTitle(val string) {
	x.Title = val
}

func (x *SngMatchConfig) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *SngMatchConfig) SetConsume(val *CoinReward) {
	x.Consume = val
}

func (x *SngMatchConfig) SetEntryFee(val int64) {
	x.EntryFee = val
}

func (x *SngMatchConfig) SetChip(val int64) {
	x.Chip = val
}

func (x *SngMatchConfig) SetPrizeType(val int32) {
	x.PrizeType = val
}

func (x *SngMatchConfig) SetBreakInfos(val []*BreakInfo) {
	x.BreakInfos = val
}

func (x *SngMatchConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *SngMatchConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *SngMatchConfigAry) SetAry(val []*SngMatchConfig) {
	x.Ary = val
}

func (x *SngMatchConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *SngMatchConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *SngMatchRankRewardConfig) SetPrizeType(val int32) {
	x.PrizeType = val
}

func (x *SngMatchRankRewardConfig) SetLevel(val int32) {
	x.Level = val
}

func (x *SngMatchRankRewardConfig) SetRewards(val []*CoinReward) {
	x.Rewards = val
}

func (x *SngMatchRankRewardConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *SngMatchRankRewardConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *SngMatchRankRewardConfigAry) SetAry(val []*SngMatchRankRewardConfig) {
	x.Ary = val
}

func (x *SngMatchRankRewardConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *SngMatchRankRewardConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TexasConfig) SetID(val int32) {
	x.ID = val
}

func (x *TexasConfig) SetGameType(val GameType) {
	x.GameType = val
}

func (x *TexasConfig) SetMatchType(val MatchType) {
	x.MatchType = val
}

func (x *TexasConfig) SetRoomType(val RoomType) {
	x.RoomType = val
}

func (x *TexasConfig) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *TexasConfig) SetRoomKeepLive(val int64) {
	x.RoomKeepLive = val
}

func (x *TexasConfig) SetSmallBlind(val int64) {
	x.SmallBlind = val
}

func (x *TexasConfig) SetBigBlind(val int64) {
	x.BigBlind = val
}

func (x *TexasConfig) SetMinBuyIn(val int32) {
	x.MinBuyIn = val
}

func (x *TexasConfig) SetMaxBuyIn(val int32) {
	x.MaxBuyIn = val
}

func (x *TexasConfig) SetRakeRate(val int64) {
	x.RakeRate = val
}

func (x *TexasConfig) SetMinPlayerCount(val int32) {
	x.MinPlayerCount = val
}

func (x *TexasConfig) SetMaxPlayerCount(val int32) {
	x.MaxPlayerCount = val
}

func (x *TexasConfig) SetRakeUpLimit(val []int64) {
	x.RakeUpLimit = val
}

func (x *TexasConfig) SetMaxRoomPlayerCount(val uint32) {
	x.MaxRoomPlayerCount = val
}

func (x *TexasConfig) SetIsNoFlopNoDrop(val bool) {
	x.IsNoFlopNoDrop = val
}

func (x *TexasConfig) SetIsTest(val bool) {
	x.IsTest = val
}

func (x *TexasConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TexasConfigAry) SetAry(val []*TexasConfig) {
	x.Ary = val
}

func (x *TexasConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TexasTestConfig) SetRound(val uint32) {
	x.Round = val
}

func (x *TexasTestConfig) SetPublics(val []string) {
	x.Publics = val
}

func (x *TexasTestConfig) SetHands(val []*TexasTestHandCard) {
	x.Hands = val
}

func (x *TexasTestConfig) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasTestConfig) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TexasTestConfigAry) SetAry(val []*TexasTestConfig) {
	x.Ary = val
}

func (x *TexasTestConfigAry) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasTestConfigAry) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}
