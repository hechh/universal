// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: client_room.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ======================德州扑克==================
// 加入房间请求
type TexasJoinRoomReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                               // 房间id
	MatchType     MatchType              `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=poker.MatchType" json:"match_type,omitempty"` // sng 类型
	PlayerInfo    *PlayerInfo            `protobuf:"bytes,3,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`                    // (后台专用，客户端无用)玩家信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasJoinRoomReq) Reset() {
	*x = TexasJoinRoomReq{}
	mi := &file_client_room_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasJoinRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasJoinRoomReq) ProtoMessage() {}

func (x *TexasJoinRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasJoinRoomReq.ProtoReflect.Descriptor instead.
func (*TexasJoinRoomReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{0}
}

func (x *TexasJoinRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasJoinRoomReq) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MatchTypeNone
}

func (x *TexasJoinRoomReq) GetPlayerInfo() *PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type TexasRoomInfo struct {
	state          protoimpl.MessageState `xorm:"-"` 
	RoomId         uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                            // 唯一id
	GameType       int32                  `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`                      // 游戏类型
	RoomStage      int32                  `protobuf:"varint,3,opt,name=room_stage,json=roomStage,proto3" json:"room_stage,omitempty"`                   // 房间等级
	CoinType       int32                  `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`                      // 币种类型
	RoomState      int32                  `protobuf:"varint,5,opt,name=room_state,json=roomState,proto3" json:"room_state,omitempty"`                   // 房间状态
	CreateTime     int64                  `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                // 房间创建时间
	FinishTime     int64                  `protobuf:"varint,7,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`                // 房间结束时间
	MinBuyIn       int32                  `protobuf:"varint,8,opt,name=min_buy_in,json=minBuyIn,proto3" json:"min_buy_in,omitempty"`                    // 最小买入
	MaxBuyIn       int32                  `protobuf:"varint,9,opt,name=max_buy_in,json=maxBuyIn,proto3" json:"max_buy_in,omitempty"`                    // 最大买入
	SmallBlind     int64                  `protobuf:"varint,10,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"`               // 小盲注
	BigBlind       int64                  `protobuf:"varint,11,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`                     // 大盲注
	MaxPlayerCount int32                  `protobuf:"varint,12,opt,name=max_player_count,json=maxPlayerCount,proto3" json:"max_player_count,omitempty"` // 最大玩家数量
	PlayerCount    int32                  `protobuf:"varint,13,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`            // 当前玩家数量
	unknownFields  protoimpl.UnknownFields `xorm:"-"`
	sizeCache      protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasRoomInfo) Reset() {
	*x = TexasRoomInfo{}
	mi := &file_client_room_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomInfo) ProtoMessage() {}

func (x *TexasRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomInfo.ProtoReflect.Descriptor instead.
func (*TexasRoomInfo) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{1}
}

func (x *TexasRoomInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasRoomInfo) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TexasRoomInfo) GetRoomStage() int32 {
	if x != nil {
		return x.RoomStage
	}
	return 0
}

func (x *TexasRoomInfo) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *TexasRoomInfo) GetRoomState() int32 {
	if x != nil {
		return x.RoomState
	}
	return 0
}

func (x *TexasRoomInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TexasRoomInfo) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *TexasRoomInfo) GetMinBuyIn() int32 {
	if x != nil {
		return x.MinBuyIn
	}
	return 0
}

func (x *TexasRoomInfo) GetMaxBuyIn() int32 {
	if x != nil {
		return x.MaxBuyIn
	}
	return 0
}

func (x *TexasRoomInfo) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *TexasRoomInfo) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *TexasRoomInfo) GetMaxPlayerCount() int32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

func (x *TexasRoomInfo) GetPlayerCount() int32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

type TexasJoinRoomRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomInfo      *TexasRoomInfo         `protobuf:"bytes,2,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
	TableInfo     *TexasTableData        `protobuf:"bytes,3,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	Duration      int64                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	PlayerInfo    map[uint64]*PlayerInfo `protobuf:"bytes,5,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasJoinRoomRsp) Reset() {
	*x = TexasJoinRoomRsp{}
	mi := &file_client_room_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasJoinRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasJoinRoomRsp) ProtoMessage() {}

func (x *TexasJoinRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasJoinRoomRsp.ProtoReflect.Descriptor instead.
func (*TexasJoinRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{2}
}

func (x *TexasJoinRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasJoinRoomRsp) GetRoomInfo() *TexasRoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *TexasJoinRoomRsp) GetTableInfo() *TexasTableData {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *TexasJoinRoomRsp) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TexasJoinRoomRsp) GetPlayerInfo() map[uint64]*PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

// 退出房间请求
type TexasQuitRoomReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasQuitRoomReq) Reset() {
	*x = TexasQuitRoomReq{}
	mi := &file_client_room_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasQuitRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasQuitRoomReq) ProtoMessage() {}

func (x *TexasQuitRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasQuitRoomReq.ProtoReflect.Descriptor instead.
func (*TexasQuitRoomReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{3}
}

func (x *TexasQuitRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type TexasQuitRoomRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	CoinType      CoinType               `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty"`
	Chip          int64                  `protobuf:"varint,4,opt,name=chip,proto3" json:"chip,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasQuitRoomRsp) Reset() {
	*x = TexasQuitRoomRsp{}
	mi := &file_client_room_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasQuitRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasQuitRoomRsp) ProtoMessage() {}

func (x *TexasQuitRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasQuitRoomRsp.ProtoReflect.Descriptor instead.
func (*TexasQuitRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{4}
}

func (x *TexasQuitRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasQuitRoomRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasQuitRoomRsp) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *TexasQuitRoomRsp) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

// 坐下请求
type TexasSitDownReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	BuyinChips    uint32                 `protobuf:"varint,3,opt,name=buyin_chips,json=buyinChips,proto3" json:"buyin_chips,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasSitDownReq) Reset() {
	*x = TexasSitDownReq{}
	mi := &file_client_room_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasSitDownReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasSitDownReq) ProtoMessage() {}

func (x *TexasSitDownReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasSitDownReq.ProtoReflect.Descriptor instead.
func (*TexasSitDownReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{5}
}

func (x *TexasSitDownReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasSitDownReq) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasSitDownReq) GetBuyinChips() uint32 {
	if x != nil {
		return x.BuyinChips
	}
	return 0
}

type TexasSitDownRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasSitDownRsp) Reset() {
	*x = TexasSitDownRsp{}
	mi := &file_client_room_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasSitDownRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasSitDownRsp) ProtoMessage() {}

func (x *TexasSitDownRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasSitDownRsp.ProtoReflect.Descriptor instead.
func (*TexasSitDownRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{6}
}

func (x *TexasSitDownRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasSitDownRsp) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasSitDownRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// 站起请求
type TexasStandUpReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasStandUpReq) Reset() {
	*x = TexasStandUpReq{}
	mi := &file_client_room_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasStandUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasStandUpReq) ProtoMessage() {}

func (x *TexasStandUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasStandUpReq.ProtoReflect.Descriptor instead.
func (*TexasStandUpReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{7}
}

func (x *TexasStandUpReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasStandUpReq) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

type TexasStandUpRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasStandUpRsp) Reset() {
	*x = TexasStandUpRsp{}
	mi := &file_client_room_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasStandUpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasStandUpRsp) ProtoMessage() {}

func (x *TexasStandUpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasStandUpRsp.ProtoReflect.Descriptor instead.
func (*TexasStandUpRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{8}
}

func (x *TexasStandUpRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasStandUpRsp) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasStandUpRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// 买入请求
type TexasBuyInReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`       // 房间ID
	Chip          int64                  `protobuf:"varint,2,opt,name=chip,proto3" json:"chip,omitempty"`                         // 增加筹码
	CoinType      int32                  `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"` // 币种类型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasBuyInReq) Reset() {
	*x = TexasBuyInReq{}
	mi := &file_client_room_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasBuyInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasBuyInReq) ProtoMessage() {}

func (x *TexasBuyInReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasBuyInReq.ProtoReflect.Descriptor instead.
func (*TexasBuyInReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{9}
}

func (x *TexasBuyInReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasBuyInReq) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasBuyInReq) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

type TexasBuyInRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Chip          int64                  `protobuf:"varint,4,opt,name=chip,proto3" json:"chip,omitempty"`
	CoinType      int32                  `protobuf:"varint,5,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"` // 币种类型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasBuyInRsp) Reset() {
	*x = TexasBuyInRsp{}
	mi := &file_client_room_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasBuyInRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasBuyInRsp) ProtoMessage() {}

func (x *TexasBuyInRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasBuyInRsp.ProtoReflect.Descriptor instead.
func (*TexasBuyInRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{10}
}

func (x *TexasBuyInRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasBuyInRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasBuyInRsp) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasBuyInRsp) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

// 下注请求
type TexasDoBetReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Chip          int64                  `protobuf:"varint,1,opt,name=chip,proto3" json:"chip,omitempty"` // 0为 check看牌
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	OperateType   int32                  `protobuf:"varint,4,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"` // 操作类型 enum OperateType
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasDoBetReq) Reset() {
	*x = TexasDoBetReq{}
	mi := &file_client_room_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasDoBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasDoBetReq) ProtoMessage() {}

func (x *TexasDoBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasDoBetReq.ProtoReflect.Descriptor instead.
func (*TexasDoBetReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{11}
}

func (x *TexasDoBetReq) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasDoBetReq) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasDoBetReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasDoBetReq) GetOperateType() int32 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

type TexasDoBetRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	ChairId       uint32                 `protobuf:"varint,3,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`    // 操作者椅子 id
	OpType        int32                  `protobuf:"varint,4,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`       // 操作类型 enum OperateType
	Chip          int64                  `protobuf:"varint,5,opt,name=chip,proto3" json:"chip,omitempty"`                         // 下注金额
	BankRoll      int64                  `protobuf:"varint,6,opt,name=bank_roll,json=bankRoll,proto3" json:"bank_roll,omitempty"` // 当前剩余金额
	TotalBet      int64                  `protobuf:"varint,7,opt,name=total_bet,json=totalBet,proto3" json:"total_bet,omitempty"` // 此局游戏总下注
	RoomId        uint64                 `protobuf:"varint,8,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasDoBetRsp) Reset() {
	*x = TexasDoBetRsp{}
	mi := &file_client_room_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasDoBetRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasDoBetRsp) ProtoMessage() {}

func (x *TexasDoBetRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasDoBetRsp.ProtoReflect.Descriptor instead.
func (*TexasDoBetRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{12}
}

func (x *TexasDoBetRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasDoBetRsp) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasDoBetRsp) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasDoBetRsp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *TexasDoBetRsp) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasDoBetRsp) GetBankRoll() int64 {
	if x != nil {
		return x.BankRoll
	}
	return 0
}

func (x *TexasDoBetRsp) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *TexasDoBetRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// 查询牌局记录
type TexasGameReportReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameReportReq) Reset() {
	*x = TexasGameReportReq{}
	mi := &file_client_room_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameReportReq) ProtoMessage() {}

func (x *TexasGameReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameReportReq.ProtoReflect.Descriptor instead.
func (*TexasGameReportReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{13}
}

func (x *TexasGameReportReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasGameReportReq) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type TexasGameReportRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Data          *TexasGameReport       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameReportRsp) Reset() {
	*x = TexasGameReportRsp{}
	mi := &file_client_room_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameReportRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameReportRsp) ProtoMessage() {}

func (x *TexasGameReportRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameReportRsp.ProtoReflect.Descriptor instead.
func (*TexasGameReportRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{14}
}

func (x *TexasGameReportRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasGameReportRsp) GetData() *TexasGameReport {
	if x != nil {
		return x.Data
	}
	return nil
}

// ------------------通知消息=-----------------
type TexasEventNotify struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Event         TexasEventType         `protobuf:"varint,1,opt,name=Event,proto3,enum=poker.TexasEventType" json:"Event,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasEventNotify) Reset() {
	*x = TexasEventNotify{}
	mi := &file_client_room_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasEventNotify) ProtoMessage() {}

func (x *TexasEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasEventNotify.ProtoReflect.Descriptor instead.
func (*TexasEventNotify) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{15}
}

func (x *TexasEventNotify) GetEvent() TexasEventType {
	if x != nil {
		return x.Event
	}
	return TexasEventType_EVENT_NONE
}

func (x *TexasEventNotify) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// EVENT_FLOP_CARD, EVENT_DEAL, EVENT_FLOP_CARD, EVENT_FLOP_CARD
type TexasDealEventNotify struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                          // 房间id
	GameState     int32                  `protobuf:"varint,2,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"`                 // 游戏状态
	HandsCard     []uint32               `protobuf:"varint,3,rep,packed,name=hands_card,json=handsCard,proto3" json:"hands_card,omitempty"`          // 手牌 or 公共牌
	CurBetChairId uint32                 `protobuf:"varint,4,opt,name=cur_bet_chair_id,json=curBetChairId,proto3" json:"cur_bet_chair_id,omitempty"` // 当前下注玩家座位
	PotPool       *TexasPotPoolData      `protobuf:"bytes,5,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                        // 筹码池
	Duration      int64                  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`                                    // 时间戳
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasDealEventNotify) Reset() {
	*x = TexasDealEventNotify{}
	mi := &file_client_room_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasDealEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasDealEventNotify) ProtoMessage() {}

func (x *TexasDealEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasDealEventNotify.ProtoReflect.Descriptor instead.
func (*TexasDealEventNotify) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{16}
}

func (x *TexasDealEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasDealEventNotify) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *TexasDealEventNotify) GetHandsCard() []uint32 {
	if x != nil {
		return x.HandsCard
	}
	return nil
}

func (x *TexasDealEventNotify) GetCurBetChairId() uint32 {
	if x != nil {
		return x.CurBetChairId
	}
	return 0
}

func (x *TexasDealEventNotify) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasDealEventNotify) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// EVENT_STAND_UP, EVENT_SIT_DOWN, EVENT_STAND_UP
type TexasPlayerEventNotify struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`            // 房间id
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`         // 下注玩家
	Player        *TexasPlayerData       `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`                           // 玩家数据
	Uid           uint64                 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`                                // 玩家uid
	PlayerInfo    *PlayerInfo            `protobuf:"bytes,5,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"` // 玩家头像信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasPlayerEventNotify) Reset() {
	*x = TexasPlayerEventNotify{}
	mi := &file_client_room_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerEventNotify) ProtoMessage() {}

func (x *TexasPlayerEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerEventNotify.ProtoReflect.Descriptor instead.
func (*TexasPlayerEventNotify) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{17}
}

func (x *TexasPlayerEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasPlayerEventNotify) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasPlayerEventNotify) GetPlayer() *TexasPlayerData {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *TexasPlayerEventNotify) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasPlayerEventNotify) GetPlayerInfo() *PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

// EVENT_GAME_END, EVENT_GAME_START
type TexasGameEventNotify struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                          // 房间id
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`                                          // 当前回合
	DealerChair   uint32                 `protobuf:"varint,3,opt,name=dealer_chair,json=dealerChair,proto3" json:"dealer_chair,omitempty"`           // 庄家座位号
	SmallChair    uint32                 `protobuf:"varint,4,opt,name=small_chair,json=smallChair,proto3" json:"small_chair,omitempty"`              // 小盲座位号
	BigChair      uint32                 `protobuf:"varint,5,opt,name=big_chair,json=bigChair,proto3" json:"big_chair,omitempty"`                    // 大盲座位号
	SmallChip     uint32                 `protobuf:"varint,6,opt,name=small_chip,json=smallChip,proto3" json:"small_chip,omitempty"`                 // 小盲位筹码
	BigChip       uint32                 `protobuf:"varint,7,opt,name=big_chip,json=bigChip,proto3" json:"big_chip,omitempty"`                       // 大盲位筹码
	CurBetChairId uint32                 `protobuf:"varint,8,opt,name=cur_bet_chair_id,json=curBetChairId,proto3" json:"cur_bet_chair_id,omitempty"` // 当前下注玩家座位
	PotPool       *TexasPotPoolData      `protobuf:"bytes,9,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                        // 筹码池
	EndInfo       []*TexasGameEndInfo    `protobuf:"bytes,10,rep,name=end_info,json=endInfo,proto3" json:"end_info,omitempty"`
	Duration      int64                  `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"` // 时间戳
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameEventNotify) Reset() {
	*x = TexasGameEventNotify{}
	mi := &file_client_room_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameEventNotify) ProtoMessage() {}

func (x *TexasGameEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameEventNotify.ProtoReflect.Descriptor instead.
func (*TexasGameEventNotify) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{18}
}

func (x *TexasGameEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasGameEventNotify) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasGameEventNotify) GetDealerChair() uint32 {
	if x != nil {
		return x.DealerChair
	}
	return 0
}

func (x *TexasGameEventNotify) GetSmallChair() uint32 {
	if x != nil {
		return x.SmallChair
	}
	return 0
}

func (x *TexasGameEventNotify) GetBigChair() uint32 {
	if x != nil {
		return x.BigChair
	}
	return 0
}

func (x *TexasGameEventNotify) GetSmallChip() uint32 {
	if x != nil {
		return x.SmallChip
	}
	return 0
}

func (x *TexasGameEventNotify) GetBigChip() uint32 {
	if x != nil {
		return x.BigChip
	}
	return 0
}

func (x *TexasGameEventNotify) GetCurBetChairId() uint32 {
	if x != nil {
		return x.CurBetChairId
	}
	return 0
}

func (x *TexasGameEventNotify) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasGameEventNotify) GetEndInfo() []*TexasGameEndInfo {
	if x != nil {
		return x.EndInfo
	}
	return nil
}

func (x *TexasGameEventNotify) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TexasGameEndInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	Chips         int64                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	WinChips      int64                  `protobuf:"varint,4,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty"`
	CardType      int32                  `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"` // 牌型
	Hands         []uint32               `protobuf:"varint,6,rep,packed,name=hands,proto3" json:"hands,omitempty"`
	Bests         []uint32               `protobuf:"varint,7,rep,packed,name=bests,proto3" json:"bests,omitempty"` // 最大牌型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameEndInfo) Reset() {
	*x = TexasGameEndInfo{}
	mi := &file_client_room_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameEndInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameEndInfo) ProtoMessage() {}

func (x *TexasGameEndInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameEndInfo.ProtoReflect.Descriptor instead.
func (*TexasGameEndInfo) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{19}
}

func (x *TexasGameEndInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGameEndInfo) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasGameEndInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasGameEndInfo) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *TexasGameEndInfo) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *TexasGameEndInfo) GetHands() []uint32 {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *TexasGameEndInfo) GetBests() []uint32 {
	if x != nil {
		return x.Bests
	}
	return nil
}

// EVENT_BET
type TexasBetEventNotify struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                  // 房间id
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`               // 下注玩家
	Chips         int64                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                  // 玩家手里筹码
	NextChairId   uint32                 `protobuf:"varint,4,opt,name=next_chair_id,json=nextChairId,proto3" json:"next_chair_id,omitempty"` // 下一个下注玩家
	OperateType   int32                  `protobuf:"varint,5,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"`   // 玩家操作类型
	BetChips      int64                  `protobuf:"varint,6,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`            // 玩家下注金额,看牌&弃牌为0
	PotPool       *TexasPotPoolData      `protobuf:"bytes,7,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                // 筹码池
	MinRaise      int64                  `protobuf:"varint,8,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`            // 最小加注
	MaxBetChips   int64                  `protobuf:"varint,9,opt,name=max_bet_chips,json=maxBetChips,proto3" json:"max_bet_chips,omitempty"` // 最大下注筹码
	Duration      int64                  `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`                           // 时间戳
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasBetEventNotify) Reset() {
	*x = TexasBetEventNotify{}
	mi := &file_client_room_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasBetEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasBetEventNotify) ProtoMessage() {}

func (x *TexasBetEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasBetEventNotify.ProtoReflect.Descriptor instead.
func (*TexasBetEventNotify) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{20}
}

func (x *TexasBetEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasBetEventNotify) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasBetEventNotify) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasBetEventNotify) GetNextChairId() uint32 {
	if x != nil {
		return x.NextChairId
	}
	return 0
}

func (x *TexasBetEventNotify) GetOperateType() int32 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

func (x *TexasBetEventNotify) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *TexasBetEventNotify) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasBetEventNotify) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *TexasBetEventNotify) GetMaxBetChips() int64 {
	if x != nil {
		return x.MaxBetChips
	}
	return 0
}

func (x *TexasBetEventNotify) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// -----------------------sng赛事----------------------------------
type SngRoomListReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	MatchType     MatchType              `protobuf:"varint,1,opt,name=match_type,json=matchType,proto3,enum=poker.MatchType" json:"match_type,omitempty"` // 比赛类型
	GameType      GameType               `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty"`     // 游戏类型
	CoinType      CoinType               `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty"`     // 币种类型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngRoomListReq) Reset() {
	*x = SngRoomListReq{}
	mi := &file_client_room_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngRoomListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngRoomListReq) ProtoMessage() {}

func (x *SngRoomListReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngRoomListReq.ProtoReflect.Descriptor instead.
func (*SngRoomListReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{21}
}

func (x *SngRoomListReq) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MatchTypeNone
}

func (x *SngRoomListReq) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *SngRoomListReq) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

type SngRoomInfo struct {
	state          protoimpl.MessageState `xorm:"-"` 
	Title          string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                            // 比赛标题
	MatchType      int32                  `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`                  // 比赛类型
	GameType       int32                  `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`                     // 游戏类型
	Consume        *CoinReward            `protobuf:"bytes,4,opt,name=consume,proto3" json:"consume,omitempty"`                                        // 比赛消耗
	EntryFee       int64                  `protobuf:"varint,5,opt,name=entry_fee,json=entryFee,proto3" json:"entry_fee,omitempty"`                     // 报名费
	Chip           int64                  `protobuf:"varint,6,opt,name=chip,proto3" json:"chip,omitempty"`                                             // 初始筹码
	TableCount     int32                  `protobuf:"varint,7,opt,name=table_count,json=tableCount,proto3" json:"table_count,omitempty"`               // 桌子数量
	MinPlayerCount int32                  `protobuf:"varint,8,opt,name=min_player_count,json=minPlayerCount,proto3" json:"min_player_count,omitempty"` // 最小玩家数量
	PlayerCount    int32                  `protobuf:"varint,9,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`            // 玩家数量
	FirstRewards   []*CoinReward          `protobuf:"bytes,10,rep,name=first_rewards,json=firstRewards,proto3" json:"first_rewards,omitempty"`         // 第一名奖励
	Rewards        []*CoinReward          `protobuf:"bytes,11,rep,name=rewards,proto3" json:"rewards,omitempty"`                                       // 排名奖励列表
	RoomId         uint64                 `protobuf:"varint,12,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                          // 房间ID
	CreateTime     int64                  `protobuf:"varint,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`              // 创建时间
	RoomState      int32                  `protobuf:"varint,14,opt,name=room_state,json=roomState,proto3" json:"room_state,omitempty"`                 // 房间状态
	MatchId        int32                  `protobuf:"varint,15,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                       // match配置id
	unknownFields  protoimpl.UnknownFields `xorm:"-"`
	sizeCache      protoimpl.SizeCache `xorm:"-"`
}

func (x *SngRoomInfo) Reset() {
	*x = SngRoomInfo{}
	mi := &file_client_room_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngRoomInfo) ProtoMessage() {}

func (x *SngRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngRoomInfo.ProtoReflect.Descriptor instead.
func (*SngRoomInfo) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{22}
}

func (x *SngRoomInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SngRoomInfo) GetMatchType() int32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *SngRoomInfo) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *SngRoomInfo) GetConsume() *CoinReward {
	if x != nil {
		return x.Consume
	}
	return nil
}

func (x *SngRoomInfo) GetEntryFee() int64 {
	if x != nil {
		return x.EntryFee
	}
	return 0
}

func (x *SngRoomInfo) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *SngRoomInfo) GetTableCount() int32 {
	if x != nil {
		return x.TableCount
	}
	return 0
}

func (x *SngRoomInfo) GetMinPlayerCount() int32 {
	if x != nil {
		return x.MinPlayerCount
	}
	return 0
}

func (x *SngRoomInfo) GetPlayerCount() int32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *SngRoomInfo) GetFirstRewards() []*CoinReward {
	if x != nil {
		return x.FirstRewards
	}
	return nil
}

func (x *SngRoomInfo) GetRewards() []*CoinReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *SngRoomInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SngRoomInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SngRoomInfo) GetRoomState() int32 {
	if x != nil {
		return x.RoomState
	}
	return 0
}

func (x *SngRoomInfo) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type SngRoomListRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomList      []*SngRoomInfo         `protobuf:"bytes,2,rep,name=room_list,json=roomList,proto3" json:"room_list,omitempty"` // 比赛房间列表
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngRoomListRsp) Reset() {
	*x = SngRoomListRsp{}
	mi := &file_client_room_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngRoomListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngRoomListRsp) ProtoMessage() {}

func (x *SngRoomListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngRoomListRsp.ProtoReflect.Descriptor instead.
func (*SngRoomListRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{23}
}

func (x *SngRoomListRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SngRoomListRsp) GetRoomList() []*SngRoomInfo {
	if x != nil {
		return x.RoomList
	}
	return nil
}

// 加入比赛请求
type SngJoinRoomReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` // match配置id
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngJoinRoomReq) Reset() {
	*x = SngJoinRoomReq{}
	mi := &file_client_room_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngJoinRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngJoinRoomReq) ProtoMessage() {}

func (x *SngJoinRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngJoinRoomReq.ProtoReflect.Descriptor instead.
func (*SngJoinRoomReq) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{24}
}

func (x *SngJoinRoomReq) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type SngJoinRoomRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 房间ID
	Chip          int64                  `protobuf:"varint,3,opt,name=chip,proto3" json:"chip,omitempty"`                   // 玩家初始筹码
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *SngJoinRoomRsp) Reset() {
	*x = SngJoinRoomRsp{}
	mi := &file_client_room_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SngJoinRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SngJoinRoomRsp) ProtoMessage() {}

func (x *SngJoinRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SngJoinRoomRsp.ProtoReflect.Descriptor instead.
func (*SngJoinRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_room_proto_rawDescGZIP(), []int{25}
}

func (x *SngJoinRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SngJoinRoomRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SngJoinRoomRsp) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

var File_client_room_proto protoreflect.FileDescriptor

var file_client_room_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x03, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67,
	0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69,
	0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52,
	0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x50, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a,
	0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x51, 0x75, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x51, 0x75, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x22, 0x66,
	0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x69,
	0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0x69, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x53,
	0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x22, 0x45, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x55,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x42, 0x75, 0x79, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d,
	0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x52, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a,
	0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x44, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68,
	0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x44, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0x43, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x64, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x10, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x44, 0x65, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x73,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x43, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50,
	0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc2, 0x01, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x03, 0x0a, 0x14, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x62, 0x69, 0x67, 0x43, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x62,
	0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6f, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x61, 0x73, 0x42, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x53, 0x6e,
	0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x84, 0x04, 0x0a, 0x0b, 0x53, 0x6e,
	0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x0e, 0x53, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x53, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0e, 0x53, 0x6e, 0x67, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x0e, 0x53, 0x6e, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_client_room_proto_rawDescOnce sync.Once
	file_client_room_proto_rawDescData []byte
)

func file_client_room_proto_rawDescGZIP() []byte {
	file_client_room_proto_rawDescOnce.Do(func() {
		file_client_room_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_room_proto_rawDesc), len(file_client_room_proto_rawDesc)))
	})
	return file_client_room_proto_rawDescData
}

var file_client_room_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_client_room_proto_goTypes = []any{
	(*TexasJoinRoomReq)(nil),       // 0: poker.TexasJoinRoomReq
	(*TexasRoomInfo)(nil),          // 1: poker.TexasRoomInfo
	(*TexasJoinRoomRsp)(nil),       // 2: poker.TexasJoinRoomRsp
	(*TexasQuitRoomReq)(nil),       // 3: poker.TexasQuitRoomReq
	(*TexasQuitRoomRsp)(nil),       // 4: poker.TexasQuitRoomRsp
	(*TexasSitDownReq)(nil),        // 5: poker.TexasSitDownReq
	(*TexasSitDownRsp)(nil),        // 6: poker.TexasSitDownRsp
	(*TexasStandUpReq)(nil),        // 7: poker.TexasStandUpReq
	(*TexasStandUpRsp)(nil),        // 8: poker.TexasStandUpRsp
	(*TexasBuyInReq)(nil),          // 9: poker.TexasBuyInReq
	(*TexasBuyInRsp)(nil),          // 10: poker.TexasBuyInRsp
	(*TexasDoBetReq)(nil),          // 11: poker.TexasDoBetReq
	(*TexasDoBetRsp)(nil),          // 12: poker.TexasDoBetRsp
	(*TexasGameReportReq)(nil),     // 13: poker.TexasGameReportReq
	(*TexasGameReportRsp)(nil),     // 14: poker.TexasGameReportRsp
	(*TexasEventNotify)(nil),       // 15: poker.TexasEventNotify
	(*TexasDealEventNotify)(nil),   // 16: poker.TexasDealEventNotify
	(*TexasPlayerEventNotify)(nil), // 17: poker.TexasPlayerEventNotify
	(*TexasGameEventNotify)(nil),   // 18: poker.TexasGameEventNotify
	(*TexasGameEndInfo)(nil),       // 19: poker.TexasGameEndInfo
	(*TexasBetEventNotify)(nil),    // 20: poker.TexasBetEventNotify
	(*SngRoomListReq)(nil),         // 21: poker.SngRoomListReq
	(*SngRoomInfo)(nil),            // 22: poker.SngRoomInfo
	(*SngRoomListRsp)(nil),         // 23: poker.SngRoomListRsp
	(*SngJoinRoomReq)(nil),         // 24: poker.SngJoinRoomReq
	(*SngJoinRoomRsp)(nil),         // 25: poker.SngJoinRoomRsp
	nil,                            // 26: poker.TexasJoinRoomRsp.PlayerInfoEntry
	(MatchType)(0),                 // 27: poker.MatchType
	(*PlayerInfo)(nil),             // 28: poker.PlayerInfo
	(*RspHead)(nil),                // 29: poker.RspHead
	(*TexasTableData)(nil),         // 30: poker.TexasTableData
	(CoinType)(0),                  // 31: poker.CoinType
	(*TexasGameReport)(nil),        // 32: poker.TexasGameReport
	(TexasEventType)(0),            // 33: poker.TexasEventType
	(*TexasPotPoolData)(nil),       // 34: poker.TexasPotPoolData
	(*TexasPlayerData)(nil),        // 35: poker.TexasPlayerData
	(GameType)(0),                  // 36: poker.GameType
	(*CoinReward)(nil),             // 37: poker.CoinReward
}
var file_client_room_proto_depIdxs = []int32{
	27, // 0: poker.TexasJoinRoomReq.match_type:type_name -> poker.MatchType
	28, // 1: poker.TexasJoinRoomReq.player_info:type_name -> poker.PlayerInfo
	29, // 2: poker.TexasJoinRoomRsp.head:type_name -> poker.RspHead
	1,  // 3: poker.TexasJoinRoomRsp.room_info:type_name -> poker.TexasRoomInfo
	30, // 4: poker.TexasJoinRoomRsp.table_info:type_name -> poker.TexasTableData
	26, // 5: poker.TexasJoinRoomRsp.player_info:type_name -> poker.TexasJoinRoomRsp.PlayerInfoEntry
	29, // 6: poker.TexasQuitRoomRsp.head:type_name -> poker.RspHead
	31, // 7: poker.TexasQuitRoomRsp.coin_type:type_name -> poker.CoinType
	29, // 8: poker.TexasSitDownRsp.head:type_name -> poker.RspHead
	29, // 9: poker.TexasStandUpRsp.head:type_name -> poker.RspHead
	29, // 10: poker.TexasBuyInRsp.head:type_name -> poker.RspHead
	29, // 11: poker.TexasDoBetRsp.head:type_name -> poker.RspHead
	29, // 12: poker.TexasGameReportRsp.head:type_name -> poker.RspHead
	32, // 13: poker.TexasGameReportRsp.data:type_name -> poker.TexasGameReport
	33, // 14: poker.TexasEventNotify.Event:type_name -> poker.TexasEventType
	34, // 15: poker.TexasDealEventNotify.pot_pool:type_name -> poker.TexasPotPoolData
	35, // 16: poker.TexasPlayerEventNotify.player:type_name -> poker.TexasPlayerData
	28, // 17: poker.TexasPlayerEventNotify.player_info:type_name -> poker.PlayerInfo
	34, // 18: poker.TexasGameEventNotify.pot_pool:type_name -> poker.TexasPotPoolData
	19, // 19: poker.TexasGameEventNotify.end_info:type_name -> poker.TexasGameEndInfo
	34, // 20: poker.TexasBetEventNotify.pot_pool:type_name -> poker.TexasPotPoolData
	27, // 21: poker.SngRoomListReq.match_type:type_name -> poker.MatchType
	36, // 22: poker.SngRoomListReq.game_type:type_name -> poker.GameType
	31, // 23: poker.SngRoomListReq.coin_type:type_name -> poker.CoinType
	37, // 24: poker.SngRoomInfo.consume:type_name -> poker.CoinReward
	37, // 25: poker.SngRoomInfo.first_rewards:type_name -> poker.CoinReward
	37, // 26: poker.SngRoomInfo.rewards:type_name -> poker.CoinReward
	29, // 27: poker.SngRoomListRsp.head:type_name -> poker.RspHead
	22, // 28: poker.SngRoomListRsp.room_list:type_name -> poker.SngRoomInfo
	29, // 29: poker.SngJoinRoomRsp.head:type_name -> poker.RspHead
	28, // 30: poker.TexasJoinRoomRsp.PlayerInfoEntry.value:type_name -> poker.PlayerInfo
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_client_room_proto_init() }
func file_client_room_proto_init() {
	if File_client_room_proto != nil {
		return
	}
	file_packet_proto_init()
	file_database_proto_init()
	file_report_proto_init()
	file_global_enum_proto_init()
	file_global_enum_cfg_proto_init()
	file_table_cfg_proto_init()
	file_player_data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_room_proto_rawDesc), len(file_client_room_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_room_proto_goTypes,
		DependencyIndexes: file_client_room_proto_depIdxs,
		MessageInfos:      file_client_room_proto_msgTypes,
	}.Build()
	File_client_room_proto = out.File
	file_client_room_proto_goTypes = nil
	file_client_room_proto_depIdxs = nil
}
