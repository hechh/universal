syntax = "proto3";
package poker;

option go_package = "./pb";

import "packet.proto";
import "table_cfg.proto";
import "global_enum.proto";
import "player_data.proto";

// RummyPlayerActionType 玩家行为类型
enum RummyPlayerActionType {
  Rummy_PLAYER_ACTION_ONLINE     = 0;  // 玩家上线
  Rummy_PLAYER_ACTION_OFFLINE    = 1;  // 玩家离线
  Rummy_PLAYER_ACTION_FINISH_ERR = 2;  // 炸胡
  Rummy_PLAYER_ACTION_ELIMINATED = 3;  // 淘汰
  Rummy_PLAYER_ACTION_GIVEUP     = 4;  // 超时没有操作 被系统自动踢出
}

// RummyPlayState 玩牌状态
enum RummyPlayState {
  Rummy_PLAYSTATE_INIT       = 0;  // 玩家初始状态
  Rummy_PLAYSTATE_PLAY       = 1;  // 玩家就绪状态
  Rummy_PLAYSTATE_GIVEUP     = 2;  // 投降状态
  Rummy_PLAYSTATE_WIN        = 3;  // 赢牌状态
  Rummy_PLAYSTATE_LOSE       = 4;  // 输牌状态
  Rummy_PLAYSTATE_ELIMINATED = 5;  // 淘汰状态
  Rummy_PLAYSTATE_READY      = 6;  // 预备状态 滚场时检测余额通过转正式状态
}

// rummy 玩家健康状态
enum RummyPlayHealth {
  Rummy_NORMAL  = 0;  //正常
  Rummy_QUIT    = 1;  //玩家主动退出游戏
  Rummy_KICK    = 2;  //gm干预t出
  Rummy_OFFLINE = 3;  //网关检测掉线
  Rummy_TIMEOUT = 4;  //玩家长时间不动 投降并移除游戏
}

// RummyOprType 操作牌类型
enum RummyOprType {
  Rummy_OPR_TYPE_UNDEFINE   = 0;  //站位
  Rummy_OPR_TYPE_CHI        = 1;  // 吃明牌（别人打的牌）
  Rummy_OPR_TYPE_GRAB       = 2;  // 抓暗牌
  Rummy_OPR_TYPE_GIVEUP     = 3;  // 投降
  Rummy_OPR_TYPE_OUT        = 4;  // 出牌
  Rummy_OPR_TYPE_FIX        = 5;  // 确认牌组 赢家 胡牌
  Rummy_OPR_TYPE_FIX_FINISH = 6;  // 确认牌组 胡牌完成
  Rummy_OPR_TYPE_LOSE       = 7;  // 弃牌 (玩家超时行为 归还抽取明牌 转为抽暗牌打暗牌)
}

// RummyGroupType 牌组类型
enum RummyGroupType {
  Rummy_GROUP_TYPE_NONE     = 0;
  Rummy_GROUP_TYPE_INVALID  = 1;  //  无效牌
  Rummy_GROUP_TYPE_PURE_SEQ = 2;  //  纯顺子
  Rummy_GROUP_TYPE_SEQ      = 3;  // 癞子顺子
  Rummy_GROUP_TYPE_SET      = 4;  // 3张或4张
}

// RummyLeaveType 玩家离开类型
enum RummyLeaveType {
  Rummy_LEAVE_TYPE_QUIT = 0;  //  正常退出
  Rummy_LEAVE_TYPE_KICK = 1;  // 被踢出
}

// RummyCardGroup rummy牌组
message RummyCardGroup {
  repeated uint32 cards      = 1;  // 牌
  RummyGroupType  group_type = 2;  // 牌组类型
}

// RummyZhuangCard 定庄时给玩家发的牌
message RummyZhuangCard {
  uint64 player_id = 1;  // 玩家id
  uint32 card      = 2;  // 定庄发给玩家的牌
}

// RummySettlePlayerInfo 结算玩家账单
message RummySettlePlayerInfo {
  uint64                  player_id  = 1;  // 玩家ID
  repeated RummyCardGroup card_group = 2;  // 玩家手牌牌组
  int64                   score      = 3;  // 手牌得分
  int64                   coin       = 4;  // 输赢金币=hand_score*底分（points） 或者总积分（pool,deal） ############
  RummyPlayState          state      = 5;  // 状态
  string                  nick_name  = 6;  // 玩家昵称
  int64                   bonus_cash = 7;  // 玩家余额
}

// RummyTotalSettlePlayer 总结算玩家账单
message RummyTotalSettlePlayer {
  uint64         player_id   = 1;  // 玩家ID
  string         nick_name   = 2;  // 玩家昵称
  string         pic_url     = 3;  // 玩家昵称
  RummyPlayState state       = 4;  // 状态
  int64          total_score = 5;  // 总得分
  string         prize       = 6;  // 赢家的奖金 #########
  string         bonus_cash  = 7;  // bonus-->cash数
  string         vip_points  = 8;  // 得到的vip点数
  string         new_icon    = 9;  // 玩家头像
}

// RummyScoreBoardPlayer 积分板玩家
message RummyScoreBoardPlayer {
  uint64 player_id = 1;  // 玩家ID
  string nick_name = 2;  // 玩家昵称
}

// RummyPlayerScore 玩家积分
message RummyPlayerScore {
  uint64 player_id = 1;  // 玩家ID
  int64  score     = 2;  // 本局分数
}

// RummyRoundSettle 每轮结算
message RummyRoundSettle {
  int32                     round  = 1;  // 当前局ID
  repeated RummyPlayerScore scores = 2;  // 玩家积分列表
}

// RummyRoomPlayer 游戏中的玩家公开信息
message RummyRoomPlayer {
  uint64          player_id   = 1;  // 玩家id
  string          player_nick = 2;  // 玩家昵称
  string          pic_url     = 3;  // 玩家头像
  RummyPlayState  state       = 4;
  RummyPlayHealth health      = 5;
  uint64          coin        = 6;  // 金币值(points)或者总积分（pool，deal) ##################
  uint32          seat        = 7;  // 位置ID
  int32           vip         = 8;  // VIP等级
  string          location    = 9;  // 玩家所在地区
  RummyPlayerRumtime private  = 10;
  uint32 timeout_count        = 11;  //玩家连续超时次数
  int64          ready_timeout = 12;  // 玩家准备超时时间
}

//@pbtool:hash|poker|room|RoomId@uint64|#rummy房间数据
message RummyRoomData {                // RummyRoom 存档数据
  GameState          stage       = 1;  // 玩牌阶段
  uint64             room_id     = 2;  // 桌子ID
  uint32             game_id     = 3;  //游戏id 联动配置
  string             room_name   = 5;  // 桌子名称
  RummyCommon        common      = 6;
  MatchParam         match       = 7;   // 比赛局数信息
  RummyMachineConfig machine_cfg = 8;   // 状态机配置
  RummyConfig        room_cfg    = 10;  // 桌子配置
  RummyPrivate private           = 11;  // 暗牌堆
}

//玩家重连信息
message RummyRoomPubData {
  GameState   stage     = 1;  // 玩牌阶段
  uint64      room_id   = 2;  // 房间ID
  uint32      game_id   = 3;  //游戏id 联动配置
  string      room_name = 5;  // 桌子名称
  RummyCommon common    = 6;
  MatchParam  match     = 7;   // 比赛局数信息
  RummyConfig room_cfg  = 10;  // 桌子配置
}

message RummyPrivate {
  uint32          card_idx = 1;  //当前卡组滑动标志
  repeated uint32 cards    = 2;  //暗牌堆
}

// RummyCommon 运行时共有属性
message RummyCommon {
  map<uint32, uint64>          seats       = 1;   //座位和玩家关系
  map<uint64, RummyRoomPlayer> players     = 3;   // 玩家公示信息
  repeated uint64              player_ids  = 4;   //对战玩家id
  uint32                       ghost_card  = 5;   // 癞子牌
  uint32                       show_card   = 6;   // 最后一张明牌
  uint64                       zhuang_id   = 7;   // 庄家id
  int64                        time_out    = 8;   // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
  uint32                       fix_card    = 9;   // 赢家的完成牌
  uint32                       show_card2  = 10;  // 最后一张明牌2
  int64                        create_time = 11;  // 房间创建时间
  uint64                       winner_id   = 12;
  bool                         game_finish = 13;
  RummyOprPlayer               opr_player  = 14;
  repeated uint32              empty_seats = 15;
  int64                        total_time  = 16;
}

message RummyOprPlayer {  // 游玩阶段流转状态
  RummyRoundStep  step              = 1;
  uint64          cur_opr_player_id = 2;
  uint32          opr_cur_id        = 3;  //playerids key
  uint64          prev_out_uid      = 4;
  bool            is_eat            = 5;
  int64           score_pool        = 6;  //奖池
  uint32          round             = 7;  //当前回合
  uint64          zhuang_id         = 8;  // 庄家id
  repeated uint32 out_cards         = 9;  // 明牌堆
}

// Rummy玩家私有数据
message RummyPlayerRumtime {
  bool                    is_grab_card = 3;  // 当前回合是否抓暗牌
  repeated uint32         hand_cards   = 4;  //手牌
  repeated RummyCardGroup card_group   = 5;  //牌序
  int64                   Score        = 6;
  uint32                  prev_card    = 7;  //上一抽
  repeated uint32         out_cards    = 8;  // 个人出牌历史
}

message MatchParam {
  uint32 match      = 1;  //当前比赛多少局
  int64  start_time = 2;  //当局比赛开始时间
  int64  end_time   = 3;  // 当局比赛结束时间
}

// RummyEnterDeskReq 进入桌子或重连请求
message RummyJoinRoomReq {
  uint64     room_id     = 1;  // 房间id
  PlayerInfo player_info = 2;  // 玩家信息
  bool       is_change   = 3;  // 换桌请求
}

// RummyJoinRoomReq 进入桌子或重连响应
message RummyJoinRoomRsp {
  RspHead          head         = 1;  //请求结果信息
  uint64           room_id      = 2;  // 进入的房间桌子ID
  RummyRoomPubData room_info    = 3;  // 返回桌子信息
  bool             is_reconnect = 4;  // 是否是重连
  int64            gave_score   = 5;  // 投降分数
}

// 通知消息
message RummyEventNotify {
  RummyEventType Event   = 1;
  bytes          Content = 2;
}

// RummyEnterDeskNtf 玩家进入桌子通知
message RummyEnterDeskNtf {
  uint64          room_id = 1;  // 桌子ID
  RummyRoomPlayer player  = 2;  // 玩家信息
}

// RummyQuitRoomReq 离开的房间ID
message RummyQuitRoomReq {
  uint64 room_id = 1;  // 离开的房间ID
  bool is_change = 2;  // 换桌请求
}

// RummyQuitRoomRsp 离开房间响应
message RummyQuitRoomRsp {
  RspHead head    = 1;  //请求结果信息
  uint64  room_id = 2;  // 离开的房间ID
}

// RummyQuitRoomNtf 玩家离开桌子通知
message RummyQuitRoomNtf {
  uint64         room_id    = 1;  // 房间ID
  uint64         player_id  = 2;  // 玩家id
  RummyLeaveType leave_type = 3;  // 玩家离开类型
}

// RummyReadyStartGameNtf Rummy游戏开始倒计时通知
message RummyReadyStartGameNtf {
  uint64 room_id    = 1;  // 房间ID
  int64  time_out   = 2;  // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
  int64  total_time = 3;
}

// RummyStartGameNtf Rummy游戏开始通知（开局直接发牌）
message RummyStartGameNtf {
  uint64 room_id   = 1;  // 房间ID
  uint64 zhuang_id = 2;  // 庄玩家id
  uint32 cur_match = 3;  // 当前局
}

// RummySetZhuangNtf 发定庄通知
message RummySetZhuangNtf {
  uint64                   room_id    = 1;  // 桌子ID
  repeated RummyZhuangCard cards      = 2;  // 定庄时给玩家发的牌，每人一张牌
  uint64                   zhuang_id  = 3;  // 庄玩家id
  uint64                   time_out   = 4;  // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
  int64                    total_time = 5;
}

// RummyDealNtf 发手牌通知
message RummyDealNtf {
  uint64                  room_id      = 1;  // 桌子ID
  repeated uint32         hand_cards   = 2;  // 玩家本人手牌，13张，仅本人能看到牌
  uint32                  ghost_card   = 3;  // 癞子牌
  uint32                  show_card    = 4;  // 明牌
  int64                   time_out     = 5;  // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
  repeated RummyCardGroup groups       = 6;  // 牌组合
  int64                   groups_score = 7;  // 牌组分数
  uint32                  show_card2   = 8;  // 最后一张明牌2
  int64                   total_time   = 9;
}

// 出牌之前，必须先抓牌或弃牌，可以抓明牌（别人出的牌），暗牌（牌墙）。抓牌后，可以出牌或胡牌。
// RummyPlayCardNtf 玩牌通知
message RummyPlayCardNtf {
  uint64 room_id    = 1;  // 房间ID
  uint64 player_id  = 2;  // 当前玩牌玩家id
  int32  play_step  = 3;  // Step 打牌阶段： 0=不可操作。1=摸牌，吃牌，投降。 2=出牌，胡牌。 3=结束状态。
  bool   is_chi     = 4;  //是否吃牌
  int64  time_out   = 5;  // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
  int64  total_time = 6;  // 总时间。用于玩牌操作，单位：秒
  int64  gave_score = 8;  // 投降分数
}

// RummyOprCardReq 操作牌请求
message RummyOprCardReq {
  uint64       room_id  = 1;  // 桌子ID
  RummyOprType opr_type = 2;  // 操作类型
  uint32       opr_card = 3;  // 出牌和结束牌时！=0，抓牌，弃牌，吃牌=0.
  repeated RummyCardGroup groups       = 4;  // 牌组合
}

// RummyOprCardRsp 操作牌响应
message RummyOprCardRsp {
  RspHead      head      = 1;  //请求结果信息
  uint64       room_id   = 2;  // 桌子ID
  uint32       opr_card  = 3;  // 抓牌，吃牌得到的牌
  int32        play_step = 4;  // Step 打牌阶段： 0=不可操作。1=摸牌，吃牌，投降。 2=出牌，胡牌。 3=结束状态。
  bool         is_eat    = 5;  // 是否吃明牌：true表示可以抓明牌，false表示只能抓暗牌。
  RummyOprType opr_type  = 6;  // 操作类型

  repeated RummyCardGroup groups       = 7;  // 牌组合
  int64                   groups_score = 8;  // 牌组分数
}

// RummyOprCardNtf 操作牌通知
message RummyOprCardNtf {
  uint64       room_id   = 1;  // 桌子ID
  uint64       player_id = 2;  // 当前玩牌玩家id
  RummyOprType opr_type  = 3;  // 操作类型
  uint32       opr_card  = 4;  // 出牌，结束牌，吃牌时！=0，抓牌，弃牌=0.
  uint32       show_card = 5;  // 操作后的明牌： =0表示没有明牌。（比如第1张明牌，别吃后，就没有明牌了）

  uint32 show_card2 = 7;  // 明牌2
  int64  score_poll = 8;  // 奖池分数
  uint32 draw_count = 9;  //可抽牌数
}

// RummyFixCardReq 确定调整卡组请求，服务器对上报的牌组进行校验
message RummyFixCardReq {
  uint64                  room_id  = 1;  // 桌子ID
  repeated RummyCardGroup groups   = 2;  // 牌组合
  int64                   score    = 3;  // 牌桌分数
  uint32                  opr_card = 4;  // 确认牌打出卡牌 胡牌前必须打出
}

// RummyFixCardRsp 确定调整卡组响应
message RummyFixCardRsp {
  RspHead                 head   = 1;  //请求结果信息
  int64                   Score  = 2;  // 新卡组分数
  repeated RummyCardGroup groups = 3;  // 牌组合
}

// RummyFixCardPlayersNtf 确认牌组玩家列表通知
message RummyFixCardPlayersNtf {
  uint64          room_id       = 1;  // 房间ID
  int64           time_out      = 2;  // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
  repeated uint64 players       = 4;  // 正在确认牌组的玩家列表
  uint64          win_id        = 5;  // 赢家ID
  uint64          cur_player_id = 7;  // 当前已确定玩家
  int64           total_time    = 8;
}

// RummySettleNtf 游戏结算通知
message RummySettleNtf {
  uint64                         room_id    = 1;  // 桌子ID
  repeated RummySettlePlayerInfo players    = 2;  // 玩家手牌和结算账单
  int64                          time_out   = 3;  // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
  int64                          rake       = 4;  // 抽水金额
  uint32                         ghost_card = 5;  // 癞子牌
  int64                          total_time = 6;
}

// RummyPlayerActionNtf 玩家行为通知
message RummyPlayerActionNtf {
  uint64                room_id   = 1;  // 桌子ID
  uint64                player_id = 2;  // 行为玩家ID
  RummyPlayerActionType type      = 3;  // 行为类型ID
  uint32                opr_card  = 4;  // 出牌
}

// RummyGiveUpNtf 玩家投降通知
message RummyGiveUpNtf {
  uint64 room_id   = 1;  // 桌子ID
  uint64 player_id = 2;  // 行为玩家ID
  int64  score     = 3;  // 弃牌分数
  bool   is_finish = 4;  // 是否是完成牌失败导致的弃牌
}

// RummySaveCardGroupReq 保存牌组请求 任意时候都可以保存手牌 但是在胡牌后只能最后一次调整并保存
message RummySaveCardGroupReq {
  uint64                  room_id = 1;  // 桌子ID
  repeated RummyCardGroup groups  = 2;  // 牌组合
  bool                    last_req= 3;  // 最后确认
}

// RummySaveCardGroupRsp 保存牌组响应
message RummySaveCardGroupRsp {
  RspHead                 head    = 1;  //请求结果信息
  uint64                  room_id = 2;  // 桌子ID
  int64                   score   = 3;  //手牌积分 在胡牌后确认阶段会变成负数
  repeated RummyCardGroup groups  = 4;  // 牌组合
}

// RummyGetScoreBoardReq 获取积分请求
message RummyGetScoreBoardReq {
  uint64 room_id = 1;  // 桌子ID
}

// RummyGetScoreBoardRsp 获取积分响应
message RummyGetScoreBoardRsp {
  RspHead                        head       = 1;  // 请求结果信息
  uint64                         room_id    = 2;  // 桌子ID
  repeated RummyScoreBoardPlayer players    = 3;  // 玩家列表
  repeated RummyRoundSettle      rounds     = 4;  // 每局结算
  int64                          init_score = 5;  // 初始积分(deals)
}

// RummyGetLastSettleReq 获取上局结算请求
message RummyGetLastSettleReq {
  uint64 room_id = 1;  // 桌子ID
}

// RummyGetScoreBoardRsp 获取上局结算响应
message RummyGetLastSettleRsp {
  RspHead                        head       = 1;  // 请求结果信息
  uint64                         room_id    = 2;  // 桌子ID
  repeated RummySettlePlayerInfo players    = 3;  // 玩家手牌和结算账单
  uint32                         ghost_card = 4;  // 癞子牌
}

// RummyPauseDeskMsgReq 暂停桌子消息请求
message RummyPauseDeskMsgReq {
  uint64 room_id = 1;  // 桌子ID
}

// RummyStopDeskMsgRsp 暂停桌子消息响应
message RummyPauseDeskMsgRsp {
  RspHead head    = 1;  // 请求结果信息
  uint64  room_id = 2;  // 桌子ID
}

// PlayerOutCards
message PlayerOutCards {
  uint64          player_id = 1;  // 玩家
  string          nick_name = 2;  // 玩家昵称
  repeated uint32 cards     = 3;  // 出牌列表
}

// RummyGetOutCardsReq 获取出牌列表请求
message RummyGetOutCardsReq {
  uint64 room_id = 1;  // 进入的桌子ID
}

// RummyGetOutCardsRsp 获取出牌列表请求响应
message RummyGetOutCardsRsp {
  RspHead         head      = 1;  //请求结果信息
  uint64          room_id   = 2;  // 进入的桌子ID
  repeated uint32 out_cards = 3;  // 出牌列表
}

message RummyReadyRoomReq {
  uint64 room_id = 1;  // 桌子ID
}

message RummyReadyRoomRsp {
  RspHead   head  = 1;  //请求结果信息
  GameState stage = 2;  //当前游戏阶段
  RummyRoomPubData room_info    = 3;  // 返回桌子信息
}

// RummyReadyRoomNtf 准备通知
message RummyReadyRoomNtf {
  uint64          room_id   = 1;  // 房间ID
  repeated uint64 player_id = 2;  //就绪玩家id
}

// RummyShuffleNtf 暗牌堆摸空触发洗牌
message RummyShuffleNtf {
  uint64 room_id    = 1;  // 房间ID
  uint32 draw_count = 2;  // 剩余牌数
  uint32 show_card  = 3;  // 最后一张明牌
}