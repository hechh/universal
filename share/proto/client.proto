syntax = "proto3";
import "common.proto";
import "playerStruct.proto";
option  go_package = "../pb";  // 声明生成的 go 文件所属的包
package client;

/*******************************************登录开始**********************************************************/
// 登陆请求
message LoginRequest {
    common.IPacket PacketHead  = 1;  // 包头
    string         AccountName = 2;  // 账号名
    string         TokenKey    = 3;  // 秘钥 账号名称+accountid的+token md5
}

// 登陆返回
message LoginResponse {
    common.IPacket PacketHead = 1;  // 包头
    uint64         Time       = 2;  // 当前时间戳
}

// 心跳包
message HeartbeatRequest {
    common.IPacket PacketHead = 1;  // 包头
    uint64         Time       = 2;  // 当前时间戳
}

// 心跳包返回
message HeartbeatResponse {
    common.IPacket PacketHead = 1;  // 包头
    uint64         SendTime   = 2;  // 发送时间戳
    uint64         RecvTime   = 3;  // 收到时间戳
    uint64         CurTime    = 4;  // 当前时间戳
}

// 玩家所有数据返回
message AllPlayerInfoNotify {
    common.IPacket            PacketHead = 1;  // 包头
    uint32                    Mark       = 2;  // 位标记 PlayerDataType 0表示发送完成
    playerStruct.PBPlayerData PlayerData = 3;  // 所有玩家数据
}

// 通用返回
message CommonNotify {
    common.IPacket PacketHead = 1;  // 包头
}

// 协议名返回
message ProtocolNameNotify {
    common.IPacket PacketHead = 1;  // 包头
    string         Name       = 2;  // 名称
    uint32         ProtocolId = 3;  // 协议ID
}
// 广告请求
message AdvertRequest {
    common.IPacket PacketHead = 1;  // 包头
    uint32         AdvestType = 2;  // 广告类型
}
// 广告返回
message AdvertResponse {
    common.IPacket            PacketHead = 1;  // 包头
    playerStruct.PBAdvertInfo AdvestInfo = 2;  // 广告数据
}
// 广告通知
message AdvertNotify {
    common.IPacket PacketHead                     = 1;  // 包头
    repeated playerStruct.PBAdvertInfo AdvertList = 2;  // 广告信息
}

// 客户端json返回
message ClientJsonNotify {
    common.IPacket PacketHead                 = 1;  // 包头
    repeated playerStruct.PBJsonInfo JsonList = 2;  // json内容
}
// 广告弹出通知
message EjectAdvertNotify {
    common.IPacket PacketHead                     = 1;  // 包头
    playerStruct.PBEjectAdvertInfo EjectAdvertInfo = 2;  // 广告弹出信息
}
// 广告弹出请求
message EjectAdvertRequest {
    common.IPacket PacketHead = 1;  // 包头
    uint32         Id = 2;  // 弹出id
}
// 广告弹出返回
message EjectAdvertResponse {
    common.IPacket            PacketHead = 1;  // 包头
    playerStruct.PBEjectAdvertInfo EjectAdvertInfo = 2;  // 广告弹出信息
}
/*******************************************登录结束**********************************************************/

/*******************************************基本信息开始**********************************************************/
// 玩家基本信息通用返回
message PlayerUpdateKvNotify {
    common.IPacket PacketHead                    = 1;  // 包头
    repeated playerStruct.PBStringInt64 ListInfo = 2;  // 多个数据返回
}

// 系统开启ID通知
message SystemOpenNotify {
    common.IPacket  PacketHead    = 1;  // 包头
    repeated uint32 SystemOpenIds = 2;  // 系统开启ID
}
// 系统开启奖励领取请求
message SystemOpenPrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 开关ID
}
// 系统开启奖励领取返回
message SystemOpenPrizeResponse {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 开关ID
}
// gm命令请求
message GmFuncRequest {
    common.IPacket  PacketHead = 1;
    uint32          GmType     = 2;  // gm类型
    repeated string Param      = 3;  // 参数数据
}
// gm命令返回
message GmFuncResponse {
    common.IPacket PacketHead = 1;
}

// 恭喜获得通用界面
message CommonPrizeNotify {
    common.IPacket     PacketHead                = 1;  // 包头
    common.EmDoingType DoingType                 = 2;  // 原因
    repeated playerStruct.PBAddItemData ItemInfo = 3;  // 道具信息
}

// 跨时间通知
message PassTimeNotify {
    common.IPacket PacketHead = 1;  // 包头
    bool           IsDay      = 2;  // 是否跨天
    bool           IsWeek     = 3;  // 是否跨周
    bool           IsMonth    = 4;  // 是否跨月
    uint64         CurTime    = 5;  // 当前时间戳
}
// 公告请求
message NoticeRequest {
    common.IPacket PacketHead = 1;
}
// 公告返回
message NoticeResponse {
    common.IPacket PacketHead                 = 1;
    repeated playerStruct.PBNotice NoticeList = 2;  // 公告列表
}
// 公告弹窗
message NoticeNotify {
    common.IPacket        PacketHead = 1;
    bool                  IsNew      = 2;  // 是否新的
    playerStruct.PBNotice Notice     = 3;  // 公告内容
}

// 查看页面请求
message PageOpenRequest {
    common.IPacket PacketHead = 1;
    uint32         PageType   = 2;  // 页面类型
}
// 查看页面返回
message PageOpenResponse {
    common.IPacket PacketHead = 1;
}
/*******************************************基本信息结束**********************************************************/

/*******************************************邮件开始**********************************************************/
// 新增邮件通知
message NewMailNotify {
    common.IPacket      PacketHead = 1;
    playerStruct.PBMail Mail       = 2;  // 邮件数据
}

// 一键领取邮件请求
message OnekeyAwardMailRequest {
    common.IPacket PacketHead = 1;
}
// 一键领取邮件返回
message OnekeyAwardMailResponse {
    common.IPacket PacketHead          = 1;
    repeated playerStruct.PBMail Mails = 2;  // 邮件数据
}
// 领取邮件请求
message AwardMailRequest {
    common.IPacket PacketHead = 1;
    uint32         MailId     = 2;  // 邮件ID
}

// 领取邮件返回
message AwardMailResponse {
    common.IPacket      PacketHead = 1;
    playerStruct.PBMail Mail       = 2;  // 邮件数据
}
// 一键删除邮件请求
message OnekeyDeleteMailRequest {
    common.IPacket PacketHead = 1;
}
// 一键删除邮件返回
message OnekeyDeleteMailResponse {
    common.IPacket  PacketHead = 1;
    repeated uint32 MailIds    = 2;  // 邮件ID组
}
// 删除邮件请求
message DeleteMailRequest {
    common.IPacket PacketHead = 1;
    uint32         MailId     = 2;  // 邮件ID
}
// 删除邮件返回
message DeleteMailResponse {
    common.IPacket PacketHead = 1;
    uint32         MailId     = 2;  // 邮件ID
}
/*******************************************邮件结束**********************************************************/

/*******************************************道具开始**********************************************************/
// 更新道具通知
message ItemUpdateNotify {
    common.IPacket PacketHead             = 1;
    repeated playerStruct.PBItem ItemList = 2;  // 更新的道具
}
// 道具购买请求
message ItemBuyRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 道具Id
    uint32         Count      = 3;  // 个数
}
// 道具购买返回
message ItemBuyResponse {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 道具Id
    uint32         Count      = 3;  // 使用个数
}
// 道具使用请求
message ItemUseRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 道具Id
    uint32         Count      = 3;  // 使用个数
}

// 道具使用返回
message ItemUseResponse {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 道具Id
    uint32         Count      = 3;  // 使用个数
}
// 道具使用预览请求
message ItemUseShowRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 道具Id
}
// 道具展示数据
message ItemUseShowInfo {
    uint32                 Id   = 1;  // selectId
    playerStruct.PBAddItem Item = 2;  //
}

// 道具使用预览返回
message ItemUseShowResponse {
    common.IPacket           PacketHead = 1;
    uint32                   Id         = 2;  // 道具ID
    repeated ItemUseShowInfo ItemList   = 3;  // 道具展示数据
}

// 道具选择请求
message ItemSelectRequest {
    common.IPacket PacketHead                 = 1;
    uint32         Id                         = 2;  // 道具Id
    repeated playerStruct.PBU32U32 SelectList = 3;  // key：ItemUseShowResponse的id  value:数量
}

// 道具选择返回
message ItemSelectResponse {
    common.IPacket PacketHead                 = 1;
    uint32         Id                         = 2;  // 道具Id
    repeated playerStruct.PBU32U32 SelectList = 3;  // key：ItemUseShowResponse的id  value:数量
}

/*******************************************道具结束**********************************************************/

/*******************************************兑换码开始**********************************************************/
// 兑换码请求
message GiftCodeRequest {
    common.IPacket PacketHead = 1;
    string         Acode      = 2;  // 兑换码
}
// 兑换码返回
message GiftCodeResponse {
    common.IPacket PacketHead = 1;
    string         Acode      = 2;  // 兑换码
}

/*******************************************兑换码开始**********************************************************/

/*******************************************排行榜开始**********************************************************/
// 排行榜请求
message RankRequest {
    common.IPacket PacketHead = 1;
    uint32         RankType   = 2;  // 排行类型
    uint32         Begin      = 3;  // 开始名次
    uint32         End        = 4;  // 结束名次
    uint64         CreateTime = 5;  // game发送gm服务携带的字段信息
}

message RankResponse {
    common.IPacket PacketHead                = 1;
    uint32         RankType                  = 2;  // 排行类型
    uint32         Begin                     = 3;  // 开始名次 1开始
    uint32         End                       = 4;  // 结束名次
    repeated playerStruct.RankInfo RankList  = 5;  // 玩家数据
    playerStruct.RankInfo          SelfInfo  = 6;  // 自己的数据
    int64                          TotalRank = 7;  // 总数据
}

// 领取排名奖励(+ 通用排行榜接口)
message RankRewardRequest {
    common.IPacket     PacketHead              = 1;
    uint32             RankType                = 2;  // 排行类型
    bool               Notify                  = 3;  // 是否需要发送恭喜获得(内部服务节点转发使用)
    common.EmDoingType Doing                   = 4;  // 发放奖励原因(内部服务节点转发使用)
    repeated playerStruct.PBAddItem Rewards    = 5;  // 发放的奖励(内部服务节点转发使用)
    uint64                          CreateTime = 6;  // 时间点(内部服务节点转发使用)
}

// 返回恭喜获得奖励弹框
message RankRewardResponse {
    common.IPacket PacketHead = 1;
}

// 更新排行榜名单
message RankUpdateNotify {
    common.IPacket PacketHead = 1;
    uint32         RankType   = 2;  // 排行类型
    uint64         CreateTime = 3;  // 开启时间点
    string         Member     = 7;  // 待更新成员
    double         Score      = 8;  // 积分
}

/*******************************************排行榜结束**********************************************************/

/*******************************************宝箱系统**********************************************************/
//  开宝箱请求
message BoxOpenRequest {
    common.IPacket PacketHead = 1;
    uint32         ItemID     = 2;
    uint32         ItemNum    = 3;
	uint32         AdvestType = 4;  // 广告类型
}

message BoxOpenResponse {
    common.IPacket PacketHead                    = 1;
    uint32         Score                         = 2;  // 返回积分
    repeated playerStruct.PBAddItemData ItemInfo = 3;  // 道具信息
}

// 进度条领取宝箱请求
message BoxProgressRewardRequest {
    common.IPacket PacketHead = 1;
}

message BoxProgressRewardResponse {
    common.IPacket PacketHead = 1;
    uint32         NeedScore  = 2;  // 所需积分
    uint32         Level      = 3;  // 当前挡位
    uint32         Score      = 4;  // 当前拥有积分
    uint32         Recycle    = 5;  // 轮数
}
/*******************************************宝箱系统结束**********************************************************/

/*******************************************任务协议开始**********************************************************/
// 任务完成请求
message MainTaskFinishRequest {
    common.IPacket PacketHead = 1;
}
// 任务通知返回
message MainTaskNotify {
    common.IPacket               PacketHead = 1;
    playerStruct.PBTaskStageInfo MainTask   = 2;  // 主线任务
}

// 任务完成返回
message MainTaskFinishResponse {
    common.IPacket               PacketHead = 1;
    playerStruct.PBTaskStageInfo MainTask   = 2;  // 主线任务
}

// 每日任务刷新通知
message DailyTaskNotify {
    common.IPacket           PacketHead = 1;
    playerStruct.PBDailyTask DailyTask  = 2;  // 每日任务
}

// 每日任务完成请求
message DailyTaskFinishRequest {
    common.IPacket PacketHead = 1;
    uint32         TaskId     = 2;  // 任务ID
}

// 每日任务完成返回
message DailyTasFinishResponse {
    common.IPacket               PacketHead = 1;
    playerStruct.PBTaskStageInfo Task       = 2;  // 主线任务
    uint32                       Score      = 3;  // 活跃值
}
// 每日任务积分奖励请求
message DailyTaskScorePrizeRequest {
    common.IPacket PacketHead = 1;
}

// 每日任务积分奖励返回
message DailyTaskScorePrizeResponse {
    common.IPacket PacketHead = 1;
    uint32         PrizeScore = 2;  // 领取的活跃值
}

/*******************************************任务协议结束**********************************************************/

/*******************************************客户端数据开始**********************************************************/
// 设置客户端数据请求
message SetClientRequest {
    common.IPacket            PacketHead = 1;
    playerStruct.PBClientData ClientData = 2;
}

// 设置客户端数据返回
message SetClientResponse {
    common.IPacket PacketHead = 1;
}
/*******************************************客户端数据结束**********************************************************/
// 修改头像逻请求
message ChangeAvatarRequest {
    common.IPacket PacketHead = 1;
    uint32         AvatarID   = 2;  // 切换到的头像ID
}

message ChangeAvatarResponse {
    common.IPacket PacketHead = 1;
    uint32         AvatarID   = 2;  // 切换到的头像ID
}

message AvatarNotify {
    common.IPacket PacketHead              = 1;
    repeated playerStruct.PBAvatar Avatars = 2;
}

message AvatarFrameNotify {
    common.IPacket PacketHead                  = 1;
    repeated playerStruct.PBAvatarFrame Frames = 2;
}

// 修改头像框逻请求
message ChangeAvatarFrameRequest {
    common.IPacket PacketHead = 1;
    uint32         FrameID    = 2;  // 切换到的头像框ID
}

message ChangeAvatarFrameResponse {
    common.IPacket PacketHead = 1;
    uint32         FrameID    = 2;  // 切换到的头像框ID
}

// 修改名称设置
message ChangePlayerNameRequest {
    common.IPacket PacketHead = 1;
    string         PlayerName = 2;  // 玩家名称
}

// 修改名称返回
message ChangePlayerNameResponse {
    common.IPacket PacketHead = 1;
    string         PlayerName = 2;  // 玩家名称
}

/*******************商店*******************/
// 商店列表通知
message ShopListNotify {
    common.IPacket PacketHead               = 1;
    repeated playerStruct.PBU32U64 ShopList = 2;  // 商店列表 key:商店类型 value:下次刷新时间
}
// 打开商店请求
message ShopOpenRequest {
    common.IPacket PacketHead = 1;
    uint32         ShopType   = 2;  // 商店类型
}
// 商店红点通知
message ShopRedNotify {
    common.IPacket PacketHead               = 1;
    repeated  playerStruct.PBU32U32       ShopRedList   = 2;  // 商店类型 key：商店类型 value：是否有红点 1有
}
// 打开商店返回
message ShopOpenResponse {
    common.IPacket PacketHead                    = 1;
    uint32         ShopType                      = 2;  // 商店类型
    repeated playerStruct.PBShopGoodCfg GoodList = 3;  // 商品信息
}
// 兑换商店商品数据更新
message ShopExchangeGoodNotify {
    common.IPacket        PacketHead = 1;
    uint32                ShopType   = 2;  // 商店类型
    playerStruct.PBU32U32 GoodInfo   = 3;  // 商品数据 key：商品ID  Value:购买次数
}
// 兑换商店请求
message ShopExchangeRequest {
    common.IPacket PacketHead = 1;
    uint32         ShopType   = 2;  // 商店类型
    uint32         GoodsID    = 3;  // 商品ID
}
// 兑换商店返回
message ShopExchangeResponse {
    common.IPacket PacketHead = 1;
    uint32         ShopType   = 2;  // 商店类型
    uint32         GoodsID    = 3;  // 商品ID
    uint32         BuyTimes   = 4;  // 购买次数
}
// 商店购买请求
message ShopBuyRequest {
    common.IPacket PacketHead = 1;
    uint32         ShopType   = 2;  // 商店类型
    uint32         GoodsID    = 3;  // 商品ID
    uint32         AdvertType = 4;  // 广告类型 0无广告
}
// 商店购买返回
message ShopBuyResponse {
    common.IPacket PacketHead = 1;
    uint32         ShopType   = 2;  // 商店类型
}

// 商店通知某个物品
message ShopUpdateOneGoodsNotify {
    common.IPacket              PacketHead = 1;
    uint32                      ShopType   = 2;  // 商店类型
    playerStruct.PBShopGoodInfo ShopGood   = 3;  // 商品数据
}

// 商店刷新通知
message ShopUpdateNotify {
    common.IPacket                  PacketHead = 1;
    uint32                          ShopType   = 2;  // 商店类型
    playerStruct.PBPlayerSystemShop Shop       = 3;  // 商店类型
}

// 商店刷新请求
message ShopRefreshRequest {
    common.IPacket PacketHead = 1;
    uint32         ShopType   = 2;  // 商店类型
    bool           IsFree     = 3;  // 是否免费
}
// 商店刷新返回
message ShopRefreshResponse {
    common.IPacket                 PacketHead  = 1;
    uint32                         ShopType    = 2;  // 商店类型
    playerStruct.PBShopRefreshInfo RefreshInfo = 3;  // 刷新数据
}

// 商店刷新时间通知返回
message ShopRefreshTimeNotify {
    common.IPacket                 PacketHead  = 1;
    uint32                         ShopType    = 2;  // 商店类型
    playerStruct.PBShopRefreshInfo RefreshInfo = 3;  // 刷新数据
}

/*******************************************抽奖开始**********************************************************/
// 抽奖返回
message DrawNotify {
    common.IPacket PacketHead                    = 1;
    repeated playerStruct.PBDrawInfo DrawList    = 2;  // 新增的抽奖
    repeated uint32                  DelDrawList = 3;  // 删除的抽奖
}

// 抽奖请求
message DrawRequest {
    common.IPacket PacketHead   = 1;
    uint32         DrawId       = 2;  // 抽奖id
    uint32         DrawCount    = 3;  // 抽奖次数
    bool           IsUseReplace = 4;  // 是否用替换道具
    uint32         AdvertType   = 5;  // 广告类型
}
// 抽奖返回
message DrawResponse {
    common.IPacket          PacketHead = 1;
    playerStruct.PBDrawInfo DrawInfo   = 2;  // 抽奖信息
}

// 抽奖奖励详情请求
message DrawPrizeInfoRequest {
    common.IPacket PacketHead = 1;
    uint32         DrawId     = 2;  // 抽奖id
}

// 抽奖奖励详情返回
message DrawPrizeInfoResponse {
    common.IPacket PacketHead                       = 1;
    uint32         DrawId                           = 2;  // 抽奖id
    repeated playerStruct.PBDrawPrizeInfo PrizeList = 3;  // 奖励信息
}
// 抽奖积分奖励请求
message DrawScorePrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         DrawId     = 2;  // 抽奖id
    uint32         Id         = 3;  // 抽奖积分配置配置的ID
}
// 抽奖积分奖励返回
message DrawScorePrizeResponse {
    common.IPacket PacketHead = 1;
    uint32         DrawId     = 2;  // 抽奖id
    uint32         Id         = 3;  // 抽奖积分配置配置的ID
}
/*******************************************抽奖结束**********************************************************/

/*******************************************充值开始**********************************************************/
// 充值订单请求
message ChargeNotify {
    common.IPacket        PacketHead = 1;
    playerStruct.PBCharge Charge     = 2;  // 充值数据
}
// 充值订单请求
message ChargeOrderRequest {
    common.IPacket PacketHead = 1;
    uint32         ProductId  = 2;  // 商品ID
    bool           IsNeigou   = 3;  // 是否是内购
}

// 充值订单返回
message ChargeOrderResponse {
    common.IPacket                      PacketHead     = 1;
    playerStruct.PBChargeBingchuanOrder BingchuanOrder = 2;  // 冰川订单
}
// 通知有新订单
message ChargeQueryNotify {
    common.IPacket PacketHead = 1;
    uint32         ProductId  = 2;  // 充值数据
}
// 充值查询
message ChargeQueryRequest {
    common.IPacket PacketHead = 1;
}

// 充值查询返回
message ChargeQueryResponse {
    common.IPacket  PacketHead = 1;
    repeated uint32 ProductIds = 2;  // 商品ID
}
// 新首冲列表通知
message FirstChargeNotify {
    common.IPacket PacketHead                           = 1;
    playerStruct.PBFirstCharge FirstChargeInfo = 2;  // 新增的首冲数据
}
// 首冲领奖请求
message FirstChargePrizeRequest {
    common.IPacket PacketHead    = 1;
    uint32         FirstChargeId = 2;  // 首冲类型
}
// 首冲领奖返回
message FirstChargePrizeResponse {
    common.IPacket PacketHead    = 1;
    uint32         FirstChargeId = 2;  // 首冲类型
    uint32         PrizeDay      = 3;  // 领取的最新奖励天数
}
// 新BP通知
message BPNewNotify {
    common.IPacket        PacketHead = 1;
    playerStruct.PBBPInfo BPInfo     = 2;  // 新BP
}
// 新BP期数通知
message BPNewStageNotify {
    common.IPacket PacketHead                     = 1;
    uint32         BPType                         = 2;  // BP类型
    repeated playerStruct.PBBPStageInfo StageList = 3;  // 新BP期数
    repeated uint32                     DelList   = 4;  // 删除的期数
}
// BP数值同步
message BPValueNotify {
    common.IPacket PacketHead = 1;
    uint32         BPType     = 2;  // BP类型
    uint32         Value      = 3;  // BP类型
}
// BP充值激活通知
message BPAcitiveNotify {
    common.IPacket PacketHead = 1;
    uint32         BPType     = 2;  // BP类型
    uint32         StageId    = 3;  // BP类型
    uint64         ChargeTime = 4;  // 充值时间
}
// BP领奖请求
message BPPrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         BPType     = 2;  // BP类型
    uint32         StageId    = 3;  // BP期数
}
// BP领奖返回
message BPPrizeResponse {
    common.IPacket PacketHead    = 1;
    uint32         BPType        = 2;  // BP类型
    uint32         StageId       = 3;  // BP期数
    uint32         NoramlPrizeId = 4;  // 普通领奖ID
    uint32         ExtralPrizeId = 5;  // 额外领奖ID
}
// 充值卡新增返回
message ChargeCardNewNotify {
    common.IPacket            PacketHead = 1;
    playerStruct.PBChargeCard CardInfo   = 2;  // 充值卡
}
// 充值卡更新返回
message ChargeCardUpdateNotify {
    common.IPacket PacketHead                   = 1;
    repeated playerStruct.PBChargeCard CardInfo = 2;  // 充值卡
    repeated uint32                    DelList  = 3;  // 过期删除的卡
}
// 充值卡领奖请求
message ChargeCardPrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         CardType   = 2;  // 充值卡类型
}
// 充值卡领奖返回
message ChargeCardPrizeResponse {
    common.IPacket PacketHead = 1;
    uint32         CardType   = 2;  // 充值卡类型
    uint64         PrizeTime  = 3;  // 领奖时间
}
/*******************************************充值结束**********************************************************/
// 广播通知协议
message BroadcastNotify {
    common.IPacket PacketHead    = 1;  // 包头
    uint32         Channel       = 2;  // 广播频道
    uint32         BroadcastType = 3;  // 广播类型
    string         Content       = 4;  // 广播类容
    bytes          Extends       = 5;  // 扩展字段
}

// ----------------------------上阵星星增加请求-------------------------------
message HeroBattleStarInfo {
    uint32 HeroID = 1;  // 英雄id
    uint32 Total  = 2;  // 当前总量
}

message HeroBattleStarChangeRequest {
    common.IPacket              PacketHead = 1;
    repeated HeroBattleStarInfo Heros      = 2;
}
message HeroBattleStarChangeResponse {
    common.IPacket PacketHead = 1;
}

// 星星变更通知
message HeroBattleStarChangeNotify {
    common.IPacket              PacketHead = 1;
    repeated HeroBattleStarInfo Heros      = 2;
}

// ------------------------------离线收益----------------------------
// 领取所有没有领取的奖励
message OfflineIncomeRewardRequest {
    common.IPacket PacketHead = 1;
	 uint32         AdvertType = 2;  // 广告类型 0无广告
}

message OfflineIncomeRewardResponse {
    common.IPacket PacketHead = 1;
}

// ------------------------------挂机科技开始----------------------------
// 挂机科技等级同步 时间到
message HookTechLevelNotify {
    common.IPacket PacketHead                     = 1;
    repeated playerStruct.PBHookTech HookTechList = 2;  // 挂机科技列表
}
// 挂机科技升级请求
message HookTechLevelRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // Id
}
// 挂机科技升级返回
message HookTechLevelResponse {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // Id
    uint64         LevelTime  = 3;  // 升级到达时间
}
// 挂机科技加速请求
message HookTechSpeedRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // Id
    uint32         AdvertType = 3;  // 广告类型 0无广告
}
// 挂机科技加速返回
message HookTechSpeedResponse {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // Id
    uint32         Level      = 3;  // 等级
    uint64         LevelTime  = 4;  // 升级到达时间
}
// --------------------------------词条技能--------------------------------------
message EntryConditionNotify {
    common.IPacket              PacketHead = 1;
    playerStruct.EntryCondition Condition  = 2;
}

message EntryEffectNotify {
    common.IPacket           PacketHead = 1;
    playerStruct.EntryEffect Effect     = 2;
}

// 词条解锁请求
message EntryUnlockRequest {
    common.IPacket PacketHead     = 1;
    uint32         PassiveSkillID = 2;  // 被动技能id
}

message EntryUnlockResponse {
    common.IPacket PacketHead = 1;
}

// 触发词条
message EntryTriggerRequest {
    common.IPacket  PacketHead = 1;
    uint32          EntryType  = 2;  // 触发的词条类型
    uint32          Times      = 3;  // 触发次数
    repeated uint32 Params     = 4;  // 扩展参数（例如品质、星级、等）
}

message EntryTriggerResponse {
    common.IPacket PacketHead = 1;
}

message GetPlayerDataRequest {
    common.IPacket PacketHead = 1;
    int32          DataType   = 2;
}

message GetPlayerDataResponse {
    common.IPacket            PacketHead = 1;
    playerStruct.PBPlayerData PlayerData = 2;
}

message SetPlayerDataRequest {
    common.IPacket PacketHead = 1;
    int32          DataType   = 2;
    string         JsonData   = 3;
}

message SetPlayerDataResponse {
    common.IPacket PacketHead = 1;
}

// --------------------------------七天活动开始--------------------------------------
// 成就任务更新
message AchieveTaskInfoNotify {
    common.IPacket PacketHead                      = 1;
    uint32         SystemType                      = 2;  // 成就系统类型
    repeated playerStruct.PBTaskStageInfo TaskList = 3;  // 更新的任务进度信息
}

// 七天活动列表通知
message SevenDayListNotify {
    common.IPacket PacketHead                    = 1;
    repeated playerStruct.PBSevenDayInfo AddList = 2;  // 增加的活动
    repeated uint32                      Delist  = 3;  // 删除的活动
}

// 七天活动礼包通知
message SevenDayGiftNotify {
    common.IPacket        PacketHead = 1;
    playerStruct.PBU32U32 GiftInfo   = 2;  // 礼包数据
    uint32                Value      = 3;  // 活跃值
}

// 七天活跃奖励领取请求
message SevenDayActivePrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 活动ID
}
// 七天活跃奖励领取返回
message SevenDayActivePrizeResponse {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 活动ID
    uint32         PrizeValue = 3;  // 当前领取的活跃值
}
// 七天任务奖励领取请求
message SevenDayTaskPrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 活动ID
    uint32         TaskId     = 3;  // 任务ID
}
// 七天任务奖励领取返回
message SevenDayTaskPrizeResponse {
    common.IPacket               PacketHead    = 1;
    uint32                       Id            = 2;  // 活动ID
    uint32                       Value         = 3;  // 活跃值
    playerStruct.PBTaskStageInfo TaskStageInfo = 4;  // 任务数据
}
// 七天购买礼包请求
message SevenDayBuyGiftRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 活动ID
    uint32         GiftId     = 3;  // 礼包ID
}
// 七天任务奖励领取返回
message SevenDayBuyGiftResponse {
    common.IPacket        PacketHead = 1;
    uint32                Id         = 2;  // 活动ID
    uint32                Value      = 3;  // 活跃值
    playerStruct.PBU32U32 GiftInfo   = 4;  // 礼包数据
}
// --------------------------------七天活动结束--------------------------------------
message UserRouteInfo {
    uint64           UID       = 1;
    common.RouteInfo RouteInfo = 2;
}

message UpdateRouteNotify {
    common.IPacket         PacketHead = 1;
    repeated UserRouteInfo Users      = 2;
}
/*******************************************职业功能开始**********************************************************/
// 职业升级请求
message ProfessionLevelRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         CurLevel   = 3;  // 当前等级
    uint32         AddLevel   = 4;  // 新增等级
}

// 职业升级返回
message ProfessionLevelResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         CurLevel   = 3;  // 新等级
}
// 职业突破请求
message ProfessionGradeRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
}

// 职业突破返回
message ProfessionGradeResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         Grade      = 3;  // 突破等级
}
// 职业巅峰突破请求
message ProfessionPeakRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
}
// 职业巅峰突破返回
message ProfessionPeakResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PeakLevel  = 3;  // 新巅峰等级
}
// 职业巅峰升级请求
message ProfessionPeakLevelRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         CurLevel   = 3;  // 当前巅峰等级
}

// 职业巅峰升级返回
message ProfessionPeakLevelResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         CurLevel   = 3;  // 新巅峰等级
}
// 职业部位升级请求
message ProfessionPartLevelRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         CurLevel   = 4;  // 当前等级
}

// 职业部位升级返回
message ProfessionPartLevelResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         CurLevel   = 4;  // 当前等级
}
// 职业部位一键升级请求
message ProfessionPartOnekeyLevelRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
}
// 职业部位一键升级返回
message ProfessionPartOnekeyLevelResponse {
    common.IPacket PacketHead                                 = 1;
    uint32         ProfType                                   = 2;  // 职业类型
    repeated playerStruct.PBPlayerSystemProfPartInfo PartList = 3;  // 职业部位信息
}
// 职业装备穿戴请求
message ProfessionEquipRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         Sn         = 4;  // 装备sn 0表示脱
}
// 职业装备穿戴返回
message ProfessionEquipResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         Sn         = 4;  // 当前部位ID
}
// 职业装备一键脱装备请求
message ProfessionOnekeyUnEquipRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
}
// 职业装备一键脱穿戴返回
message ProfessionOnekeyUnEquipResponse {
    common.IPacket  PacketHead  = 1;
    uint32          ProfType    = 2;  // 职业类型
    repeated uint32 EquipSnList = 3;  // 装备列表
}
// 职业部位精炼请求
message ProfessionPartRefineRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         CurLevel   = 4;  // 当前等级
}

// 职业部位精炼返回
message ProfessionPartRefineResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         CurLevel   = 4;  // 当前等级
}
// 职业部位一键精炼请求
message ProfessionPartOnekeyRefineRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
}
// 职业部位一键精炼返回
message ProfessionPartOnekeyRefineResponse {
    common.IPacket PacketHead                                 = 1;
    uint32         ProfType                                   = 2;  // 职业类型
    repeated playerStruct.PBPlayerSystemProfPartInfo PartList = 3;  // 职业部位信息
}
// 职业部位精炼突破请求
message ProfessionPartRefineTupoRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         CurLevel   = 4;  // 当前等级
}

// 职业部位精炼返回
message ProfessionPartRefineTupoResponse {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型
    uint32         CurLevel   = 4;  // 当前等级
}
// 职业部位重置请求
message ProfessionPartResetRequest {
    common.IPacket PacketHead = 1;
    uint32         ProfType   = 2;  // 职业类型
    uint32         PartType   = 3;  // 部位类型 999表示任意
}
// 职业部位重置返回
message ProfessionPartResetResponse {
    common.IPacket PacketHead                                 = 1;
    uint32         ProfType                                   = 2;  // 职业类型
    repeated playerStruct.PBPlayerSystemProfPartInfo PartList = 3;  // 职业装备信息
}
/*******************************************职业功能结束**********************************************************/

/*******************************************装备功能开始**********************************************************/
// 装备通知
message EquipmentNotify {
    common.IPacket PacketHead                   = 1;
    repeated playerStruct.PBEquipment Equipment = 2;  // 装备数据
    bool                              IsHook    = 3;  // 是否挂机背包
}
// 装备分解积分通知
message EquipmentSplitScoreNotify {
    common.IPacket PacketHead = 1;
    uint32         SplitScore = 2;  // 当前进度积分
}
// 装备分解请求
message EquipmentSplitRequest {
    common.IPacket  PacketHead = 1;
    repeated uint32 SnList     = 2;  // 装备sn列表
}
// 装备分解返回
message EquipmentSplitResponse {
    common.IPacket  PacketHead = 1;
    repeated uint32 SnList     = 2;  // 装备sn列表
}
// 装备格子购买请求
message EquipmentBuyPosRequest {
    common.IPacket PacketHead     = 1;
    uint32         CurPosBuyCount = 2;  // 当前购买次数
}
// 装备格子购买返回
message EquipmentBuyPosResponse {
    common.IPacket PacketHead  = 1;
    uint32         PosBuyCount = 2;  // 当前购买次数
}
// 装备自动分解请求
message EquipmentAutoSplitRequest {
    common.IPacket  PacketHead  = 1;
    repeated uint32 QualityList = 2;  // 品质列表
}
// 装备自动分解返回
message EquipmentAutoSplitResponse {
    common.IPacket  PacketHead  = 1;
    repeated uint32 QualityList = 2;  // 品质列表
}
// 装备锁定请求
message EquipmentLockRequest {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 装备Sn
    bool           IsLock     = 3;  // 是否加锁
}
// 装备锁定返回
message EquipmentLockResponse {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 装备Sn
    bool           IsLock     = 3;  // 是否加锁
}
// 挂机装备领取请求
message HookEquipmentAwardRequest {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 装备Sn
}
// 挂机装备领取返回
message HookEquipmentAwardResponse {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 装备Sn
}
/*******************************************装备功能结束**********************************************************/

/*******************************************英雄开始**********************************************************/
// 英雄基础信息通知
message HeroNotify {
    common.IPacket PacketHead         = 1;
    repeated playerStruct.PBHero Info = 2;  // 英雄数据
}

// 英雄新消息通知
message HeroNewStarNotify {
    common.IPacket PacketHead         = 1;
    repeated playerStruct.PBHero Info = 2;  // 英雄数据
}

// 战斗力通知
message HeroFightPowerNotify {
    common.IPacket PacketHead = 1;
    uint32         FightPower = 2;  // 战斗力
}

// 英雄升星请求
message HeroUpStarRequest {
    common.IPacket  PacketHead = 1;
    uint32          Sn         = 2;  // 升星的sn
    repeated uint32 UseSnList  = 3;  // 消耗的英雄
}
// 英雄升星返回
message HeroUpStarResponse {
    common.IPacket  PacketHead = 1;
    uint32          Sn         = 2;  // 升星的sn
    uint32          Star       = 3;  // 星级
    repeated uint32 UseSnList  = 4;  // 消耗的英雄
}
// 英雄自动升星请求
message HeroAutoUpStarRequest {
    common.IPacket PacketHead = 1;
}
// 英雄自动升星返回
message HeroAutoUpStarResponse {
    common.IPacket PacketHead                = 1;
    repeated playerStruct.PBU32U32 HeroList  = 2;  // 升星的英雄列表 key:sn value:星级
    repeated uint32                DelSnList = 3;  // 消耗的英雄
}
// 英雄觉醒请求
message HeroAwakenLevelRequest {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 觉醒的sn
    uint32         CurLevel   = 3;  // 当前等级
}
// 英雄觉醒返回
message HeroAwakenLevelResponse {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 觉醒的sn
    uint32         CurLevel   = 3;  // 当前等级
}
// 英雄上阵请求
message HeroGameHeroListRequest {
    common.IPacket              PacketHead = 1;
    playerStruct.PBHeroTeamList Team       = 2;  // 上阵列表
}
// 英雄上阵返回
message HeroGameHeroListResponse {
    common.IPacket              PacketHead = 1;
    playerStruct.PBHeroTeamList Team       = 2;  // 上阵列表
}
// 英雄上阵通知
message HeroGameHeroListNotify {
    common.IPacket              PacketHead = 1;
    playerStruct.PBHeroTeamList Team       = 2;  // 上阵列表
}
// 英雄重生请求
message HeroRebirthRequest {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 英雄sn
}
// 英雄重生返回
message HeroRebirthResponse {
    common.IPacket PacketHead = 1;
    uint32         Sn         = 2;  // 升星的sn
    uint32         Star       = 3;  // 星级
}
// 英雄图鉴激活通知
message HeroBookNotify {
    common.IPacket          PacketHead = 1;
    playerStruct.PBHeroBook HeroBook   = 2;  // 英雄图鉴 0星表示需要激活
}
// 英雄图鉴激活请求
message HeroBookActiveRequest {
    common.IPacket PacketHead = 1;
    uint32         HeroId     = 2;  // 英雄ID
}
// 英雄图鉴激活返回
message HeroBookActiveResponse {
    common.IPacket          PacketHead = 1;
    playerStruct.PBHeroBook HeroBook   = 2;  // 英雄图鉴
}
// 英雄图鉴升星请求
message HeroBookUpStarRequest {
    common.IPacket PacketHead = 1;
    uint32         HeroId     = 2;  // 英雄ID
}
// 英雄图鉴升星返回
message HeroBookUpStarResponse {
    common.IPacket          PacketHead = 1;
    playerStruct.PBHeroBook HeroBook   = 2;  // 英雄图鉴
}

// 系统属性通知
message SystemPropNotify {
    common.IPacket          PacketHead            = 1;
    common.EmSyetemPropType SyetemPropType        = 2;  // 系统类型
    repeated playerStruct.PBPropInfo PropInfoList = 3;  // 属性数据
}
/*******************************************英雄结束**********************************************************/

/*******************************************关卡开始**********************************************************/
// 关卡同步
message BattleMapNotify {
    common.IPacket               PacketHead = 1;
    common.EmBattleType          BattleType = 2;  // 战斗类型 1地图，2爬塔，3挂机
    playerStruct.PBBattleMapInfo MapInfo    = 3;  // 战场信息
}

// 挑战开始请求
message BattleBeginRequest {
    common.IPacket      PacketHead = 1;
    common.EmBattleType BattleType = 2;  // 战斗类型 1地图，2爬塔，3挂机
    uint32              MapId      = 3;  // 地图ID
    uint32              StageId    = 4;  // 关卡ID
    repeated uint32     Params     = 5;  // 参数
}

// 挑战开始返回
message BattleBeginResponse {
    common.IPacket      PacketHead = 1;
    common.EmBattleType BattleType = 2;  // 战斗类型 1地图，2爬塔，3挂机
    uint32              MapId      = 3;  // 地图ID
    uint32              StageId    = 4;  // 关卡ID
    uint32              FightCount = 5;  // 挑战次数
    repeated uint32     Params     = 6;  // 参数
}

// 挑战结束请求
message BattleEndRequest {
    common.IPacket          PacketHead = 1;
    playerStruct.BattleInfo Battle     = 2;
}
// 挑战结束返回
message BattleEndResponse {
    common.IPacket      PacketHead               = 1;
    common.EmBattleType BattleType               = 2;  // 战斗类型 1地图，2爬塔，3挂机
    uint32              MapId                    = 3;  // 地图ID
    uint32              StageId                  = 4;  // 关卡ID
    repeated playerStruct.PBAddItemData ItemInfo = 5;  // 道具信息
}
// 挑战记录请求
message BattleRecordRequest {
    common.IPacket      PacketHead = 1;
    common.EmBattleType BattleType = 2;  // 战斗类型 1地图，2爬塔，3挂机
    uint32              MapId      = 3;  // 地图ID
    uint32              StageId    = 4;  // 关卡ID
}

// 挑战记录返回
message BattleRecordResponse {
    common.IPacket      PacketHead                      = 1;
    common.EmBattleType BattleType                      = 2;  // 战斗类型 1地图，2爬塔，3挂机
    uint32              MapId                           = 3;  // 地图ID
    uint32              StageId                         = 4;  // 关卡ID
    repeated playerStruct.PBPlayerBattleData RecordList = 5;  // 记录数据
}
// 领取精英关卡奖励请求
message NormalBattlePrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         MapId      = 2;  // 地图ID
    uint32         StageId    = 3;  // 关卡ID
    uint32         PrizeStage = 4;  // 阶段ID
}

// 领取精英关卡奖励返回
message NormalBattlePrizeResponse {
    common.IPacket  PacketHead   = 1;
    uint32          PrizeMapId   = 2;  // 领取的地图ID
    uint32          PrizeStageId = 3;  // 领取的关卡ID
    repeated uint32 PrizeStage   = 4;  // 领取的奖励进度
}
// 挂机自动推关设置请求
message HookBattleAutoMapRequest {
    common.IPacket PacketHead = 1;
}

// 挂机自动推关设置返回
message HookBattleAutoMapResponse {
    common.IPacket PacketHead = 1;
    bool           AutoMap    = 2;  // 是否自动推关
}
// 关卡复活请求
message BattleReliveNotify {
    common.IPacket              PacketHead = 1;
    playerStruct.PBBattleRelive Relive     = 2;
}

// 关卡复活请求
message BattleReliveRequest {
    common.IPacket      PacketHead = 1;
    common.EmBattleType BattleType = 2;  // 战斗类型 1地图，2爬塔，3挂机
    uint32              HeroId     = 3;  // 英雄ID
    uint32              AdvertType = 4;  // 广告类型
}
// 关卡复活返回
message BattleReliveResponse {
    common.IPacket              PacketHead = 1;
    common.EmBattleType         BattleType = 2;  // 战斗类型 1地图，2爬塔，3挂机
    uint32                      HeroId     = 3;  // 英雄ID
    playerStruct.PBBattleRelive Relive     = 4;  // 复活数据
}
// 关卡功能购买请求
message BattleFunBuyRequest {
    common.IPacket PacketHead    = 1;
    uint32         BattleFunType = 2;  // 刷新类型 1是复活  2是卡牌刷新
}
// 关卡功能购买返回
message BattleFunBuyResponse {
    common.IPacket PacketHead    = 1;
    uint32         BattleFunType = 2;  // 刷新类型 1是复活  2是卡牌刷新
}
// 挂机掉落请求
message HookBattleLootRequest {
    common.IPacket PacketHead                               = 1;
    repeated playerStruct.BattleKillMonsterInfo MonsterInfo = 2;  // 击杀数据
}
// 挂机掉落请求
message HookBattleLootResponse {
    common.IPacket PacketHead = 1;
}
// 战斗进度保存请求
message BattleScheduleSaveRequest {
    common.IPacket                PacketHead     = 1;
    playerStruct.PBBattleSchedule BattleSchedule = 2;
}
// 战斗进度结束返回
message BattleScheduleSaveResponse {
    common.IPacket                PacketHead     = 1;
    playerStruct.PBBattleSchedule BattleSchedule = 2;
}
// 精英关卡挑战选卡请求
message BattleNormalCardRequest {
    common.IPacket      PacketHead 	= 1;
	uint32              Stage      			= 2;  // 阶段
    uint32              CardID      		= 3;  // 地图ID
    uint64              BattleBeginTime  	= 4;  // 战斗开始时间戳
}
// 精英关卡挑战选卡返回
message BattleNormalCardResponse {
    common.IPacket      PacketHead = 1;
}
/*******************************************关卡结束**********************************************************/

/*******************************************圣遗物开始**********************************************************/
// 机器人通知
message CrystalRobotNotify {
    common.IPacket              PacketHead = 1;
    playerStruct.PBCrystalRobot RobotInfo  = 2;  // 变更之后的机器人信息
}
// 晶核通知
message CrystalNotify {
    common.IPacket PacketHead                   = 1;
    repeated playerStruct.PBCrystal CrystalInfo = 2;  // 变更之后的晶核信息
}

// 机器人升级请求
message CrystalRobotUpgradeRequest {
    common.IPacket PacketHead = 1;
    uint32         RobotID    = 2;  // 机器人ID
    // uint32  CurLevel   = 3;  // 升级之前的当前等级
}
message CrystalRobotUpgradeResponse {
    common.IPacket PacketHead = 1;
    uint32         RobotID    = 2;  // 机器人ID
    uint32         CurLevel   = 3;  // 升级之后的当前等级
}

// 机器人上阵请求
message CrystalRobotBattleRequest {
    common.IPacket PacketHead = 1;
    uint32         RobotID    = 2;  // 机器人ID
}
message CrystalRobotBattleResponse {
    common.IPacket PacketHead = 1;
    uint32         RobotID    = 2;  // 机器人ID
}

// 晶核改造请求
message CrystalRedefineRequest {
    common.IPacket PacketHead = 1;
    uint32         CrystalID  = 2;  // 要改造的晶核ID
    // uint32  CurStar    = 3;  // 升级之前的星级
}

message CrystalRedefineResponse {
    common.IPacket PacketHead = 1;
    uint32         CrystalID  = 2;  // 要改造的晶核ID
    uint32         CurStar    = 3;  // 升级之后的星级
}

// 晶核升级请求
message CrystalUpgradeRequest {
    common.IPacket PacketHead = 1;
    uint32         CrystalID  = 2;  // 要改造的晶核ID
}

message CrystalUpgradeResponse {
    common.IPacket PacketHead = 1;
    uint32         CrystalID  = 2;  // 要改造的晶核ID
    uint32         CurLevel   = 3;  // 升级之后的等级
}

// 图鉴系统领取等级奖励请求
message BookStageRewardRequest {
    common.IPacket PacketHead = 1;
}
message BookStageRewardResponse {
    common.IPacket             PacketHead = 1;
    playerStruct.PBCrystalBook BookInfo   = 2;  // 图鉴数据
}

// 图鉴系统领取收藏币接口
message BookCollectionCoinRequest {
    common.IPacket PacketHead = 1;
    uint32         CrystalID  = 2;  // 晶核ID
}
message BookCollectionCoinResponse {
    common.IPacket PacketHead = 1;
    uint32         Coin       = 2;  // 收藏币数量
    uint32         Level      = 3;  // 当前图鉴系统等级
}
/*******************************************圣遗物结束**********************************************************/

/*****************************************************基因系统开始********************************************/
// 切换基因方案
message GeneSchemeChangeRequest {
    common.IPacket PacketHead = 1;
    uint32         SchemeID   = 2;  // 基因方案ID
}

message GeneSchemeChangeResponse {
    common.IPacket PacketHead = 1;
}

// 重置基因方案请求
message GeneSchemeResetRequest {
    common.IPacket PacketHead = 1;
    uint32         SchemeID   = 2;  // 基因方案ID
}

message GeneSchemeResetResponse {
    common.IPacket PacketHead = 1;
}

// 基因方案修改名字
message GeneChangeNameRequest {
    common.IPacket PacketHead = 1;
    uint32         SchemeID   = 2;  // 基因方案ID
    string         Name       = 3;  // 改成的名字
}

message GeneChangeNameResponse {
    common.IPacket PacketHead = 1;
}

// 基因种子激活
message GeneCardActiveInfo {
    bool   IsActive = 1;  // 是否激活
    uint32 CardID   = 2;  // 卡牌ID
}

message GeneCardActiveRequest {
    common.IPacket              PacketHead     = 1;
    uint32                      SchemeID       = 2;  // 方案ID
    repeated GeneCardActiveInfo Actives        = 3;  // 激活列表
    repeated uint32             RobotPositions = 4;  // 重置机器人位置列表
}

message GeneCardActiveResponse {
    common.IPacket PacketHead = 1;
}

// 基因共鸣使徒激活/更换
message GeneRobotActiveRequest {
    common.IPacket PacketHead = 1;
    uint32         SchemeID   = 2;  // 方案ID
    uint32         Position   = 3;  // 位置
    uint32         RobotID    = 4;  // 机器人id
}

message GeneRobotActiveResponse {
    common.IPacket PacketHead = 1;
}

// 基因共鸣使徒强化卡牌激活
message GeneRobotCardActiveRequest {
    common.IPacket              PacketHead = 1;
    uint32                      SchemeID   = 2;  // 方案ID
    uint32                      Position   = 3;  // 位置
    repeated GeneCardActiveInfo Actives    = 4;  // 激活列表
}

message GeneRobotCardActiveResponse {
    common.IPacket PacketHead = 1;
}
/*****************************************************基因系统结束********************************************/

/*****************************************************世界boss系统开始********************************************/
// 世界boss数据同步
message WorldBossNotify {
    common.IPacket                       PacketHead = 1;
    playerStruct.PBPlayerSystemWorldBoss WorldBoss  = 2;
}

// 世界boss阶段奖励请求
message WorldBossStagePrizeRequest {
    common.IPacket PacketHead = 1;
}
// 世界boss阶段奖励返回
message WorldBossStagePrizeResponse {
    common.IPacket PacketHead        = 1;
    uint32         DailyPrizeStageId = 2;  // 阶段ID
}
// 世界boss购买次数请求
message WorldBossBuyCountRequest {
    common.IPacket PacketHead = 1;
}
// 世界boss购买次数返回
message WorldBossBuyCountResponse {
    common.IPacket PacketHead    = 1;
    uint32         DailyBuyCount = 2;  // 购买次数
}
// 世界boss扫荡请求
message WorldBossSweepRequest {
    common.IPacket PacketHead = 1;
}
// 世界boss扫荡返回
message WorldBossSweepResponse {
    common.IPacket PacketHead      = 1;
    uint32         DailyEnterCount = 2;  // 进入次数
    uint32         DailyPrizeCount = 3;  // 奖励次数
}
// 世界boss挑战开始请求
message WorldBossBattleBeginRequest {
    common.IPacket PacketHead = 1;
}
// 世界boss挑战开始返回
message WorldBossBattleBeginResponse {
    common.IPacket PacketHead      = 1;
    uint32         DailyEnterCount = 2;  // 使用免费次数 +1 最大三次
}

// 世界boss挑战结束请求
message WorldBossBattleEndRequest {
    common.IPacket          PacketHead = 1;
    playerStruct.BattleInfo Battle     = 2;
	uint32         			IsFinish   = 3;  //是否最终上报
}

// 世界boss挑战结束返回
message WorldBossBattleEndResponse {
    common.IPacket PacketHead                           = 1;
    uint64         DailyMaxDamage                       = 2;  // 最大伤害值
    uint64         DailyTotalDamage                     = 3;  // 每日累计伤害值
    uint32         DailyPrizeCount                      = 4;  // 结算次数
    repeated playerStruct.PBAddItemData ItemInfo        = 5;  // 道具信息
    uint32                              DailyEnterCount = 6;  // 免费次数 -1
}
// 世界boss挑战记录查询
message WorldBossRecordRequest {
    common.IPacket PacketHead = 1;
    uint64         AccountId  = 2;  // 玩家ID
    uint32         ServerId   = 3;  // 服务器ID
}
// 挑战记录返回
message WorldBossRecordResponse {
    common.IPacket                  PacketHead = 1;
    playerStruct.PBPlayerBattleData RecordInfo = 2;  // 记录数据
}
// 打开boss界面请求
message OpenBossRequest {
    common.IPacket PacketHead = 1;
}
// 打开boss界面返回
message OpenBossResponse {
    common.IPacket        PacketHead    = 1;
    playerStruct.PBU32U64 WorldBossRank = 2;  // 世界boss排名数据 key:名次 value:分数
}
/*****************************************************世界boss系统开始********************************************/

// 锦标赛任务完成领奖请求
message ChampionshipTaskRewardRequest {
    common.IPacket PacketHead = 1;
    uint32         RankType   = 2;
    uint32         TaskID     = 3;
}

// 领奖完成返回
message ChampionshipTaskRewardResponse {
    common.IPacket               PacketHead = 1;
    playerStruct.PBTaskStageInfo Task       = 2;  // 主线任务
}

message ChampionshipInfoRequest {
    common.IPacket PacketHead = 1;  // 包头
}

message ChampionshipRankInfo {
    uint32                RankType = 1;  // 排行榜类型
    playerStruct.RankInfo First    = 2;  // 第一名信息
}

message ChampionshipInfoResponse {
    common.IPacket                PacketHead = 1;  // 包头
    repeated ChampionshipRankInfo List       = 2;  // 第一名信息
}

message ChampionshipTimeInfo {
    uint32 RankType = 1;  // 排行榜类型
    uint64 Interval = 2;  // 间隔多长时间开启
    uint64 Active   = 3;  // 活跃时长
    uint64 Reward   = 4;  // 结算时长（领奖时长）
    uint64 Show     = 5;  // 展示时长
}

message ChampionshipNotify {
    common.IPacket                PacketHead = 1;
    uint64                        CreateTime = 2;  // 锦标赛活动开启时间
    uint64                        Expire     = 3;  // 活动有效时长
    repeated ChampionshipTimeInfo List       = 4;  // 第一名信息
}

/*****************************************************活动开始********************************************/
// 活动列表同步
message ActivityListNotify {
    common.IPacket PacketHead                               = 1;
    repeated playerStruct.PBPlayerActivityInfo ActivityList = 2;  // 活动列表
    repeated uint32                            DelIdList    = 3;  // 活动结束的列表
}
// 新增活动数据同步
message ActivityDataNewNotify {
    common.IPacket                      PacketHead   = 1;
    uint32                              ActivityType = 2;  // 活动类型
    playerStruct.PBPlayerSystemActivity Info         = 3;  // 新增活动
}
// 活动红点同步
message ActivityRedNotify {
    common.IPacket  PacketHead = 1;
    repeated uint32 IdList     = 2;  // 活动类型 活动ID列表
}
// 活动打开请求
message ActivityOpenRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // ID
}
// 活动打开返回
message ActivityOpenResponse {
    common.IPacket  PacketHead = 1;
    uint32          Id         = 2;  // ID
    repeated string JsonData   = 3;  // json数据
}
// 活动免费奖励请求
message ActivityFreePrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // ID
}
// 活动免费奖励返回
message ActivityFreePrizeResponse {
    common.IPacket PacketHead         = 1;
    uint32         Id                 = 2;  // ID
    uint64         NextDailyPrizeTime = 4;  // 下次奖励时间
}
// 成长之路领奖请求
message GrowRoadTaskPrizeRequest {
    common.IPacket PacketHead = 1;
    uint32         Id         = 2;  // 活动ID growroad表的ID
    uint32         TaskId     = 3;  // 任务ID
}
// 成长之路领奖返回
message GrowRoadTaskPrizeResponse {
    common.IPacket               PacketHead    = 1;
    uint32                       Id            = 2;  // 活动ID growroad表的ID
    playerStruct.PBTaskStageInfo TaskStageInfo = 4;  // 任务数据
}
// 直购礼包新增返回
message ChargeGiftBuyNotify {
    common.IPacket        PacketHead = 1;
    uint32                Id         = 2;  // 活动ID
    playerStruct.PBU32U32 BuyInfo    = 3;  // 礼包ID|数量
}
// 开服特惠礼包购买返回
message OpenServerGiftBuyNotify {
    common.IPacket        PacketHead = 1;
    uint32                Id         = 2;  // sID
    uint32                GiftId     = 3;  // 礼包ID
    playerStruct.PBU32U32 BuyInfo    = 4;  // id|数量
}
// 开服特惠礼包新增返回
message OpenServerGiftNewNotify {
    common.IPacket                    PacketHead = 1;
    uint32                            SId        = 2;  // 活动ID
    playerStruct.PBOpenServerGiftInfo GiftInfo   = 3;  // 礼包ID|数量
}
/*****************************************************活动结束********************************************/

// ******************冒险奖励*************************
message AdventureRewardRequest {
    common.IPacket PacketHead = 1;
    uint32         ID         = 2;  // 活动ID
    uint32         CfgID      = 3;  // 奖励配置ID
}

// 返回恭喜获得
message AdventureRewardResponse {
    common.IPacket PacketHead = 1;
}
