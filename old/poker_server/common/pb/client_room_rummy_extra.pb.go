// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: client_room_rummy_extra.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ========= Rummy 分支玩法 ==========
// RummyGiveUpReq 放弃游戏并退出
type RummyGiveUpReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 离开的房间ID
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGiveUpReq) Reset() {
	*x = RummyGiveUpReq{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGiveUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGiveUpReq) ProtoMessage() {}

func (x *RummyGiveUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGiveUpReq.ProtoReflect.Descriptor instead.
func (*RummyGiveUpReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{0}
}

func (x *RummyGiveUpReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type RummyGiveUpRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                    //请求结果信息
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 离开的房间ID
	Charge        int64                  `protobuf:"varint,3,opt,name=charge,proto3" json:"charge,omitempty"`               //  余额
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyGiveUpRsp) Reset() {
	*x = RummyGiveUpRsp{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyGiveUpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyGiveUpRsp) ProtoMessage() {}

func (x *RummyGiveUpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyGiveUpRsp.ProtoReflect.Descriptor instead.
func (*RummyGiveUpRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{1}
}

func (x *RummyGiveUpRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyGiveUpRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyGiveUpRsp) GetCharge() int64 {
	if x != nil {
		return x.Charge
	}
	return 0
}

// 平分奖池
type RummyTryHalfPoolReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyTryHalfPoolReq) Reset() {
	*x = RummyTryHalfPoolReq{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyTryHalfPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyTryHalfPoolReq) ProtoMessage() {}

func (x *RummyTryHalfPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyTryHalfPoolReq.ProtoReflect.Descriptor instead.
func (*RummyTryHalfPoolReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{2}
}

func (x *RummyTryHalfPoolReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type RummyTryHalfPoolRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyTryHalfPoolRsp) Reset() {
	*x = RummyTryHalfPoolRsp{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyTryHalfPoolRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyTryHalfPoolRsp) ProtoMessage() {}

func (x *RummyTryHalfPoolRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyTryHalfPoolRsp.ProtoReflect.Descriptor instead.
func (*RummyTryHalfPoolRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{3}
}

func (x *RummyTryHalfPoolRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyTryHalfPoolRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type RummyTryHalfPoolNtf struct {
	state         protoimpl.MessageState `xorm:"-"`      
	RoomId        uint64                      `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Players       map[uint64]*RummyRoomPlayer `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 玩家公示信息
	TimeOut       int64                       `protobuf:"varint,3,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyTryHalfPoolNtf) Reset() {
	*x = RummyTryHalfPoolNtf{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyTryHalfPoolNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyTryHalfPoolNtf) ProtoMessage() {}

func (x *RummyTryHalfPoolNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyTryHalfPoolNtf.ProtoReflect.Descriptor instead.
func (*RummyTryHalfPoolNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{4}
}

func (x *RummyTryHalfPoolNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyTryHalfPoolNtf) GetPlayers() map[uint64]*RummyRoomPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RummyTryHalfPoolNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

// RummyFinSettleNtf 游戏结算通知
type RummyFinSettleNtf struct {
	state         protoimpl.MessageState `xorm:"-"`   
	RoomId        uint64                   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`    // 桌子ID
	Records       []*RummyMatchInfo        `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`                 // 玩家对局记录
	TimeOut       int64                    `protobuf:"varint,3,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"` // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	Rake          int64                    `protobuf:"varint,4,opt,name=rake,proto3" json:"rake,omitempty"`                      // 抽水金额
	TotalTime     int64                    `protobuf:"varint,5,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	PrizePoll     int64                    `protobuf:"varint,6,opt,name=prize_poll,json=prizePoll,proto3" json:"prize_poll,omitempty"` // 奖池货币
	Bill          []*RummySettlePlayerInfo `protobuf:"bytes,7,rep,name=bill,proto3" json:"bill,omitempty"`                             // 玩家最终账单
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyFinSettleNtf) Reset() {
	*x = RummyFinSettleNtf{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyFinSettleNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyFinSettleNtf) ProtoMessage() {}

func (x *RummyFinSettleNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyFinSettleNtf.ProtoReflect.Descriptor instead.
func (*RummyFinSettleNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{5}
}

func (x *RummyFinSettleNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyFinSettleNtf) GetRecords() []*RummyMatchInfo {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RummyFinSettleNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummyFinSettleNtf) GetRake() int64 {
	if x != nil {
		return x.Rake
	}
	return 0
}

func (x *RummyFinSettleNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *RummyFinSettleNtf) GetPrizePoll() int64 {
	if x != nil {
		return x.PrizePoll
	}
	return 0
}

func (x *RummyFinSettleNtf) GetBill() []*RummySettlePlayerInfo {
	if x != nil {
		return x.Bill
	}
	return nil
}

// RummyMatchReq rummy 匹配玩法请求
type RummyMatchReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	CfgId         uint32                 `protobuf:"varint,1,opt,name=cfg_id,json=cfgId,proto3" json:"cfg_id,omitempty"`                              //配置id - 匹配模式
	GameType      GameType               `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty"` // 游戏类型
	CoinType      CoinType               `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty"` // 货币类型
	Coin          int64                  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`                                             // 玩家入桌金币
	PlayerInfo    *PlayerInfo            `protobuf:"bytes,5,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`                // 玩家信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyMatchReq) Reset() {
	*x = RummyMatchReq{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyMatchReq) ProtoMessage() {}

func (x *RummyMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyMatchReq.ProtoReflect.Descriptor instead.
func (*RummyMatchReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{6}
}

func (x *RummyMatchReq) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *RummyMatchReq) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummyMatchReq) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *RummyMatchReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RummyMatchReq) GetPlayerInfo() *PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type RummyMatchRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Cfg           *RummyConfig           `protobuf:"bytes,2,opt,name=cfg,proto3" json:"cfg,omitempty"`                   //配置
	CfgId         uint32                 `protobuf:"varint,3,opt,name=cfg_id,json=cfgId,proto3" json:"cfg_id,omitempty"` //配置id - 匹配模式
	Timeout       int64                  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	CurCount      uint32                 `protobuf:"varint,5,opt,name=cur_count,json=curCount,proto3" json:"cur_count,omitempty"` //等候玩家总数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyMatchRsp) Reset() {
	*x = RummyMatchRsp{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyMatchRsp) ProtoMessage() {}

func (x *RummyMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyMatchRsp.ProtoReflect.Descriptor instead.
func (*RummyMatchRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{7}
}

func (x *RummyMatchRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyMatchRsp) GetCfg() *RummyConfig {
	if x != nil {
		return x.Cfg
	}
	return nil
}

func (x *RummyMatchRsp) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *RummyMatchRsp) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RummyMatchRsp) GetCurCount() uint32 {
	if x != nil {
		return x.CurCount
	}
	return 0
}

// RummyMatchNtf 匹配消息通知
type RummyMatchNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	CfgId         uint32                 `protobuf:"varint,1,opt,name=cfg_id,json=cfgId,proto3" json:"cfg_id,omitempty"`          //配置id - 匹配模式
	Timeout       int64                  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`                   //超时时间
	CurCount      uint32                 `protobuf:"varint,3,opt,name=cur_count,json=curCount,proto3" json:"cur_count,omitempty"` //等候玩家总数
	MaxCount      uint32                 `protobuf:"varint,4,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"` //当前匹配玩家总数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyMatchNtf) Reset() {
	*x = RummyMatchNtf{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyMatchNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyMatchNtf) ProtoMessage() {}

func (x *RummyMatchNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyMatchNtf.ProtoReflect.Descriptor instead.
func (*RummyMatchNtf) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{8}
}

func (x *RummyMatchNtf) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *RummyMatchNtf) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RummyMatchNtf) GetCurCount() uint32 {
	if x != nil {
		return x.CurCount
	}
	return 0
}

func (x *RummyMatchNtf) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

// RummyCancelMatchReq 取消匹配
type RummyCancelMatchReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	CfgId         uint32                 `protobuf:"varint,1,opt,name=cfg_id,json=cfgId,proto3" json:"cfg_id,omitempty"`                              //配置id - 匹配模式
	GameType      GameType               `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty"` // 游戏类型
	CoinType      CoinType               `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty"` // 货币类型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyCancelMatchReq) Reset() {
	*x = RummyCancelMatchReq{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyCancelMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyCancelMatchReq) ProtoMessage() {}

func (x *RummyCancelMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyCancelMatchReq.ProtoReflect.Descriptor instead.
func (*RummyCancelMatchReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{9}
}

func (x *RummyCancelMatchReq) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *RummyCancelMatchReq) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummyCancelMatchReq) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

// 可能匹配失败流入房间
type RummyCancelMatchRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	CfgId         uint32                 `protobuf:"varint,2,opt,name=cfg_id,json=cfgId,proto3" json:"cfg_id,omitempty"`                              //配置id - 匹配模式
	GameType      GameType               `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty"` // 游戏类型
	CoinType      CoinType               `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty"` // 货币类型
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyCancelMatchRsp) Reset() {
	*x = RummyCancelMatchRsp{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyCancelMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyCancelMatchRsp) ProtoMessage() {}

func (x *RummyCancelMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyCancelMatchRsp.ProtoReflect.Descriptor instead.
func (*RummyCancelMatchRsp) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{10}
}

func (x *RummyCancelMatchRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyCancelMatchRsp) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *RummyCancelMatchRsp) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummyCancelMatchRsp) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

// match服 批量加入房间
type RummyBatchJoinReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Batch         []*RummyJoinRoomReq    `protobuf:"bytes,1,rep,name=batch,proto3" json:"batch,omitempty"`
	RoomData      *RummyRoomData         `protobuf:"bytes,2,opt,name=room_data,json=roomData,proto3" json:"room_data,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyBatchJoinReq) Reset() {
	*x = RummyBatchJoinReq{}
	mi := &file_client_room_rummy_extra_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyBatchJoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyBatchJoinReq) ProtoMessage() {}

func (x *RummyBatchJoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_room_rummy_extra_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyBatchJoinReq.ProtoReflect.Descriptor instead.
func (*RummyBatchJoinReq) Descriptor() ([]byte, []int) {
	return file_client_room_rummy_extra_proto_rawDescGZIP(), []int{11}
}

func (x *RummyBatchJoinReq) GetBatch() []*RummyJoinRoomReq {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *RummyBatchJoinReq) GetRoomData() *RummyRoomData {
	if x != nil {
		return x.RoomData
	}
	return nil
}

var File_client_room_rummy_extra_proto protoreflect.FileDescriptor

var file_client_room_rummy_extra_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x75,
	0x6d, 0x6d, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x66, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x47, 0x69, 0x76, 0x65,
	0x55, 0x70, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x13, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x54, 0x72, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x13, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x54, 0x72, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xe0,
	0x01, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x54, 0x72, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x50,
	0x6f, 0x6f, 0x6c, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x54, 0x72,
	0x79, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x74, 0x66, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x1a, 0x52, 0x0a,
	0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x6f, 0x6f, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xfc, 0x01, 0x0a, 0x11, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x46, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6b, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x69, 0x6c, 0x6c,
	0x22, 0xca, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x66, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa7, 0x01,
	0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x66, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x0d, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x74, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x66, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x66, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x66,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a,
	0x11, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_client_room_rummy_extra_proto_rawDescOnce sync.Once
	file_client_room_rummy_extra_proto_rawDescData []byte
)

func file_client_room_rummy_extra_proto_rawDescGZIP() []byte {
	file_client_room_rummy_extra_proto_rawDescOnce.Do(func() {
		file_client_room_rummy_extra_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_room_rummy_extra_proto_rawDesc), len(file_client_room_rummy_extra_proto_rawDesc)))
	})
	return file_client_room_rummy_extra_proto_rawDescData
}

var file_client_room_rummy_extra_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_client_room_rummy_extra_proto_goTypes = []any{
	(*RummyGiveUpReq)(nil),        // 0: poker.RummyGiveUpReq
	(*RummyGiveUpRsp)(nil),        // 1: poker.RummyGiveUpRsp
	(*RummyTryHalfPoolReq)(nil),   // 2: poker.RummyTryHalfPoolReq
	(*RummyTryHalfPoolRsp)(nil),   // 3: poker.RummyTryHalfPoolRsp
	(*RummyTryHalfPoolNtf)(nil),   // 4: poker.RummyTryHalfPoolNtf
	(*RummyFinSettleNtf)(nil),     // 5: poker.RummyFinSettleNtf
	(*RummyMatchReq)(nil),         // 6: poker.RummyMatchReq
	(*RummyMatchRsp)(nil),         // 7: poker.RummyMatchRsp
	(*RummyMatchNtf)(nil),         // 8: poker.RummyMatchNtf
	(*RummyCancelMatchReq)(nil),   // 9: poker.RummyCancelMatchReq
	(*RummyCancelMatchRsp)(nil),   // 10: poker.RummyCancelMatchRsp
	(*RummyBatchJoinReq)(nil),     // 11: poker.RummyBatchJoinReq
	nil,                           // 12: poker.RummyTryHalfPoolNtf.PlayersEntry
	(*RspHead)(nil),               // 13: poker.RspHead
	(*RummyMatchInfo)(nil),        // 14: poker.RummyMatchInfo
	(*RummySettlePlayerInfo)(nil), // 15: poker.RummySettlePlayerInfo
	(GameType)(0),                 // 16: poker.GameType
	(CoinType)(0),                 // 17: poker.CoinType
	(*PlayerInfo)(nil),            // 18: poker.PlayerInfo
	(*RummyConfig)(nil),           // 19: poker.RummyConfig
	(*RummyJoinRoomReq)(nil),      // 20: poker.RummyJoinRoomReq
	(*RummyRoomData)(nil),         // 21: poker.RummyRoomData
	(*RummyRoomPlayer)(nil),       // 22: poker.RummyRoomPlayer
}
var file_client_room_rummy_extra_proto_depIdxs = []int32{
	13, // 0: poker.RummyGiveUpRsp.head:type_name -> poker.RspHead
	13, // 1: poker.RummyTryHalfPoolRsp.head:type_name -> poker.RspHead
	12, // 2: poker.RummyTryHalfPoolNtf.players:type_name -> poker.RummyTryHalfPoolNtf.PlayersEntry
	14, // 3: poker.RummyFinSettleNtf.records:type_name -> poker.RummyMatchInfo
	15, // 4: poker.RummyFinSettleNtf.bill:type_name -> poker.RummySettlePlayerInfo
	16, // 5: poker.RummyMatchReq.game_type:type_name -> poker.GameType
	17, // 6: poker.RummyMatchReq.coin_type:type_name -> poker.CoinType
	18, // 7: poker.RummyMatchReq.player_info:type_name -> poker.PlayerInfo
	13, // 8: poker.RummyMatchRsp.head:type_name -> poker.RspHead
	19, // 9: poker.RummyMatchRsp.cfg:type_name -> poker.RummyConfig
	16, // 10: poker.RummyCancelMatchReq.game_type:type_name -> poker.GameType
	17, // 11: poker.RummyCancelMatchReq.coin_type:type_name -> poker.CoinType
	13, // 12: poker.RummyCancelMatchRsp.head:type_name -> poker.RspHead
	16, // 13: poker.RummyCancelMatchRsp.game_type:type_name -> poker.GameType
	17, // 14: poker.RummyCancelMatchRsp.coin_type:type_name -> poker.CoinType
	20, // 15: poker.RummyBatchJoinReq.batch:type_name -> poker.RummyJoinRoomReq
	21, // 16: poker.RummyBatchJoinReq.room_data:type_name -> poker.RummyRoomData
	22, // 17: poker.RummyTryHalfPoolNtf.PlayersEntry.value:type_name -> poker.RummyRoomPlayer
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_client_room_rummy_extra_proto_init() }
func file_client_room_rummy_extra_proto_init() {
	if File_client_room_rummy_extra_proto != nil {
		return
	}
	file_packet_proto_init()
	file_client_room_rummy_proto_init()
	file_global_enum_cfg_proto_init()
	file_table_cfg_proto_init()
	file_player_data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_room_rummy_extra_proto_rawDesc), len(file_client_room_rummy_extra_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_room_rummy_extra_proto_goTypes,
		DependencyIndexes: file_client_room_rummy_extra_proto_depIdxs,
		MessageInfos:      file_client_room_rummy_extra_proto_msgTypes,
	}.Build()
	File_client_room_rummy_extra_proto = out.File
	file_client_room_rummy_extra_proto_goTypes = nil
	file_client_room_rummy_extra_proto_depIdxs = nil
}
