// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: report.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 游戏房间回合
type TexasGameReport struct {
	state         protoimpl.MessageState `xorm:"-"`  
	Id            uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk"`                                                 // @inject_tag: xorm:"bigint autoincr pk"
	RoomId        uint64                  `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间id')"`                           // @inject_tag: xorm:"bigint index notnull comment('房间id')"
	Round         uint32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`                                           // @inject_tag: xorm:"int index comment('第几轮')
	GameType      GameType                `protobuf:"varint,4,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty" xorm:"int index notnull comment('房间模式')"` // @inject_tag: xorm:"int index notnull comment('房间模式')"
	CoinType      CoinType                `protobuf:"varint,5,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty" xorm:"int index notnull comment('货币类型')"` // @inject_tag: xorm:"int index notnull comment('货币类型')"
	RoomType      RoomType                `protobuf:"varint,6,opt,name=room_type,json=roomType,proto3,enum=poker.RoomType" json:"room_type,omitempty" xorm:"int index notnull comment('房间阶段')"` // @inject_tag: xorm:"int index notnull comment('房间阶段')"
	SmallBlind    int64                   `protobuf:"varint,7,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty" xorm:"bigint index notnull comment('小盲')"`               // @inject_tag: xorm:"bigint index notnull comment('小盲')"
	BigBlind      int64                   `protobuf:"varint,8,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty" xorm:"bigint index notnull comment('大盲')"`                     // @inject_tag: xorm:"bigint index notnull comment('大盲')"
	BeginTime     int64                   `protobuf:"varint,9,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty" xorm:"bigint index notnull comment('创建房间时间')"`                  // @inject_tag: xorm:"bigint index notnull comment('创建房间时间')"
	EndTime       int64                   `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" xorm:"bigint index comment('房间结束时间')"`                       // @inject_tag: xorm:"bigint index comment('房间结束时间')"
	TotalPot      int64                   `protobuf:"varint,11,opt,name=total_pot,json=totalPot,proto3" json:"total_pot,omitempty" xorm:"bigint comment('底池')"`                    // @inject_tag: xorm:"bigint comment('底池')"
	TotalService  int64                   `protobuf:"varint,12,opt,name=total_service,json=totalService,proto3" json:"total_service,omitempty" xorm:"bigint comment('总服务费')"`        // @inject_tag: xorm:"bigint comment('总服务费')"
	DealRecord    *TexasGameDealRecord    `protobuf:"bytes,13,opt,name=deal_record,json=dealRecord,proto3" json:"deal_record,omitempty" xorm:"blob comment('发牌记录')"`               // @inject_tag: xorm:"blob comment('发牌记录')"
	PlayerRecord  *TexasGamePlayerRecord  `protobuf:"bytes,14,opt,name=player_record,json=playerRecord,proto3" json:"player_record,omitempty" xorm:"blob comment('玩家列表')"`         // @inject_tag: xorm:"blob comment('玩家列表')"
	OperateRecord *TexasGameOperateRecord `protobuf:"bytes,15,opt,name=operate_record,json=operateRecord,proto3" json:"operate_record,omitempty" xorm:"blob comment('玩家操作记录')"`      // @inject_tag: xorm:"blob comment('玩家操作记录')"
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameReport) Reset() {
	*x = TexasGameReport{}
	mi := &file_report_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameReport) ProtoMessage() {}

func (x *TexasGameReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameReport.ProtoReflect.Descriptor instead.
func (*TexasGameReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{0}
}

func (x *TexasGameReport) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TexasGameReport) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasGameReport) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasGameReport) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *TexasGameReport) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *TexasGameReport) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *TexasGameReport) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *TexasGameReport) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *TexasGameReport) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TexasGameReport) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TexasGameReport) GetTotalPot() int64 {
	if x != nil {
		return x.TotalPot
	}
	return 0
}

func (x *TexasGameReport) GetTotalService() int64 {
	if x != nil {
		return x.TotalService
	}
	return 0
}

func (x *TexasGameReport) GetDealRecord() *TexasGameDealRecord {
	if x != nil {
		return x.DealRecord
	}
	return nil
}

func (x *TexasGameReport) GetPlayerRecord() *TexasGamePlayerRecord {
	if x != nil {
		return x.PlayerRecord
	}
	return nil
}

func (x *TexasGameReport) GetOperateRecord() *TexasGameOperateRecord {
	if x != nil {
		return x.OperateRecord
	}
	return nil
}

type TexasGameDealRecord struct {
	state         protoimpl.MessageState `xorm:"-"`     
	List          []*TexasGameDealRecordInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameDealRecord) Reset() {
	*x = TexasGameDealRecord{}
	mi := &file_report_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameDealRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameDealRecord) ProtoMessage() {}

func (x *TexasGameDealRecord) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameDealRecord.ProtoReflect.Descriptor instead.
func (*TexasGameDealRecord) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{1}
}

func (x *TexasGameDealRecord) GetList() []*TexasGameDealRecordInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type TexasGameDealRecordInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	DealType      DealType               `protobuf:"varint,1,opt,name=deal_type,json=dealType,proto3,enum=poker.DealType" json:"deal_type,omitempty"`
	Uid           uint64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Card          uint32                 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Cursor        uint32                 `protobuf:"varint,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameDealRecordInfo) Reset() {
	*x = TexasGameDealRecordInfo{}
	mi := &file_report_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameDealRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameDealRecordInfo) ProtoMessage() {}

func (x *TexasGameDealRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameDealRecordInfo.ProtoReflect.Descriptor instead.
func (*TexasGameDealRecordInfo) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{2}
}

func (x *TexasGameDealRecordInfo) GetDealType() DealType {
	if x != nil {
		return x.DealType
	}
	return DealType_DealTypeNone
}

func (x *TexasGameDealRecordInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGameDealRecordInfo) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *TexasGameDealRecordInfo) GetCursor() uint32 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type TexasGamePlayerRecord struct {
	state         protoimpl.MessageState `xorm:"-"`       
	List          []*TexasGamePlayerRecordInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 玩家列表
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGamePlayerRecord) Reset() {
	*x = TexasGamePlayerRecord{}
	mi := &file_report_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGamePlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGamePlayerRecord) ProtoMessage() {}

func (x *TexasGamePlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGamePlayerRecord.ProtoReflect.Descriptor instead.
func (*TexasGamePlayerRecord) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{3}
}

func (x *TexasGamePlayerRecord) GetList() []*TexasGamePlayerRecordInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type TexasGamePlayerRecordInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`                          // 玩家座位号
	Chips         int64                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                             // 玩家筹码
	WinChips      int64                  `protobuf:"varint,4,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty"`                       // 玩家赢得筹码
	ServiceChips  int64                  `protobuf:"varint,5,opt,name=service_chips,json=serviceChips,proto3" json:"service_chips,omitempty"`           // 服务费
	CardType      CardType               `protobuf:"varint,10,opt,name=card_type,json=cardType,proto3,enum=poker.CardType" json:"card_type,omitempty"`  // 玩家牌型
	HandCardList  []uint32               `protobuf:"varint,11,rep,packed,name=hand_card_list,json=handCardList,proto3" json:"hand_card_list,omitempty"` // 玩家手牌
	BestCardList  []uint32               `protobuf:"varint,12,rep,packed,name=best_card_list,json=bestCardList,proto3" json:"best_card_list,omitempty"` // 玩家最大牌
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGamePlayerRecordInfo) Reset() {
	*x = TexasGamePlayerRecordInfo{}
	mi := &file_report_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGamePlayerRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGamePlayerRecordInfo) ProtoMessage() {}

func (x *TexasGamePlayerRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGamePlayerRecordInfo.ProtoReflect.Descriptor instead.
func (*TexasGamePlayerRecordInfo) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{4}
}

func (x *TexasGamePlayerRecordInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGamePlayerRecordInfo) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasGamePlayerRecordInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasGamePlayerRecordInfo) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *TexasGamePlayerRecordInfo) GetServiceChips() int64 {
	if x != nil {
		return x.ServiceChips
	}
	return 0
}

func (x *TexasGamePlayerRecordInfo) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_CardTypeNode
}

func (x *TexasGamePlayerRecordInfo) GetHandCardList() []uint32 {
	if x != nil {
		return x.HandCardList
	}
	return nil
}

func (x *TexasGamePlayerRecordInfo) GetBestCardList() []uint32 {
	if x != nil {
		return x.BestCardList
	}
	return nil
}

type TexasGameOperateRecord struct {
	state         protoimpl.MessageState `xorm:"-"`        
	List          []*TexasGameOperateRecordInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 玩家操作记录
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameOperateRecord) Reset() {
	*x = TexasGameOperateRecord{}
	mi := &file_report_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameOperateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameOperateRecord) ProtoMessage() {}

func (x *TexasGameOperateRecord) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameOperateRecord.ProtoReflect.Descriptor instead.
func (*TexasGameOperateRecord) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{5}
}

func (x *TexasGameOperateRecord) GetList() []*TexasGameOperateRecordInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type TexasGameOperateRecordInfo struct {
	state            protoimpl.MessageState `xorm:"-"` 
	GameState        GameState              `protobuf:"varint,1,opt,name=game_state,json=gameState,proto3,enum=poker.GameState" json:"game_state,omitempty"` // 游戏状态
	Uid              uint64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`                                                   // 玩家id
	Operate          OperateType            `protobuf:"varint,3,opt,name=operate,proto3,enum=poker.OperateType" json:"operate,omitempty"`                    // 玩家操作
	BetChips         int64                  `protobuf:"varint,4,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                         // 玩家下注筹码
	Chips            int64                  `protobuf:"varint,5,opt,name=chips,proto3" json:"chips,omitempty"`                                               // 当前剩余
	TotalPotBetChips int64                  `protobuf:"varint,6,opt,name=total_pot_bet_chips,json=totalPotBetChips,proto3" json:"total_pot_bet_chips,omitempty"`
	unknownFields    protoimpl.UnknownFields `xorm:"-"`
	sizeCache        protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameOperateRecordInfo) Reset() {
	*x = TexasGameOperateRecordInfo{}
	mi := &file_report_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameOperateRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameOperateRecordInfo) ProtoMessage() {}

func (x *TexasGameOperateRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameOperateRecordInfo.ProtoReflect.Descriptor instead.
func (*TexasGameOperateRecordInfo) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{6}
}

func (x *TexasGameOperateRecordInfo) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_TEXAS_INIT
}

func (x *TexasGameOperateRecordInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGameOperateRecordInfo) GetOperate() OperateType {
	if x != nil {
		return x.Operate
	}
	return OperateType_OperateNone
}

func (x *TexasGameOperateRecordInfo) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *TexasGameOperateRecordInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasGameOperateRecordInfo) GetTotalPotBetChips() int64 {
	if x != nil {
		return x.TotalPotBetChips
	}
	return 0
}

// 德州玩家流水报表
type TexasPlayerFlowReport struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk"`                                                 // @inject_tag: xorm:"bigint autoincr pk"
	Uid           uint64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" xorm:"bigint index notnull comment('玩家uid')"`                                               // @inject_tag: xorm:"bigint index notnull comment('玩家uid')"
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间id')"`                           // @inject_tag: xorm:"bigint index notnull comment('房间id')"
	Round         uint32                 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty" xorm:"int index notnull comment('第几轮')"`                                           // @inject_tag: xorm:"int index notnull comment('第几轮')"
	GameType      GameType               `protobuf:"varint,5,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty" xorm:"int index notnull comment('游戏类型')"` // @inject_tag: xorm:"int index notnull comment('游戏类型')"
	RoomType      RoomType               `protobuf:"varint,6,opt,name=room_type,json=roomType,proto3,enum=poker.RoomType" json:"room_type,omitempty" xorm:"int index notnull comment('房间等级')"` // @inject_tag: xorm:"int index notnull comment('房间等级')"
	CoinType      CoinType               `protobuf:"varint,7,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty" xorm:"int index notnull comment('货币类型')"` // @inject_tag: xorm:"int index notnull comment('货币类型')"
	BeginTime     int64                  `protobuf:"varint,8,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty" xorm:"bigint index notnull comment('开始时间')"`                  // @inject_tag: xorm:"bigint index notnull comment('开始时间')"
	EndTime       int64                  `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" xorm:"bigint index comment('结束时间')"`                        // @inject_tag: xorm:"bigint index comment('结束时间')"
	Chips         int64                  `protobuf:"varint,10,opt,name=chips,proto3" json:"chips,omitempty" xorm:"bigint notnull comment('玩家筹码')"`                                          // @inject_tag: xorm:"bigint notnull comment('玩家筹码')"
	Incr          int64                  `protobuf:"varint,11,opt,name=incr,proto3" json:"incr,omitempty" xorm:"bigint notnull comment('玩家增量或减少的筹码')"`                                            // @inject_tag: xorm:"bigint notnull comment('玩家增量或减少的筹码')"
	ServiceChips  int64                  `protobuf:"varint,12,opt,name=service_chips,json=serviceChips,proto3" json:"service_chips,omitempty" xorm:"bigint notnull comment('服务费')"`        // @inject_tag: xorm:"bigint notnull comment('服务费')"
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasPlayerFlowReport) Reset() {
	*x = TexasPlayerFlowReport{}
	mi := &file_report_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerFlowReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerFlowReport) ProtoMessage() {}

func (x *TexasPlayerFlowReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerFlowReport.ProtoReflect.Descriptor instead.
func (*TexasPlayerFlowReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{7}
}

func (x *TexasPlayerFlowReport) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *TexasPlayerFlowReport) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *TexasPlayerFlowReport) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *TexasPlayerFlowReport) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetIncr() int64 {
	if x != nil {
		return x.Incr
	}
	return 0
}

func (x *TexasPlayerFlowReport) GetServiceChips() int64 {
	if x != nil {
		return x.ServiceChips
	}
	return 0
}

type TexasRoomReport struct {
	state             protoimpl.MessageState `xorm:"-"` 
	Id                uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk"`                                                           // @inject_tag: xorm:"bigint autoincr pk"
	RoomId            uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间id')"`                                     // @inject_tag: xorm:"bigint index notnull comment('房间id')"
	GameType          GameType               `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty" xorm:"int index notnull comment('游戏类型')"`           // @inject_tag: xorm:"int index notnull comment('游戏类型')"
	RoomType          RoomType               `protobuf:"varint,4,opt,name=room_type,json=roomType,proto3,enum=poker.RoomType" json:"room_type,omitempty" xorm:"int index notnull comment('房间等级')"`           // @inject_tag: xorm:"int index notnull comment('房间等级')"
	CoinType          CoinType               `protobuf:"varint,5,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty" xorm:"int index notnull comment('货币类型')"`           // @inject_tag: xorm:"int index notnull comment('货币类型')"
	Blind             string                 `protobuf:"bytes,6,opt,name=blind,proto3" json:"blind,omitempty" xorm:"varchar(30) index notnull comment('小/大盲注')"`                                                      // @inject_tag: xorm:"varchar(30) index notnull comment('小/大盲注')"
	CreateTime        int64                  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty" xorm:"bigint index notnull comment('创建房间时间')"`                         // @inject_tag: xorm:"bigint index notnull comment('创建房间时间')"
	FinishTime        int64                  `protobuf:"varint,8,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty" xorm:"bigint index comment('房间结束时间')"`                         // @inject_tag: xorm:"bigint index comment('房间结束时间')"
	TotalRound        uint32                 `protobuf:"varint,9,opt,name=total_round,json=totalRound,proto3" json:"total_round,omitempty" xorm:"bigint comment('游戏局数')"`                         // @inject_tag: xorm:"bigint comment('游戏局数')"
	TotalBuyinChips   int64                  `protobuf:"varint,10,opt,name=total_buyin_chips,json=totalBuyinChips,proto3" json:"total_buyin_chips,omitempty" xorm:"bigint comment('总买入筹码')"`       // @inject_tag: xorm:"bigint comment('总买入筹码')"
	TotalJoinCount    uint32                 `protobuf:"varint,11,opt,name=total_join_count,json=totalJoinCount,proto3" json:"total_join_count,omitempty" xorm:"int comment('总加入人数')"`          // @inject_tag: xorm:"int comment('总加入人数')"
	TotalServiceChips int64                  `protobuf:"varint,12,opt,name=total_service_chips,json=totalServiceChips,proto3" json:"total_service_chips,omitempty" xorm:"bigint comment('总服务费')"` // @inject_tag: xorm:"bigint comment('总服务费')"
	TotalRuningWater  int64                  `protobuf:"varint,13,opt,name=total_runing_water,json=totalRuningWater,proto3" json:"total_runing_water,omitempty" xorm:"bigint comment('总流水')"`    // @inject_tag: xorm:"bigint comment('总流水')"
	UpdateTime        int64                  `protobuf:"varint,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" xorm:"bigint index notnull comment('更新时间')"`                        // @inject_tag: xorm:"bigint index notnull comment('更新时间')"
	unknownFields     protoimpl.UnknownFields `xorm:"-"`
	sizeCache         protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasRoomReport) Reset() {
	*x = TexasRoomReport{}
	mi := &file_report_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomReport) ProtoMessage() {}

func (x *TexasRoomReport) ProtoReflect() protoreflect.Message {
	mi := &file_report_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomReport.ProtoReflect.Descriptor instead.
func (*TexasRoomReport) Descriptor() ([]byte, []int) {
	return file_report_proto_rawDescGZIP(), []int{8}
}

func (x *TexasRoomReport) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TexasRoomReport) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasRoomReport) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *TexasRoomReport) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *TexasRoomReport) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *TexasRoomReport) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *TexasRoomReport) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TexasRoomReport) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *TexasRoomReport) GetTotalRound() uint32 {
	if x != nil {
		return x.TotalRound
	}
	return 0
}

func (x *TexasRoomReport) GetTotalBuyinChips() int64 {
	if x != nil {
		return x.TotalBuyinChips
	}
	return 0
}

func (x *TexasRoomReport) GetTotalJoinCount() uint32 {
	if x != nil {
		return x.TotalJoinCount
	}
	return 0
}

func (x *TexasRoomReport) GetTotalServiceChips() int64 {
	if x != nil {
		return x.TotalServiceChips
	}
	return 0
}

func (x *TexasRoomReport) GetTotalRuningWater() int64 {
	if x != nil {
		return x.TotalRuningWater
	}
	return 0
}

func (x *TexasRoomReport) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

var File_report_proto protoreflect.FileDescriptor

var file_report_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xda, 0x04, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x69, 0x67, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x62, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x49, 0x0a, 0x13,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0x4d, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9a,
	0x02, 0x0a, 0x19, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x62,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x16, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xef, 0x01, 0x0a,
	0x1a, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x74, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0xfb,
	0x02, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x63, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x69, 0x6e, 0x63, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0x92, 0x04, 0x0a,
	0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75,
	0x79, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_report_proto_rawDescOnce sync.Once
	file_report_proto_rawDescData []byte
)

func file_report_proto_rawDescGZIP() []byte {
	file_report_proto_rawDescOnce.Do(func() {
		file_report_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_report_proto_rawDesc), len(file_report_proto_rawDesc)))
	})
	return file_report_proto_rawDescData
}

var file_report_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_report_proto_goTypes = []any{
	(*TexasGameReport)(nil),            // 0: poker.TexasGameReport
	(*TexasGameDealRecord)(nil),        // 1: poker.TexasGameDealRecord
	(*TexasGameDealRecordInfo)(nil),    // 2: poker.TexasGameDealRecordInfo
	(*TexasGamePlayerRecord)(nil),      // 3: poker.TexasGamePlayerRecord
	(*TexasGamePlayerRecordInfo)(nil),  // 4: poker.TexasGamePlayerRecordInfo
	(*TexasGameOperateRecord)(nil),     // 5: poker.TexasGameOperateRecord
	(*TexasGameOperateRecordInfo)(nil), // 6: poker.TexasGameOperateRecordInfo
	(*TexasPlayerFlowReport)(nil),      // 7: poker.TexasPlayerFlowReport
	(*TexasRoomReport)(nil),            // 8: poker.TexasRoomReport
	(GameType)(0),                      // 9: poker.GameType
	(CoinType)(0),                      // 10: poker.CoinType
	(RoomType)(0),                      // 11: poker.RoomType
	(DealType)(0),                      // 12: poker.DealType
	(CardType)(0),                      // 13: poker.CardType
	(GameState)(0),                     // 14: poker.GameState
	(OperateType)(0),                   // 15: poker.OperateType
}
var file_report_proto_depIdxs = []int32{
	9,  // 0: poker.TexasGameReport.game_type:type_name -> poker.GameType
	10, // 1: poker.TexasGameReport.coin_type:type_name -> poker.CoinType
	11, // 2: poker.TexasGameReport.room_type:type_name -> poker.RoomType
	1,  // 3: poker.TexasGameReport.deal_record:type_name -> poker.TexasGameDealRecord
	3,  // 4: poker.TexasGameReport.player_record:type_name -> poker.TexasGamePlayerRecord
	5,  // 5: poker.TexasGameReport.operate_record:type_name -> poker.TexasGameOperateRecord
	2,  // 6: poker.TexasGameDealRecord.list:type_name -> poker.TexasGameDealRecordInfo
	12, // 7: poker.TexasGameDealRecordInfo.deal_type:type_name -> poker.DealType
	4,  // 8: poker.TexasGamePlayerRecord.list:type_name -> poker.TexasGamePlayerRecordInfo
	13, // 9: poker.TexasGamePlayerRecordInfo.card_type:type_name -> poker.CardType
	6,  // 10: poker.TexasGameOperateRecord.list:type_name -> poker.TexasGameOperateRecordInfo
	14, // 11: poker.TexasGameOperateRecordInfo.game_state:type_name -> poker.GameState
	15, // 12: poker.TexasGameOperateRecordInfo.operate:type_name -> poker.OperateType
	9,  // 13: poker.TexasPlayerFlowReport.game_type:type_name -> poker.GameType
	11, // 14: poker.TexasPlayerFlowReport.room_type:type_name -> poker.RoomType
	10, // 15: poker.TexasPlayerFlowReport.coin_type:type_name -> poker.CoinType
	9,  // 16: poker.TexasRoomReport.game_type:type_name -> poker.GameType
	11, // 17: poker.TexasRoomReport.room_type:type_name -> poker.RoomType
	10, // 18: poker.TexasRoomReport.coin_type:type_name -> poker.CoinType
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_report_proto_init() }
func file_report_proto_init() {
	if File_report_proto != nil {
		return
	}
	file_global_enum_cfg_proto_init()
	file_global_enum_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_report_proto_rawDesc), len(file_report_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_report_proto_goTypes,
		DependencyIndexes: file_report_proto_depIdxs,
		MessageInfos:      file_report_proto_msgTypes,
	}.Build()
	File_report_proto = out.File
	file_report_proto_goTypes = nil
	file_report_proto_depIdxs = nil
}
