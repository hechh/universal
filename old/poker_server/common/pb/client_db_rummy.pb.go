// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: client_db_rummy.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 每局比赛字段 db:xorm/rummy_match_record
type RummySettleMatch struct {
	state         protoimpl.MessageState `xorm:"-"`   
	Id            uint64                   `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk comment('主键ID')"`                                                // @inject_tag: xorm:"bigint autoincr pk comment('主键ID')"
	RoomId        uint64                   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间ID')"`                           // @inject_tag: xorm:"bigint index notnull comment('房间ID')"
	PlayerId      []uint64                 `protobuf:"varint,2,rep,packed,name=player_id,json=playerId,proto3" json:"player_id,omitempty" xorm:"Text notnull comment('玩家ID')"`              // @inject_tag: xorm:"Text notnull comment('玩家ID')"
	Match         uint32                   `protobuf:"varint,3,opt,name=match,proto3" json:"match,omitempty" xorm:"int comment('比赛局数')"`                                           // @inject_tag: xorm:"int comment('比赛局数')"
	GameType      GameType                 `protobuf:"varint,4,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty" xorm:"tinyint comment('游戏类型')"` // @inject_tag: xorm:"tinyint comment('游戏类型')"
	RoomType      RoomType                 `protobuf:"varint,5,opt,name=room_type,json=roomType,proto3,enum=poker.RoomType" json:"room_type,omitempty" xorm:"tinyint comment('房间类型')"` // @inject_tag: xorm:"tinyint comment('房间类型')"
	CoinType      CoinType                 `protobuf:"varint,6,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty" xorm:"tinyint comment('货币类型')"` // @inject_tag: xorm:"tinyint comment('货币类型')"
	BaseScore     int64                    `protobuf:"varint,7,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty" xorm:"bigint comment('底分')"`                  // @inject_tag: xorm:"bigint comment('底分')"
	RakeRate      int64                    `protobuf:"varint,8,opt,name=rake_rate,json=rakeRate,proto3" json:"rake_rate,omitempty" xorm:"bigint comment('每局抽水万分比')"`                     // @inject_tag: xorm:"bigint comment('每局抽水万分比')"
	CreatedAt     int64                    `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" xorm:"bigint comment('创建时间毫秒级')"`                  // @inject_tag: xorm:"bigint comment('创建时间毫秒级')"
	FinishAt      int64                    `protobuf:"varint,10,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty" xorm:"bigint comment('结束时间毫秒级')"`                    // @inject_tag: xorm:"bigint comment('结束时间毫秒级')"
	RakeCoin      int64                    `protobuf:"varint,11,opt,name=rake_coin,json=rakeCoin,proto3" json:"rake_coin,omitempty" xorm:"bigint comment('比赛抽水')"`                    // @inject_tag: xorm:"bigint comment('比赛抽水')"
	SettleCoin    int64                    `protobuf:"varint,13,opt,name=settle_coin,json=settleCoin,proto3" json:"settle_coin,omitempty" xorm:"bigint comment('比赛流水')"`              // @inject_tag: xorm:"bigint comment('比赛流水')"
	Players       []*RummySettlePlayerInfo `protobuf:"bytes,14,rep,name=players,proto3" json:"players,omitempty" xorm:"blob comment('玩家手牌和结算账单')"`                                       //@inject_tag: xorm:"blob comment('玩家手牌和结算账单')"
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleMatch) Reset() {
	*x = RummySettleMatch{}
	mi := &file_client_db_rummy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleMatch) ProtoMessage() {}

func (x *RummySettleMatch) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleMatch.ProtoReflect.Descriptor instead.
func (*RummySettleMatch) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{0}
}

func (x *RummySettleMatch) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RummySettleMatch) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummySettleMatch) GetPlayerId() []uint64 {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

func (x *RummySettleMatch) GetMatch() uint32 {
	if x != nil {
		return x.Match
	}
	return 0
}

func (x *RummySettleMatch) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummySettleMatch) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *RummySettleMatch) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *RummySettleMatch) GetBaseScore() int64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *RummySettleMatch) GetRakeRate() int64 {
	if x != nil {
		return x.RakeRate
	}
	return 0
}

func (x *RummySettleMatch) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RummySettleMatch) GetFinishAt() int64 {
	if x != nil {
		return x.FinishAt
	}
	return 0
}

func (x *RummySettleMatch) GetRakeCoin() int64 {
	if x != nil {
		return x.RakeCoin
	}
	return 0
}

func (x *RummySettleMatch) GetSettleCoin() int64 {
	if x != nil {
		return x.SettleCoin
	}
	return 0
}

func (x *RummySettleMatch) GetPlayers() []*RummySettlePlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

// 每局每轮操作记录回放专用 db:xorm/rummy_action_record
type RummyActionRecord struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Id            uint64                 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk comment('主键ID')"`                                // @inject_tag: xorm:"bigint autoincr pk comment('主键ID')"
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间ID')"`          // @inject_tag: xorm:"bigint index notnull comment('房间ID')"
	MatchId       uint32                 `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty" xorm:"bigint comment('比赛局数')"`       // @inject_tag: xorm:"bigint comment('比赛局数')"
	Type          RummyEventType         `protobuf:"varint,3,opt,name=type,proto3,enum=poker.RummyEventType" json:"type,omitempty" xorm:"tinyint comment('通知类型')"`  // @inject_tag: xorm:"tinyint comment('通知类型')"
	NtfData       []byte                 `protobuf:"bytes,4,opt,name=ntf_data,json=ntfData,proto3" json:"ntf_data,omitempty" xorm:"blob comment('通知的二进制数据')"`        // @inject_tag: xorm:"blob comment('通知的二进制数据')"
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" xorm:"bigint comment('创建时间毫秒级')"` // @inject_tag: xorm:"bigint comment('创建时间毫秒级')"
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyActionRecord) Reset() {
	*x = RummyActionRecord{}
	mi := &file_client_db_rummy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyActionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyActionRecord) ProtoMessage() {}

func (x *RummyActionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyActionRecord.ProtoReflect.Descriptor instead.
func (*RummyActionRecord) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{1}
}

func (x *RummyActionRecord) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RummyActionRecord) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyActionRecord) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *RummyActionRecord) GetType() RummyEventType {
	if x != nil {
		return x.Type
	}
	return RummyEventType_RummyEnterNone
}

func (x *RummyActionRecord) GetNtfData() []byte {
	if x != nil {
		return x.NtfData
	}
	return nil
}

func (x *RummyActionRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// 异步存数据至数据服 db:xorm/rummy_settle
type RummySettleData struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Id            uint64                 `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk comment('主键ID')"`                                                 // @inject_tag: xorm:"bigint autoincr pk comment('主键ID')"
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间ID')"`                            // @inject_tag: xorm:"bigint index notnull comment('房间ID')"
	PlayerId      uint64                 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty" xorm:"bigint index notnull comment('玩家ID')"`                      // @inject_tag: xorm:"bigint index notnull comment('玩家ID')"
	Groups        []*RummyCardGroup      `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty" xorm:"blob comment('玩家手牌组')"`                                           // @inject_tag: xorm:"blob comment('玩家手牌组')"
	GhostCard     uint32                 `protobuf:"varint,4,opt,name=ghost_card,json=ghostCard,proto3" json:"ghost_card,omitempty" xorm:"bigint comment('癞子牌')"`                   // @inject_tag: xorm:"bigint comment('癞子牌')"
	HandScore     int64                  `protobuf:"varint,5,opt,name=hand_score,json=handScore,proto3" json:"hand_score,omitempty" xorm:"bigint comment('手牌得分')"`                   // @inject_tag: xorm:"bigint comment('手牌得分')"
	Coin          int64                  `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty" xorm:"bigint comment('游戏输赢')"`                                              // @inject_tag: xorm:"bigint comment('游戏输赢')"
	State         RummyPlayState         `protobuf:"varint,7,opt,name=state,proto3,enum=poker.RummyPlayState" json:"state,omitempty" xorm:"tinyint comment('状态')"`                  // @inject_tag: xorm:"tinyint comment('状态')"
	CreatedAt     int64                  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" xorm:"bigint comment('创建时间毫秒级')"`                   // @inject_tag: xorm:"bigint comment('创建时间毫秒级')"
	PlayerCount   uint32                 `protobuf:"varint,9,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty" xorm:"bigint comment('游戏玩家人数')"`             // @inject_tag: xorm:"bigint comment('游戏玩家人数')"
	MatchId       uint32                 `protobuf:"varint,10,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty" xorm:"bigint comment('比赛局数')"`                        // @inject_tag: xorm:"bigint comment('比赛局数')"
	GameType      GameType               `protobuf:"varint,14,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty" xorm:"tinyint comment('游戏类型')"` // @inject_tag: xorm:"tinyint comment('游戏类型')"
	RoomType      RoomType               `protobuf:"varint,15,opt,name=room_type,json=roomType,proto3,enum=poker.RoomType" json:"room_type,omitempty" xorm:"tinyint comment('房间类型')"` // @inject_tag: xorm:"tinyint comment('房间类型')"
	CoinType      CoinType               `protobuf:"varint,16,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty" xorm:"tinyint comment('货币类型')"` // @inject_tag: xorm:"tinyint comment('货币类型')"
	BaseScore     int64                  `protobuf:"varint,17,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty" xorm:"bigint comment('底分')"`                  // @inject_tag: xorm:"bigint comment('底分')"
	RakeCoin      int64                  `protobuf:"varint,18,opt,name=rake_coin,json=rakeCoin,proto3" json:"rake_coin,omitempty" xorm:"bigint comment('比赛抽水')"`                     // @inject_tag: xorm:"bigint comment('比赛抽水')"
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleData) Reset() {
	*x = RummySettleData{}
	mi := &file_client_db_rummy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleData) ProtoMessage() {}

func (x *RummySettleData) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleData.ProtoReflect.Descriptor instead.
func (*RummySettleData) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{2}
}

func (x *RummySettleData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RummySettleData) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummySettleData) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummySettleData) GetGroups() []*RummyCardGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RummySettleData) GetGhostCard() uint32 {
	if x != nil {
		return x.GhostCard
	}
	return 0
}

func (x *RummySettleData) GetHandScore() int64 {
	if x != nil {
		return x.HandScore
	}
	return 0
}

func (x *RummySettleData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RummySettleData) GetState() RummyPlayState {
	if x != nil {
		return x.State
	}
	return RummyPlayState_Rummy_PLAYSTATE_INIT
}

func (x *RummySettleData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RummySettleData) GetPlayerCount() uint32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *RummySettleData) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *RummySettleData) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummySettleData) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *RummySettleData) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *RummySettleData) GetBaseScore() int64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *RummySettleData) GetRakeCoin() int64 {
	if x != nil {
		return x.RakeCoin
	}
	return 0
}

type RummySettleInsertReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Data          []*RummySettleData     `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleInsertReq) Reset() {
	*x = RummySettleInsertReq{}
	mi := &file_client_db_rummy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleInsertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleInsertReq) ProtoMessage() {}

func (x *RummySettleInsertReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleInsertReq.ProtoReflect.Descriptor instead.
func (*RummySettleInsertReq) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{3}
}

func (x *RummySettleInsertReq) GetData() []*RummySettleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RummySettleInsertRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"` // 请求结果信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleInsertRsp) Reset() {
	*x = RummySettleInsertRsp{}
	mi := &file_client_db_rummy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleInsertRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleInsertRsp) ProtoMessage() {}

func (x *RummySettleInsertRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleInsertRsp.ProtoReflect.Descriptor instead.
func (*RummySettleInsertRsp) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{4}
}

func (x *RummySettleInsertRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

type RummySettleSelectReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleSelectReq) Reset() {
	*x = RummySettleSelectReq{}
	mi := &file_client_db_rummy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleSelectReq) ProtoMessage() {}

func (x *RummySettleSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleSelectReq.ProtoReflect.Descriptor instead.
func (*RummySettleSelectReq) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{5}
}

func (x *RummySettleSelectReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RummySettleSelectReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type RummySettleSelectRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`    //请求结果信息
	Data          []*RummySettleData     `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`    //用户比赛记录信息
	Count         int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"` //记录总数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleSelectRsp) Reset() {
	*x = RummySettleSelectRsp{}
	mi := &file_client_db_rummy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleSelectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleSelectRsp) ProtoMessage() {}

func (x *RummySettleSelectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleSelectRsp.ProtoReflect.Descriptor instead.
func (*RummySettleSelectRsp) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{6}
}

func (x *RummySettleSelectRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummySettleSelectRsp) GetData() []*RummySettleData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RummySettleSelectRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RummySettleMatchInsertReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Data          []*RummySettleMatch    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleMatchInsertReq) Reset() {
	*x = RummySettleMatchInsertReq{}
	mi := &file_client_db_rummy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleMatchInsertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleMatchInsertReq) ProtoMessage() {}

func (x *RummySettleMatchInsertReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleMatchInsertReq.ProtoReflect.Descriptor instead.
func (*RummySettleMatchInsertReq) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{7}
}

func (x *RummySettleMatchInsertReq) GetData() []*RummySettleMatch {
	if x != nil {
		return x.Data
	}
	return nil
}

type RummySettleMatchInsertRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"` // 请求结果信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummySettleMatchInsertRsp) Reset() {
	*x = RummySettleMatchInsertRsp{}
	mi := &file_client_db_rummy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummySettleMatchInsertRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummySettleMatchInsertRsp) ProtoMessage() {}

func (x *RummySettleMatchInsertRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummySettleMatchInsertRsp.ProtoReflect.Descriptor instead.
func (*RummySettleMatchInsertRsp) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{8}
}

func (x *RummySettleMatchInsertRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

type RummyMatchSelectReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyMatchSelectReq) Reset() {
	*x = RummyMatchSelectReq{}
	mi := &file_client_db_rummy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyMatchSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyMatchSelectReq) ProtoMessage() {}

func (x *RummyMatchSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyMatchSelectReq.ProtoReflect.Descriptor instead.
func (*RummyMatchSelectReq) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{9}
}

func (x *RummyMatchSelectReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RummyMatchSelectReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RummyMatchSelectReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type RummyMatchSelectRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`    //请求结果信息
	Data          []*RummySettleMatch    `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`    //用户比赛记录信息
	Count         int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"` //记录总数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyMatchSelectRsp) Reset() {
	*x = RummyMatchSelectRsp{}
	mi := &file_client_db_rummy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyMatchSelectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyMatchSelectRsp) ProtoMessage() {}

func (x *RummyMatchSelectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyMatchSelectRsp.ProtoReflect.Descriptor instead.
func (*RummyMatchSelectRsp) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_proto_rawDescGZIP(), []int{10}
}

func (x *RummyMatchSelectRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyMatchSelectRsp) GetData() []*RummySettleMatch {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RummyMatchSelectRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_client_db_rummy_proto protoreflect.FileDescriptor

var file_client_db_rummy_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x62, 0x5f, 0x72, 0x75, 0x6d, 0x6d,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x11,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe6, 0x03, 0x0a, 0x10, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6b,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61,
	0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x74, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6e, 0x74, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa8, 0x04, 0x0a, 0x0f, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x43,
	0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6b, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x22, 0x42, 0x0a, 0x14, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x14, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x22,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7c, 0x0a, 0x14, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x19, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d,
	0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x19, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x22, 0x5f, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_client_db_rummy_proto_rawDescOnce sync.Once
	file_client_db_rummy_proto_rawDescData []byte
)

func file_client_db_rummy_proto_rawDescGZIP() []byte {
	file_client_db_rummy_proto_rawDescOnce.Do(func() {
		file_client_db_rummy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_db_rummy_proto_rawDesc), len(file_client_db_rummy_proto_rawDesc)))
	})
	return file_client_db_rummy_proto_rawDescData
}

var file_client_db_rummy_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_client_db_rummy_proto_goTypes = []any{
	(*RummySettleMatch)(nil),          // 0: poker.RummySettleMatch
	(*RummyActionRecord)(nil),         // 1: poker.RummyActionRecord
	(*RummySettleData)(nil),           // 2: poker.RummySettleData
	(*RummySettleInsertReq)(nil),      // 3: poker.RummySettleInsertReq
	(*RummySettleInsertRsp)(nil),      // 4: poker.RummySettleInsertRsp
	(*RummySettleSelectReq)(nil),      // 5: poker.RummySettleSelectReq
	(*RummySettleSelectRsp)(nil),      // 6: poker.RummySettleSelectRsp
	(*RummySettleMatchInsertReq)(nil), // 7: poker.RummySettleMatchInsertReq
	(*RummySettleMatchInsertRsp)(nil), // 8: poker.RummySettleMatchInsertRsp
	(*RummyMatchSelectReq)(nil),       // 9: poker.RummyMatchSelectReq
	(*RummyMatchSelectRsp)(nil),       // 10: poker.RummyMatchSelectRsp
	(GameType)(0),                     // 11: poker.GameType
	(RoomType)(0),                     // 12: poker.RoomType
	(CoinType)(0),                     // 13: poker.CoinType
	(*RummySettlePlayerInfo)(nil),     // 14: poker.RummySettlePlayerInfo
	(RummyEventType)(0),               // 15: poker.RummyEventType
	(*RummyCardGroup)(nil),            // 16: poker.RummyCardGroup
	(RummyPlayState)(0),               // 17: poker.RummyPlayState
	(*RspHead)(nil),                   // 18: poker.RspHead
}
var file_client_db_rummy_proto_depIdxs = []int32{
	11, // 0: poker.RummySettleMatch.game_type:type_name -> poker.GameType
	12, // 1: poker.RummySettleMatch.room_type:type_name -> poker.RoomType
	13, // 2: poker.RummySettleMatch.coin_type:type_name -> poker.CoinType
	14, // 3: poker.RummySettleMatch.players:type_name -> poker.RummySettlePlayerInfo
	15, // 4: poker.RummyActionRecord.type:type_name -> poker.RummyEventType
	16, // 5: poker.RummySettleData.groups:type_name -> poker.RummyCardGroup
	17, // 6: poker.RummySettleData.state:type_name -> poker.RummyPlayState
	11, // 7: poker.RummySettleData.game_type:type_name -> poker.GameType
	12, // 8: poker.RummySettleData.room_type:type_name -> poker.RoomType
	13, // 9: poker.RummySettleData.coin_type:type_name -> poker.CoinType
	2,  // 10: poker.RummySettleInsertReq.data:type_name -> poker.RummySettleData
	18, // 11: poker.RummySettleInsertRsp.head:type_name -> poker.RspHead
	18, // 12: poker.RummySettleSelectRsp.head:type_name -> poker.RspHead
	2,  // 13: poker.RummySettleSelectRsp.data:type_name -> poker.RummySettleData
	0,  // 14: poker.RummySettleMatchInsertReq.data:type_name -> poker.RummySettleMatch
	18, // 15: poker.RummySettleMatchInsertRsp.head:type_name -> poker.RspHead
	18, // 16: poker.RummyMatchSelectRsp.head:type_name -> poker.RspHead
	0,  // 17: poker.RummyMatchSelectRsp.data:type_name -> poker.RummySettleMatch
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_client_db_rummy_proto_init() }
func file_client_db_rummy_proto_init() {
	if File_client_db_rummy_proto != nil {
		return
	}
	file_global_enum_proto_init()
	file_global_enum_cfg_proto_init()
	file_client_room_rummy_proto_init()
	file_packet_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_db_rummy_proto_rawDesc), len(file_client_db_rummy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_db_rummy_proto_goTypes,
		DependencyIndexes: file_client_db_rummy_proto_depIdxs,
		MessageInfos:      file_client_db_rummy_proto_msgTypes,
	}.Build()
	File_client_db_rummy_proto = out.File
	file_client_db_rummy_proto_goTypes = nil
	file_client_db_rummy_proto_depIdxs = nil
}
