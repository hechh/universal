// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: protocol.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ------------------------------
type Protocol_Player int32

const (
	Protocol_Player_P_C2S_Protocol_Player         Protocol_Player = 0   // 玩家操作请求	_emC2S_Player_Protocol
	Protocol_Player_P_C2S_Protocol_Common         Protocol_Player = 1   // 通用功能模块 _emC2S_Common_Protocol
	Protocol_Player_P_C2S_Protocol_Copymap        Protocol_Player = 2   // 副本模块 _emC2S_Copymap_Protocol
	Protocol_Player_P_C2S_Protocol_Pet            Protocol_Player = 3   // 伙伴模块 _emC2S_Pet_Protocol
	Protocol_Player_P_C2S_Protocol_Item           Protocol_Player = 4   // 道具模块 _emC2S_Item_Protocol
	Protocol_Player_P_C2S_Protocol_Fight          Protocol_Player = 5   // 战斗模块 _emC2S_Fight_Protocol
	Protocol_Player_P_C2S_Protocol_Task           Protocol_Player = 6   // 任务模块 _emC2S_Task_Protocol
	Protocol_Player_P_C2S_Protocol_Mail           Protocol_Player = 7   // 邮件系统 _emC2S_Mail_Protocol
	Protocol_Player_P_C2S_Protocol_TopList        Protocol_Player = 8   // 排行榜系统 _emC2S_TopList_Protocol
	Protocol_Player_P_C2S_Protocol_Challenge      Protocol_Player = 9   // 竞技场	_emC2S_Challenge_Protocol
	Protocol_Player_P_C2S_Protocol_Faction        Protocol_Player = 10  // 帮派相关操作 _emC2S_Faction_Protocol
	Protocol_Player_P_C2S_Protocol_Team           Protocol_Player = 11  // 帮派相关操作 _emC2S_Team_Protocol
	Protocol_Player_P_C2S_Protocol_Call           Protocol_Player = 12  // 召唤系统 _emC2S_Call_Protocol
	Protocol_Player_P_C2S_Protocol_Sail           Protocol_Player = 13  // 远航系统 _emC2S_Sail_Protocol
	Protocol_Player_P_C2S_Protocol_Hook           Protocol_Player = 14  // 挂机系统 _emC2S_Hook_Protocol
	Protocol_Player_P_C2S_Protocol_Artifact       Protocol_Player = 15  // 神器系统 _emC2S_Artifact_Protocol
	Protocol_Player_P_C2S_Protocol_Shop           Protocol_Player = 16  // 商店系统 _emC2S_Shop_Protocol
	Protocol_Player_P_C2S_Protocol_Train          Protocol_Player = 17  // 试炼系统 _emC2S_Train_Protocol
	Protocol_Player_P_C2S_Protocol_Achieve        Protocol_Player = 18  // 成就系统 _emC2S_Achieve_Protocol
	Protocol_Player_P_C2S_Protocol_Expedition     Protocol_Player = 19  // 远征系统 _emC2S_Expedition_Protocol
	Protocol_Player_P_C2S_Protocol_Shape          Protocol_Player = 20  // 外显系统 _emC2S_Shape_Protocol
	Protocol_Player_P_C2S_Protocol_Temple         Protocol_Player = 21  // 神殿系统 _emC2S_Temple_Protocol
	Protocol_Player_P_C2S_Protocol_Friend         Protocol_Player = 22  // 好友系统 _emC2S_Friend_Protocol
	Protocol_Player_P_C2S_Protocol_Element        Protocol_Player = 23  // 元素系统 _emC2S_Element_Protocol
	Protocol_Player_P_C2S_Protocol_Risk           Protocol_Player = 24  // 冒险系统 _emC2S_Risk_Protocol
	Protocol_Player_P_C2S_Protocol_Dan            Protocol_Player = 25  // 超凡段位系统 _emC2S_Dan_Protocol
	Protocol_Player_P_C2S_Protocol_Ladder         Protocol_Player = 26  // 跨服天梯系统 _emC2S_Ladder_Protocol
	Protocol_Player_P_C2S_Protocol_Champion       Protocol_Player = 27  // 冠军赛系统 _emC2S_Champion_Protocol
	Protocol_Player_P_C2S_Protocol_Holy           Protocol_Player = 28  // 圣物系统 _emC2S_Holy_Protocol
	Protocol_Player_P_C2S_Protocol_Video          Protocol_Player = 29  // 录像系统 _emC2S_Video_Protocol
	Protocol_Player_P_C2S_Protocol_Privilege      Protocol_Player = 30  // 特权系统 _emC2S_Privilege_Protocol
	Protocol_Player_P_C2S_Protocol_Weal           Protocol_Player = 31  // 福利系统 _emC2S_Weal_Protocol
	Protocol_Player_P_C2S_Protocol_Activity       Protocol_Player = 32  // 活动系统 _emC2S_Activity_Protocol
	Protocol_Player_P_C2S_Protocol_Platform       Protocol_Player = 33  // 平台系统 _emC2S_Platform_Protocol
	Protocol_Player_P_C2S_Protocol_Talk           Protocol_Player = 34  // 聊天系统 _emC2S_Talk_Protocol
	Protocol_Player_P_C2S_Protocol_Treasure       Protocol_Player = 35  // 探宝系统 _emC2S_Treasure_Protocol
	Protocol_Player_P_C2S_Protocol_HeavenDungeon  Protocol_Player = 36  // 天界副本系统 _emC2S_HeavenDungeon_Protocol
	Protocol_Player_P_C2S_Protocol_CrossChallenge Protocol_Player = 37  // 跨服竞技场 _emC2S_CrossChallenge_Protocol
	Protocol_Player_P_C2S_Protocol_Tablet         Protocol_Player = 38  // 晶碑 _emC2S_Tablet_Protocol
	Protocol_Player_P_C2S_Protocol_WeekChampion   Protocol_Player = 39  // 周冠军赛 _emC2S_WeekChampion_Protocol
	Protocol_Player_P_C2S_Protocol_TeamCampaign   Protocol_Player = 40  // 组队征战 _emC2S_TeamCampaign_Protocol
	Protocol_Player_P_C2S_Protocol_Operate        Protocol_Player = 255 // 网络层相关操作 _emC2S_Operate_Protocol
)

// Enum value maps for Protocol_Player.
var (
	Protocol_Player_name = map[int32]string{
		0:   "P_C2S_Protocol_Player",
		1:   "P_C2S_Protocol_Common",
		2:   "P_C2S_Protocol_Copymap",
		3:   "P_C2S_Protocol_Pet",
		4:   "P_C2S_Protocol_Item",
		5:   "P_C2S_Protocol_Fight",
		6:   "P_C2S_Protocol_Task",
		7:   "P_C2S_Protocol_Mail",
		8:   "P_C2S_Protocol_TopList",
		9:   "P_C2S_Protocol_Challenge",
		10:  "P_C2S_Protocol_Faction",
		11:  "P_C2S_Protocol_Team",
		12:  "P_C2S_Protocol_Call",
		13:  "P_C2S_Protocol_Sail",
		14:  "P_C2S_Protocol_Hook",
		15:  "P_C2S_Protocol_Artifact",
		16:  "P_C2S_Protocol_Shop",
		17:  "P_C2S_Protocol_Train",
		18:  "P_C2S_Protocol_Achieve",
		19:  "P_C2S_Protocol_Expedition",
		20:  "P_C2S_Protocol_Shape",
		21:  "P_C2S_Protocol_Temple",
		22:  "P_C2S_Protocol_Friend",
		23:  "P_C2S_Protocol_Element",
		24:  "P_C2S_Protocol_Risk",
		25:  "P_C2S_Protocol_Dan",
		26:  "P_C2S_Protocol_Ladder",
		27:  "P_C2S_Protocol_Champion",
		28:  "P_C2S_Protocol_Holy",
		29:  "P_C2S_Protocol_Video",
		30:  "P_C2S_Protocol_Privilege",
		31:  "P_C2S_Protocol_Weal",
		32:  "P_C2S_Protocol_Activity",
		33:  "P_C2S_Protocol_Platform",
		34:  "P_C2S_Protocol_Talk",
		35:  "P_C2S_Protocol_Treasure",
		36:  "P_C2S_Protocol_HeavenDungeon",
		37:  "P_C2S_Protocol_CrossChallenge",
		38:  "P_C2S_Protocol_Tablet",
		39:  "P_C2S_Protocol_WeekChampion",
		40:  "P_C2S_Protocol_TeamCampaign",
		255: "P_C2S_Protocol_Operate",
	}
	Protocol_Player_value = map[string]int32{
		"P_C2S_Protocol_Player":         0,
		"P_C2S_Protocol_Common":         1,
		"P_C2S_Protocol_Copymap":        2,
		"P_C2S_Protocol_Pet":            3,
		"P_C2S_Protocol_Item":           4,
		"P_C2S_Protocol_Fight":          5,
		"P_C2S_Protocol_Task":           6,
		"P_C2S_Protocol_Mail":           7,
		"P_C2S_Protocol_TopList":        8,
		"P_C2S_Protocol_Challenge":      9,
		"P_C2S_Protocol_Faction":        10,
		"P_C2S_Protocol_Team":           11,
		"P_C2S_Protocol_Call":           12,
		"P_C2S_Protocol_Sail":           13,
		"P_C2S_Protocol_Hook":           14,
		"P_C2S_Protocol_Artifact":       15,
		"P_C2S_Protocol_Shop":           16,
		"P_C2S_Protocol_Train":          17,
		"P_C2S_Protocol_Achieve":        18,
		"P_C2S_Protocol_Expedition":     19,
		"P_C2S_Protocol_Shape":          20,
		"P_C2S_Protocol_Temple":         21,
		"P_C2S_Protocol_Friend":         22,
		"P_C2S_Protocol_Element":        23,
		"P_C2S_Protocol_Risk":           24,
		"P_C2S_Protocol_Dan":            25,
		"P_C2S_Protocol_Ladder":         26,
		"P_C2S_Protocol_Champion":       27,
		"P_C2S_Protocol_Holy":           28,
		"P_C2S_Protocol_Video":          29,
		"P_C2S_Protocol_Privilege":      30,
		"P_C2S_Protocol_Weal":           31,
		"P_C2S_Protocol_Activity":       32,
		"P_C2S_Protocol_Platform":       33,
		"P_C2S_Protocol_Talk":           34,
		"P_C2S_Protocol_Treasure":       35,
		"P_C2S_Protocol_HeavenDungeon":  36,
		"P_C2S_Protocol_CrossChallenge": 37,
		"P_C2S_Protocol_Tablet":         38,
		"P_C2S_Protocol_WeekChampion":   39,
		"P_C2S_Protocol_TeamCampaign":   40,
		"P_C2S_Protocol_Operate":        255,
	}
)

func (x Protocol_Player) Enum() *Protocol_Player {
	p := new(Protocol_Player)
	*p = x
	return p
}

func (x Protocol_Player) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_Player) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_enumTypes[0].Descriptor()
}

func (Protocol_Player) Type() protoreflect.EnumType {
	return &file_protocol_proto_enumTypes[0]
}

func (x Protocol_Player) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_Player.Descriptor instead.
func (Protocol_Player) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x2a, 0x93, 0x09, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x5f, 0x43, 0x32,
	0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x43, 0x6f, 0x70, 0x79, 0x6d, 0x61, 0x70, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x5f,
	0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x50, 0x65, 0x74,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x5f, 0x43, 0x32, 0x53,
	0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10,
	0x09, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x54, 0x65, 0x61, 0x6d, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x0c, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x53, 0x61, 0x69, 0x6c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32,
	0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x48, 0x6f, 0x6f, 0x6b, 0x10,
	0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x10, 0x0f, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x5f, 0x43, 0x32, 0x53,
	0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x10,
	0x11, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x10, 0x12, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x10,
	0x15, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32,
	0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x52, 0x69, 0x73, 0x6b, 0x10,
	0x18, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x44, 0x61, 0x6e, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x5f, 0x43,
	0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x4c, 0x61, 0x64, 0x64,
	0x65, 0x72, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x10,
	0x1b, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x48, 0x6f, 0x6c, 0x79, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x5f,
	0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x10, 0x1d, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x57, 0x65, 0x61, 0x6c, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x5f, 0x43, 0x32,
	0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x61, 0x6c, 0x6b, 0x10, 0x22, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x10, 0x23, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x48, 0x65,
	0x61, 0x76, 0x65, 0x6e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x10, 0x24, 0x12, 0x21, 0x0a,
	0x1d, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x25,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x10, 0x26, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x57, 0x65,
	0x65, 0x6b, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x10, 0x27, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x10, 0x28, 0x12, 0x1b, 0x0a,
	0x16, 0x50, 0x5f, 0x43, 0x32, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0xff, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protocol_proto_goTypes = []interface{}{
	(Protocol_Player)(0), // 0: pb.Protocol_Player
}
var file_protocol_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_proto_enumTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
