// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: errors.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 错误码
type ErrorCode int32

const (
	ErrorCode_SUCCESS                 ErrorCode = 0  // 成功
	ErrorCode_UNKNOWN                 ErrorCode = 1  // 未知错误
	ErrorCode_FAILED                  ErrorCode = 2  // 失败
	ErrorCode_OPEN_FILE_FAILED        ErrorCode = 3  // 打开文件失败
	ErrorCode_PARSE_FAILED            ErrorCode = 4  // 解析失败
	ErrorCode_CONFIG_NOT_FOUND        ErrorCode = 5  // 配置文件不存在
	ErrorCode_CONNECT_FAILED          ErrorCode = 6  // 网络连接失败
	ErrorCode_PING_FAILED             ErrorCode = 7  // ping失败
	ErrorCode_CLIENT_NOT_FOUND        ErrorCode = 8  // 客户端未找到
	ErrorCode_FUNC_NOT_FOUND          ErrorCode = 9  // 函数未找到
	ErrorCode_ACTOR_ID_NOT_FOUND      ErrorCode = 10 // Actor ID未找到
	ErrorCode_SEND_TYPE_NOT_SUPPORTED ErrorCode = 11 // 发送类型不支持
	ErrorCode_ACTOR_NOT_SUPPORTED     ErrorCode = 12 // Actor未找到
	ErrorCode_SUBSCRIBE_FAILED        ErrorCode = 13 // 订阅失败
	ErrorCode_MARSHAL_FAILED          ErrorCode = 14 // 序列化失败
	ErrorCode_UNMARSHAL_FAILED        ErrorCode = 15 // 反序列化失败
	ErrorCode_REQUEST_FAIELD          ErrorCode = 16 // 请求失败
	ErrorCode_PARAM_INVALID           ErrorCode = 17 // 参数检查失败
	ErrorCode_NODE_NOT_FOUND          ErrorCode = 18 // 节点未找到
	ErrorCode_MAX_SIZE_LIMIT          ErrorCode = 19 // 超过最大限制
	ErrorCode_MIN_SIZE_LIMIT          ErrorCode = 20 // 小于最小限制
	ErrorCode_READ_FAIELD             ErrorCode = 21 // 读取失败
	ErrorCode_WRITE_FAIELD            ErrorCode = 22 // 写入失败
	ErrorCode_TYPE_ASSERT_FAILED      ErrorCode = 23 // 类型转换失败
	ErrorCode_CMD_NOT_FOUND           ErrorCode = 24 // 命令未找到
	ErrorCode_TIME_OUT                ErrorCode = 25 // 超时
	ErrorCode_SYSTEM_CALL_FAILED      ErrorCode = 26 // 系统调用失败
	ErrorCode_TYPE_NOT_SUPPORTED      ErrorCode = 27 // 类型不支持
	ErrorCode_PLAYER_NOT_FOUND        ErrorCode = 28 // 玩家未找到
	ErrorCode_NIL_POINTER             ErrorCode = 29 // 空指针异常
	ErrorCode_MYSQL_READ_FAILED       ErrorCode = 30 // mysql读数据失败
	ErrorCode_MYSQL_SAVE_FAILED       ErrorCode = 31 // mysql写数据失败
	ErrorCode_NODE_TYPE_NOT_SUPPORTED ErrorCode = 32 // 节点类型不支持
	// game错误码
	ErrorCode_GAME_PROP_NOT_ENOUGH      ErrorCode = 500 // 游戏道具不足
	ErrorCode_GAME_PLAYER_NOT_LOGIN     ErrorCode = 501 // 玩家未登录
	ErrorCode_GAME_PLAYER_IN_OTHER_GAME ErrorCode = 502 // 玩家已在其他游戏中
	ErrorCode_GAME_PLAYER_NOT_IN_ROOM   ErrorCode = 503 // 玩家未在游戏中
	// match错误码
	ErrorCode_MATCH_PLAYER_IN_QUEUE ErrorCode = 600 //游戏已在匹配序列中
	ErrorCode_MATCH_FINISH          ErrorCode = 601 //匹配已结束
	// db错误码
	ErrorCode_DB_TEXAS_GAME_DATA_NOT_FOUND ErrorCode = 2000 // 数据不存在
	// 德州扑克错误码
	ErrorCode_TEXAS_ROOM_NOT_FOUND           ErrorCode = 10000 // 德州房间未找到
	ErrorCode_TEXAS_PLAYER_NOT_IN_ROOM       ErrorCode = 10001 // 德州玩家未找到
	ErrorCode_TEXAS_PLAYER_IN_GAME           ErrorCode = 10002 // 德州玩家已在游戏中
	ErrorCode_TEXAS_ROOM_IS_FULL             ErrorCode = 10003 // 德州房间已满
	ErrorCode_TEXAS_CHIPS_NOT_ENOUGH         ErrorCode = 10004 // 德州筹码不足
	ErrorCode_TEXAS_PLAYER_SIT_DOWN_REPEATED ErrorCode = 10005 // 德州玩家已坐下
	ErrorCode_TEXAS_CHAIR_HAS_OCCUPIED       ErrorCode = 10006 // 德州座位已被占用
	ErrorCode_TEXAS_PLAYER_HAS_STAND_UP      ErrorCode = 10007 // 德州玩家未坐下
	ErrorCode_TEXAS_PLAYER_HAS_ALL_IN        ErrorCode = 10008 // 德州玩家已全下
	ErrorCode_TEXAS_PLAYER_HAS_FOLD          ErrorCode = 10009 // 德州玩家已弃牌
	ErrorCode_TEXAS_ROOM_MAX_PLAYER_LIMIT    ErrorCode = 10010 // 房间最大人数限制
	ErrorCode_TEXAS_ROOM_HAS_DESTROY         ErrorCode = 10011 // 房间已经销毁
	// rummy错误码
	ErrorCode_RUMMY_ROOM_NOT_FOUND        ErrorCode = 11000 // rummy房间未找到
	ErrorCode_RUMMY_PLAYER_NOT_IN_ROOM    ErrorCode = 11001 // rummy玩家未找到
	ErrorCode_RUMMY_PLAYER_NOT_PLAY       ErrorCode = 11002 // rummy玩家未在游戏中
	ErrorCode_RUMMY_PLAYER_DATA_INVAILD   ErrorCode = 11003 // rummy玩家提交数据与服务端不匹配
	ErrorCode_RUMMY_PLAYER_STEP_INVAILD   ErrorCode = 11004 // 非当前玩家回合
	ErrorCode_RUMMY_PLAYER_ACTION_INVAILD ErrorCode = 11005 // 非当前玩家回合可执行操作
	ErrorCode_RUMMY_PLAYER_FRAUD          ErrorCode = 11006 //炸胡
	ErrorCode_RUMMY_PLAYER_GAMEING        ErrorCode = 11007 //游戏未结束
	ErrorCode_RUMMY_ROOM_FULL             ErrorCode = 11008 //房间座位已满
	ErrorCode_RUMMY_ROOM_CLOSE            ErrorCode = 11009 // rummy房间已关闭
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:     "SUCCESS",
		1:     "UNKNOWN",
		2:     "FAILED",
		3:     "OPEN_FILE_FAILED",
		4:     "PARSE_FAILED",
		5:     "CONFIG_NOT_FOUND",
		6:     "CONNECT_FAILED",
		7:     "PING_FAILED",
		8:     "CLIENT_NOT_FOUND",
		9:     "FUNC_NOT_FOUND",
		10:    "ACTOR_ID_NOT_FOUND",
		11:    "SEND_TYPE_NOT_SUPPORTED",
		12:    "ACTOR_NOT_SUPPORTED",
		13:    "SUBSCRIBE_FAILED",
		14:    "MARSHAL_FAILED",
		15:    "UNMARSHAL_FAILED",
		16:    "REQUEST_FAIELD",
		17:    "PARAM_INVALID",
		18:    "NODE_NOT_FOUND",
		19:    "MAX_SIZE_LIMIT",
		20:    "MIN_SIZE_LIMIT",
		21:    "READ_FAIELD",
		22:    "WRITE_FAIELD",
		23:    "TYPE_ASSERT_FAILED",
		24:    "CMD_NOT_FOUND",
		25:    "TIME_OUT",
		26:    "SYSTEM_CALL_FAILED",
		27:    "TYPE_NOT_SUPPORTED",
		28:    "PLAYER_NOT_FOUND",
		29:    "NIL_POINTER",
		30:    "MYSQL_READ_FAILED",
		31:    "MYSQL_SAVE_FAILED",
		32:    "NODE_TYPE_NOT_SUPPORTED",
		500:   "GAME_PROP_NOT_ENOUGH",
		501:   "GAME_PLAYER_NOT_LOGIN",
		502:   "GAME_PLAYER_IN_OTHER_GAME",
		503:   "GAME_PLAYER_NOT_IN_ROOM",
		600:   "MATCH_PLAYER_IN_QUEUE",
		601:   "MATCH_FINISH",
		2000:  "DB_TEXAS_GAME_DATA_NOT_FOUND",
		10000: "TEXAS_ROOM_NOT_FOUND",
		10001: "TEXAS_PLAYER_NOT_IN_ROOM",
		10002: "TEXAS_PLAYER_IN_GAME",
		10003: "TEXAS_ROOM_IS_FULL",
		10004: "TEXAS_CHIPS_NOT_ENOUGH",
		10005: "TEXAS_PLAYER_SIT_DOWN_REPEATED",
		10006: "TEXAS_CHAIR_HAS_OCCUPIED",
		10007: "TEXAS_PLAYER_HAS_STAND_UP",
		10008: "TEXAS_PLAYER_HAS_ALL_IN",
		10009: "TEXAS_PLAYER_HAS_FOLD",
		10010: "TEXAS_ROOM_MAX_PLAYER_LIMIT",
		10011: "TEXAS_ROOM_HAS_DESTROY",
		11000: "RUMMY_ROOM_NOT_FOUND",
		11001: "RUMMY_PLAYER_NOT_IN_ROOM",
		11002: "RUMMY_PLAYER_NOT_PLAY",
		11003: "RUMMY_PLAYER_DATA_INVAILD",
		11004: "RUMMY_PLAYER_STEP_INVAILD",
		11005: "RUMMY_PLAYER_ACTION_INVAILD",
		11006: "RUMMY_PLAYER_FRAUD",
		11007: "RUMMY_PLAYER_GAMEING",
		11008: "RUMMY_ROOM_FULL",
		11009: "RUMMY_ROOM_CLOSE",
	}
	ErrorCode_value = map[string]int32{
		"SUCCESS":                        0,
		"UNKNOWN":                        1,
		"FAILED":                         2,
		"OPEN_FILE_FAILED":               3,
		"PARSE_FAILED":                   4,
		"CONFIG_NOT_FOUND":               5,
		"CONNECT_FAILED":                 6,
		"PING_FAILED":                    7,
		"CLIENT_NOT_FOUND":               8,
		"FUNC_NOT_FOUND":                 9,
		"ACTOR_ID_NOT_FOUND":             10,
		"SEND_TYPE_NOT_SUPPORTED":        11,
		"ACTOR_NOT_SUPPORTED":            12,
		"SUBSCRIBE_FAILED":               13,
		"MARSHAL_FAILED":                 14,
		"UNMARSHAL_FAILED":               15,
		"REQUEST_FAIELD":                 16,
		"PARAM_INVALID":                  17,
		"NODE_NOT_FOUND":                 18,
		"MAX_SIZE_LIMIT":                 19,
		"MIN_SIZE_LIMIT":                 20,
		"READ_FAIELD":                    21,
		"WRITE_FAIELD":                   22,
		"TYPE_ASSERT_FAILED":             23,
		"CMD_NOT_FOUND":                  24,
		"TIME_OUT":                       25,
		"SYSTEM_CALL_FAILED":             26,
		"TYPE_NOT_SUPPORTED":             27,
		"PLAYER_NOT_FOUND":               28,
		"NIL_POINTER":                    29,
		"MYSQL_READ_FAILED":              30,
		"MYSQL_SAVE_FAILED":              31,
		"NODE_TYPE_NOT_SUPPORTED":        32,
		"GAME_PROP_NOT_ENOUGH":           500,
		"GAME_PLAYER_NOT_LOGIN":          501,
		"GAME_PLAYER_IN_OTHER_GAME":      502,
		"GAME_PLAYER_NOT_IN_ROOM":        503,
		"MATCH_PLAYER_IN_QUEUE":          600,
		"MATCH_FINISH":                   601,
		"DB_TEXAS_GAME_DATA_NOT_FOUND":   2000,
		"TEXAS_ROOM_NOT_FOUND":           10000,
		"TEXAS_PLAYER_NOT_IN_ROOM":       10001,
		"TEXAS_PLAYER_IN_GAME":           10002,
		"TEXAS_ROOM_IS_FULL":             10003,
		"TEXAS_CHIPS_NOT_ENOUGH":         10004,
		"TEXAS_PLAYER_SIT_DOWN_REPEATED": 10005,
		"TEXAS_CHAIR_HAS_OCCUPIED":       10006,
		"TEXAS_PLAYER_HAS_STAND_UP":      10007,
		"TEXAS_PLAYER_HAS_ALL_IN":        10008,
		"TEXAS_PLAYER_HAS_FOLD":          10009,
		"TEXAS_ROOM_MAX_PLAYER_LIMIT":    10010,
		"TEXAS_ROOM_HAS_DESTROY":         10011,
		"RUMMY_ROOM_NOT_FOUND":           11000,
		"RUMMY_PLAYER_NOT_IN_ROOM":       11001,
		"RUMMY_PLAYER_NOT_PLAY":          11002,
		"RUMMY_PLAYER_DATA_INVAILD":      11003,
		"RUMMY_PLAYER_STEP_INVAILD":      11004,
		"RUMMY_PLAYER_ACTION_INVAILD":    11005,
		"RUMMY_PLAYER_FRAUD":             11006,
		"RUMMY_PLAYER_GAMEING":           11007,
		"RUMMY_ROOM_FULL":                11008,
		"RUMMY_ROOM_CLOSE":               11009,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

var File_errors_proto protoreflect.FileDescriptor

var file_errors_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2a, 0xf5, 0x0b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41,
	0x52, 0x53, 0x48, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x12, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x49, 0x4c,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x59,
	0x53, 0x51, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x1e, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0xf4, 0x03,
	0x12, 0x1a, 0x0a, 0x15, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xf5, 0x03, 0x12, 0x1e, 0x0a, 0x19,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0xf6, 0x03, 0x12, 0x1c, 0x0a, 0x17,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0xf7, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x10, 0xd8, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0xd9, 0x04, 0x12, 0x21, 0x0a, 0x1c, 0x44, 0x42, 0x5f,
	0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xd0, 0x0f, 0x12, 0x19, 0x0a, 0x14,
	0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x90, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x45, 0x58, 0x41, 0x53,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x10, 0x91, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x92,
	0x4e, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x49, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x93, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x45,
	0x58, 0x41, 0x53, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e,
	0x4f, 0x55, 0x47, 0x48, 0x10, 0x94, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x54, 0x45, 0x58, 0x41, 0x53,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x95, 0x4e, 0x12, 0x1d, 0x0a, 0x18,
	0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x96, 0x4e, 0x12, 0x1e, 0x0a, 0x19, 0x54,
	0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x50, 0x10, 0x97, 0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x54,
	0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x98, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x45, 0x58,
	0x41, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x46, 0x4f,
	0x4c, 0x44, 0x10, 0x99, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x9a, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x45, 0x58, 0x41, 0x53,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f,
	0x59, 0x10, 0x9b, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xf8, 0x55, 0x12,
	0x1d, 0x0a, 0x18, 0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0xf9, 0x55, 0x12, 0x1a,
	0x0a, 0x15, 0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0xfa, 0x55, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x55,
	0x4d, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x49, 0x4c, 0x44, 0x10, 0xfb, 0x55, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x55,
	0x4d, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x49, 0x4c, 0x44, 0x10, 0xfc, 0x55, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x55,
	0x4d, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x49, 0x4c, 0x44, 0x10, 0xfd, 0x55, 0x12, 0x17, 0x0a, 0x12,
	0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x10, 0xfe, 0x55, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x4e, 0x47, 0x10, 0xff, 0x55,
	0x12, 0x14, 0x0a, 0x0f, 0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x80, 0x56, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x81, 0x56, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_errors_proto_rawDescOnce sync.Once
	file_errors_proto_rawDescData []byte
)

func file_errors_proto_rawDescGZIP() []byte {
	file_errors_proto_rawDescOnce.Do(func() {
		file_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_errors_proto_rawDesc), len(file_errors_proto_rawDesc)))
	})
	return file_errors_proto_rawDescData
}

var file_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_errors_proto_goTypes = []any{
	(ErrorCode)(0), // 0: poker.ErrorCode
}
var file_errors_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_errors_proto_init() }
func file_errors_proto_init() {
	if File_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_errors_proto_rawDesc), len(file_errors_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errors_proto_goTypes,
		DependencyIndexes: file_errors_proto_depIdxs,
		EnumInfos:         file_errors_proto_enumTypes,
	}.Build()
	File_errors_proto = out.File
	file_errors_proto_goTypes = nil
	file_errors_proto_depIdxs = nil
}
