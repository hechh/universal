// Code generated by protoc-gen-go-xorm. DO NOT EDIT.
// Source: client_game.proto

package pb

import (
	"github.com/golang/protobuf/proto"
)

func (x *GetBagReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *GetBagReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *GetBagRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *GetBagRsp) SetList(val []*PbItem) {
	x.List = val
}

func (x *GetBagRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *GetBagRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RewardReq) SetRewardList(val []*Reward) {
	x.RewardList = val
}

func (x *RewardReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RewardReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RewardRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *RewardRsp) SetRewardList(val []*Reward) {
	x.RewardList = val
}

func (x *RewardRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RewardRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *ConsumeReq) SetRewardList(val []*Reward) {
	x.RewardList = val
}

func (x *ConsumeReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *ConsumeReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *ConsumeRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *ConsumeRsp) SetRewardList(val []*Reward) {
	x.RewardList = val
}

func (x *ConsumeRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *ConsumeRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *HttpRspHead) SetCode(val int32) {
	x.Code = val
}

func (x *HttpRspHead) SetMessage(val string) {
	x.Message = val
}

func (x *HttpRspHead) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *HttpRspHead) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *HttpPlayerInfoRsp) SetRespMsg(val *HttpRspHead) {
	x.RespMsg = val
}

func (x *HttpPlayerInfoRsp) SetRespData(val *PlayerInfo) {
	x.RespData = val
}

func (x *HttpPlayerInfoRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *HttpPlayerInfoRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *QueryPlayerDataReq) SetUid(val uint64) {
	x.Uid = val
}

func (x *QueryPlayerDataReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *QueryPlayerDataReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *QueryPlayerDataRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *QueryPlayerDataRsp) SetData(val *PlayerDataBase) {
	x.Data = val
}

func (x *QueryPlayerDataRsp) SetMatchType(val MatchType) {
	x.MatchType = val
}

func (x *QueryPlayerDataRsp) SetGameType(val GameType) {
	x.GameType = val
}

func (x *QueryPlayerDataRsp) SetRoomType(val RoomType) {
	x.RoomType = val
}

func (x *QueryPlayerDataRsp) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *QueryPlayerDataRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *QueryPlayerDataRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyChangeRoomReq) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyChangeRoomReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyChangeRoomReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyChangeRoomRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *RummyChangeRoomRsp) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyChangeRoomRsp) SetRoomInfo(val *RummyRoomPubData) {
	x.RoomInfo = val
}

func (x *RummyChangeRoomRsp) SetIsReconnect(val bool) {
	x.IsReconnect = val
}

func (x *RummyChangeRoomRsp) SetGaveScore(val int64) {
	x.GaveScore = val
}

func (x *RummyChangeRoomRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyChangeRoomRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *SetPlayerStatus) SetUid(val uint64) {
	x.Uid = val
}

func (x *SetPlayerStatus) SetStatus(val PlayerStatus) {
	x.Status = val
}

func (x *SetPlayerStatus) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *SetPlayerStatus) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TransParam) SetGameSn(val string) {
	x.GameSn = val
}

func (x *TransParam) SetGameType(val GameType) {
	x.GameType = val
}

func (x *TransParam) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *TransParam) SetIncr(val int64) {
	x.Incr = val
}

func (x *TransParam) SetUid(val uint64) {
	x.Uid = val
}

func (x *TransParam) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TransParam) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TransInfo) SetUid(val string) {
	x.Uid = val
}

func (x *TransInfo) SetGameSn(val string) {
	x.GameSn = val
}

func (x *TransInfo) SetBalance(val int64) {
	x.Balance = val
}

func (x *TransInfo) SetChange(val int64) {
	x.Change = val
}

func (x *TransInfo) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TransInfo) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *HttpTransferInRsp) SetRespMsg(val *HttpRspHead) {
	x.RespMsg = val
}

func (x *HttpTransferInRsp) SetRespData(val *TransInfo) {
	x.RespData = val
}

func (x *HttpTransferInRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *HttpTransferInRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *HttpTransferOutRsp) SetRespMsg(val *HttpRspHead) {
	x.RespMsg = val
}

func (x *HttpTransferOutRsp) SetRespData(val *TransInfo) {
	x.RespData = val
}

func (x *HttpTransferOutRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *HttpTransferOutRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *TexasFinishNotify) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *TexasFinishNotify) SetPropId(val uint32) {
	x.PropId = val
}

func (x *TexasFinishNotify) SetIncr(val int64) {
	x.Incr = val
}

func (x *TexasFinishNotify) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *TexasFinishNotify) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}
