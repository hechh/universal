// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: database.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ----------------------------builder生成器数据--------------------------
type GeneratorInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Id            GeneratorType          `protobuf:"varint,1,opt,name=id,proto3,enum=poker.GeneratorType" json:"id,omitempty"` // 生成器ID
	Incr          uint32                 `protobuf:"varint,2,opt,name=incr,proto3" json:"incr,omitempty"`                      // 增量
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *GeneratorInfo) Reset() {
	*x = GeneratorInfo{}
	mi := &file_database_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratorInfo) ProtoMessage() {}

func (x *GeneratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratorInfo.ProtoReflect.Descriptor instead.
func (*GeneratorInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0}
}

func (x *GeneratorInfo) GetId() GeneratorType {
	if x != nil {
		return x.Id
	}
	return GeneratorType_GeneratorTypeBegin
}

func (x *GeneratorInfo) GetIncr() uint32 {
	if x != nil {
		return x.Incr
	}
	return 0
}

// @pbtool:string|poker|generator|#房间id生成器
type GeneratorData struct {
	state         protoimpl.MessageState `xorm:"-"` 
	List          []*GeneratorInfo       `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 房间id生成器
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *GeneratorData) Reset() {
	*x = GeneratorData{}
	mi := &file_database_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratorData) ProtoMessage() {}

func (x *GeneratorData) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratorData.ProtoReflect.Descriptor instead.
func (*GeneratorData) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{1}
}

func (x *GeneratorData) GetList() []*GeneratorInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// @pbtool:hash|poker|user_info|uid@uint64|#玩家永久缓存信息
type UserInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`      // 玩家ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`     // 玩家名称
	Avatar        string                 `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"` // 玩家头像
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_database_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2}
}

func (x *UserInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// @pbtool:hash|poker|room_info|uid@uint64|#断线重连缓存
type RoomInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                               // 玩家ID
	GameType      GameType               `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty"` // 游戏类型
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                           // 房间ID
	TableId       uint32                 `protobuf:"varint,4,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`                        // 游戏配置id
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	mi := &file_database_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{3}
}

func (x *RoomInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RoomInfo) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RoomInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomInfo) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// ----------------------------德州扑克房间数据----------------------------
// @pbtool:hash|poker|texas|RoomId@uint64|#德州游戏房间信息数据
type TexasRoomData struct {
	state             protoimpl.MessageState `xorm:"-"` 
	RoomId            uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                    // 唯一id
	GameId            int32                  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                    // 游戏id
	RoomState         RoomStatus             `protobuf:"varint,3,opt,name=room_state,json=roomState,proto3,enum=poker.RoomStatus" json:"room_state,omitempty"`     // 房间状态
	CreateTime        int64                  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                        // 房间创建时间
	Table             *TexasTableData        `protobuf:"bytes,5,opt,name=table,proto3" json:"table,omitempty"`                                                     // 牌桌数据
	TotalBuyinChips   int64                  `protobuf:"varint,8,opt,name=total_buyin_chips,json=totalBuyinChips,proto3" json:"total_buyin_chips,omitempty"`       // 总买入筹码
	TotalServiceChips int64                  `protobuf:"varint,9,opt,name=total_service_chips,json=totalServiceChips,proto3" json:"total_service_chips,omitempty"` // 总服务费
	TotalRuningWater  int64                  `protobuf:"varint,10,opt,name=total_runing_water,json=totalRuningWater,proto3" json:"total_runing_water,omitempty"`   // 总流水
	OnlineNumber      int64                  `protobuf:"varint,11,opt,name=online_number,json=onlineNumber,proto3" json:"online_number,omitempty"`                 // 在线玩家
	FinishFlag        uint32                 `protobuf:"varint,12,opt,name=finish_flag,json=finishFlag,proto3" json:"finish_flag,omitempty"`                       // 结束状态
	unknownFields     protoimpl.UnknownFields `xorm:"-"`
	sizeCache         protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasRoomData) Reset() {
	*x = TexasRoomData{}
	mi := &file_database_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomData) ProtoMessage() {}

func (x *TexasRoomData) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomData.ProtoReflect.Descriptor instead.
func (*TexasRoomData) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{4}
}

func (x *TexasRoomData) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasRoomData) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *TexasRoomData) GetRoomState() RoomStatus {
	if x != nil {
		return x.RoomState
	}
	return RoomStatus_RoomStatusNone
}

func (x *TexasRoomData) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TexasRoomData) GetTable() *TexasTableData {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *TexasRoomData) GetTotalBuyinChips() int64 {
	if x != nil {
		return x.TotalBuyinChips
	}
	return 0
}

func (x *TexasRoomData) GetTotalServiceChips() int64 {
	if x != nil {
		return x.TotalServiceChips
	}
	return 0
}

func (x *TexasRoomData) GetTotalRuningWater() int64 {
	if x != nil {
		return x.TotalRuningWater
	}
	return 0
}

func (x *TexasRoomData) GetOnlineNumber() int64 {
	if x != nil {
		return x.OnlineNumber
	}
	return 0
}

func (x *TexasRoomData) GetFinishFlag() uint32 {
	if x != nil {
		return x.FinishFlag
	}
	return 0
}

type TexasTableData struct {
	state         protoimpl.MessageState `xorm:"-"`      
	CurState      GameState                   `protobuf:"varint,1,opt,name=cur_state,json=curState,proto3,enum=poker.GameState" json:"cur_state,omitempty"`                                                          // 游戏状态
	Round         uint32                      `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`                                                                                                     // 当前局数
	Players       map[uint64]*TexasPlayerData `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                       // 加入房间的玩家
	ChairInfo     map[uint32]uint64           `protobuf:"bytes,4,rep,name=chair_info,json=chairInfo,proto3" json:"chair_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 玩家座位号和uid的映射关系
	GameData      *TexasGameData              `protobuf:"bytes,5,opt,name=game_data,json=gameData,proto3" json:"game_data,omitempty"`                                                                                // 游戏数据
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasTableData) Reset() {
	*x = TexasTableData{}
	mi := &file_database_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTableData) ProtoMessage() {}

func (x *TexasTableData) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTableData.ProtoReflect.Descriptor instead.
func (*TexasTableData) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{5}
}

func (x *TexasTableData) GetCurState() GameState {
	if x != nil {
		return x.CurState
	}
	return GameState_TEXAS_INIT
}

func (x *TexasTableData) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasTableData) GetPlayers() map[uint64]*TexasPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TexasTableData) GetChairInfo() map[uint32]uint64 {
	if x != nil {
		return x.ChairInfo
	}
	return nil
}

func (x *TexasTableData) GetGameData() *TexasGameData {
	if x != nil {
		return x.GameData
	}
	return nil
}

type TexasPlayerData struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                            // 玩家id
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`                                                        // 玩家筹码
	ChairId       uint32                 `protobuf:"varint,3,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`                                     // 座位号
	PlayerState   PlayerStatus           `protobuf:"varint,4,opt,name=player_state,json=playerState,proto3,enum=poker.PlayerStatus" json:"player_state,omitempty"` // 加入房间、加入牌桌、退出牌桌、结算完成
	GameInfo      *TexasPlayerGameInfo   `protobuf:"bytes,6,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"`                                   // 玩家游戏信息
	TotalIncr     int64                  `protobuf:"varint,7,opt,name=total_incr,json=totalIncr,proto3" json:"total_incr,omitempty"`                               // 总盈利
	TotalBuyin    int64                  `protobuf:"varint,8,opt,name=total_buyin,json=totalBuyin,proto3" json:"total_buyin,omitempty"`                            // 总买入
	TotalTimes    uint32                 `protobuf:"varint,9,opt,name=total_times,json=totalTimes,proto3" json:"total_times,omitempty"`                            // 总次数
	SngChairId    uint32                 `protobuf:"varint,10,opt,name=sng_chair_id,json=sngChairId,proto3" json:"sng_chair_id,omitempty"`                         // 座位号(兼容sng)
	Rank          uint32                 `protobuf:"varint,11,opt,name=rank,proto3" json:"rank,omitempty"`                                                         // 排名(兼容sng)
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasPlayerData) Reset() {
	*x = TexasPlayerData{}
	mi := &file_database_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerData) ProtoMessage() {}

func (x *TexasPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerData.ProtoReflect.Descriptor instead.
func (*TexasPlayerData) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{6}
}

func (x *TexasPlayerData) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasPlayerData) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasPlayerData) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasPlayerData) GetPlayerState() PlayerStatus {
	if x != nil {
		return x.PlayerState
	}
	return PlayerStatus_PlayerStatusNone
}

func (x *TexasPlayerData) GetGameInfo() *TexasPlayerGameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *TexasPlayerData) GetTotalIncr() int64 {
	if x != nil {
		return x.TotalIncr
	}
	return 0
}

func (x *TexasPlayerData) GetTotalBuyin() int64 {
	if x != nil {
		return x.TotalBuyin
	}
	return 0
}

func (x *TexasPlayerData) GetTotalTimes() uint32 {
	if x != nil {
		return x.TotalTimes
	}
	return 0
}

func (x *TexasPlayerData) GetSngChairId() uint32 {
	if x != nil {
		return x.SngChairId
	}
	return 0
}

func (x *TexasPlayerData) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type TexasPlayerGameInfo struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Position      uint32                 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`                                                   // 玩家位置
	GameState     GameState              `protobuf:"varint,2,opt,name=game_state,json=gameState,proto3,enum=poker.GameState" json:"game_state,omitempty"`           // 游戏状态
	Operate       OperateType            `protobuf:"varint,3,opt,name=operate,proto3,enum=poker.OperateType" json:"operate,omitempty"`                              // 玩家操作
	BetChips      int64                  `protobuf:"varint,4,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                                   // 玩家下注
	PreOperate    OperateType            `protobuf:"varint,5,opt,name=pre_operate,json=preOperate,proto3,enum=poker.OperateType" json:"pre_operate,omitempty"`      // 是否预操作
	PreBetChips   int64                  `protobuf:"varint,6,opt,name=pre_bet_chips,json=preBetChips,proto3" json:"pre_bet_chips,omitempty"`                        // 预下注筹码
	BestCardType  CardType               `protobuf:"varint,7,opt,name=best_card_type,json=bestCardType,proto3,enum=poker.CardType" json:"best_card_type,omitempty"` // 玩家最大牌型
	BestCardValue uint32                 `protobuf:"varint,8,opt,name=best_card_value,json=bestCardValue,proto3" json:"best_card_value,omitempty"`                  // 最大牌值
	BestCardList  []uint32               `protobuf:"varint,9,rep,packed,name=best_card_list,json=bestCardList,proto3" json:"best_card_list,omitempty"`              // 玩家最大牌
	HandCardList  []uint32               `protobuf:"varint,10,rep,packed,name=hand_card_list,json=handCardList,proto3" json:"hand_card_list,omitempty"`             // 玩家手牌
	Hand_ShowList []bool                 `protobuf:"varint,11,rep,packed,name=hand_Show_list,json=handShowList,proto3" json:"hand_Show_list,omitempty"`             // 是否展示
	TotalBetChips int64                  `protobuf:"varint,12,opt,name=total_bet_chips,json=totalBetChips,proto3" json:"total_bet_chips,omitempty"`                 // 全部下注筹码
	IsChange      bool                   `protobuf:"varint,13,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`                                  // 玩家信息是否有变更
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasPlayerGameInfo) Reset() {
	*x = TexasPlayerGameInfo{}
	mi := &file_database_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerGameInfo) ProtoMessage() {}

func (x *TexasPlayerGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerGameInfo.ProtoReflect.Descriptor instead.
func (*TexasPlayerGameInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{7}
}

func (x *TexasPlayerGameInfo) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_TEXAS_INIT
}

func (x *TexasPlayerGameInfo) GetOperate() OperateType {
	if x != nil {
		return x.Operate
	}
	return OperateType_OperateNone
}

func (x *TexasPlayerGameInfo) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetPreOperate() OperateType {
	if x != nil {
		return x.PreOperate
	}
	return OperateType_OperateNone
}

func (x *TexasPlayerGameInfo) GetPreBetChips() int64 {
	if x != nil {
		return x.PreBetChips
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetBestCardType() CardType {
	if x != nil {
		return x.BestCardType
	}
	return CardType_CardTypeNode
}

func (x *TexasPlayerGameInfo) GetBestCardValue() uint32 {
	if x != nil {
		return x.BestCardValue
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetBestCardList() []uint32 {
	if x != nil {
		return x.BestCardList
	}
	return nil
}

func (x *TexasPlayerGameInfo) GetHandCardList() []uint32 {
	if x != nil {
		return x.HandCardList
	}
	return nil
}

func (x *TexasPlayerGameInfo) GetHand_ShowList() []bool {
	if x != nil {
		return x.Hand_ShowList
	}
	return nil
}

func (x *TexasPlayerGameInfo) GetTotalBetChips() int64 {
	if x != nil {
		return x.TotalBetChips
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

type TexasGameData struct {
	state          protoimpl.MessageState `xorm:"-"` 
	DealerChairId  uint32                 `protobuf:"varint,1,opt,name=dealer_chair_id,json=dealerChairId,proto3" json:"dealer_chair_id,omitempty"`           // 庄家座位号
	SmallChairId   uint32                 `protobuf:"varint,2,opt,name=small_chair_id,json=smallChairId,proto3" json:"small_chair_id,omitempty"`              // 小盲座位号
	BigChairId     uint32                 `protobuf:"varint,3,opt,name=big_chair_id,json=bigChairId,proto3" json:"big_chair_id,omitempty"`                    // 大盲座位号
	MinRaise       int64                  `protobuf:"varint,4,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`                            // 最小加注
	MaxBetChips    int64                  `protobuf:"varint,5,opt,name=max_bet_chips,json=maxBetChips,proto3" json:"max_bet_chips,omitempty"`                 // 最大下注
	PublicCardList []uint32               `protobuf:"varint,6,rep,packed,name=public_card_list,json=publicCardList,proto3" json:"public_card_list,omitempty"` // 公共牌列表
	UidCursor      uint32                 `protobuf:"varint,7,opt,name=uid_cursor,json=uidCursor,proto3" json:"uid_cursor,omitempty"`                         // 当前操作玩家
	UidList        []uint64               `protobuf:"varint,8,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`                        // 玩家列表
	PotPool        *TexasPotPoolData      `protobuf:"bytes,9,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                                // 底池数据
	IsCompare      bool                   `protobuf:"varint,10,opt,name=is_compare,json=isCompare,proto3" json:"is_compare,omitempty"`                        // 是否比牌
	CardCursor     uint32                 `protobuf:"varint,11,opt,name=card_cursor,json=cardCursor,proto3" json:"card_cursor,omitempty"`                     // 发牌指针
	CardList       []uint32               `protobuf:"varint,12,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`                    // 牌堆
	RankUidList    []uint64               `protobuf:"varint,14,rep,packed,name=rank_uid_list,json=rankUidList,proto3" json:"rank_uid_list,omitempty"`         // 排名玩家列表(兼容sng)
	unknownFields  protoimpl.UnknownFields `xorm:"-"`
	sizeCache      protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasGameData) Reset() {
	*x = TexasGameData{}
	mi := &file_database_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameData) ProtoMessage() {}

func (x *TexasGameData) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameData.ProtoReflect.Descriptor instead.
func (*TexasGameData) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{8}
}

func (x *TexasGameData) GetDealerChairId() uint32 {
	if x != nil {
		return x.DealerChairId
	}
	return 0
}

func (x *TexasGameData) GetSmallChairId() uint32 {
	if x != nil {
		return x.SmallChairId
	}
	return 0
}

func (x *TexasGameData) GetBigChairId() uint32 {
	if x != nil {
		return x.BigChairId
	}
	return 0
}

func (x *TexasGameData) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *TexasGameData) GetMaxBetChips() int64 {
	if x != nil {
		return x.MaxBetChips
	}
	return 0
}

func (x *TexasGameData) GetPublicCardList() []uint32 {
	if x != nil {
		return x.PublicCardList
	}
	return nil
}

func (x *TexasGameData) GetUidCursor() uint32 {
	if x != nil {
		return x.UidCursor
	}
	return 0
}

func (x *TexasGameData) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *TexasGameData) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasGameData) GetIsCompare() bool {
	if x != nil {
		return x.IsCompare
	}
	return false
}

func (x *TexasGameData) GetCardCursor() uint32 {
	if x != nil {
		return x.CardCursor
	}
	return 0
}

func (x *TexasGameData) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *TexasGameData) GetRankUidList() []uint64 {
	if x != nil {
		return x.RankUidList
	}
	return nil
}

type TexasPotPoolData struct {
	state         protoimpl.MessageState `xorm:"-"` 
	TotalBetChips int64                  `protobuf:"varint,1,opt,name=total_bet_chips,json=totalBetChips,proto3" json:"total_bet_chips,omitempty"` // 下注总筹码
	BetChips      int64                  `protobuf:"varint,2,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                  // 下注筹码
	PotList       []*TexasPotData        `protobuf:"bytes,3,rep,name=pot_list,json=potList,proto3" json:"pot_list,omitempty"`                      // 底池
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasPotPoolData) Reset() {
	*x = TexasPotPoolData{}
	mi := &file_database_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPotPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPotPoolData) ProtoMessage() {}

func (x *TexasPotPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPotPoolData.ProtoReflect.Descriptor instead.
func (*TexasPotPoolData) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{9}
}

func (x *TexasPotPoolData) GetTotalBetChips() int64 {
	if x != nil {
		return x.TotalBetChips
	}
	return 0
}

func (x *TexasPotPoolData) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *TexasPotPoolData) GetPotList() []*TexasPotData {
	if x != nil {
		return x.PotList
	}
	return nil
}

type TexasPotData struct {
	state         protoimpl.MessageState `xorm:"-"` 
	PotType       uint32                 `protobuf:"varint,1,opt,name=pot_type,json=potType,proto3" json:"pot_type,omitempty"`        // 底池类型：0-主池，1-边池
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`                           // 总筹码
	UidList       []uint64               `protobuf:"varint,3,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"` // 玩家id
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *TexasPotData) Reset() {
	*x = TexasPotData{}
	mi := &file_database_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPotData) ProtoMessage() {}

func (x *TexasPotData) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPotData.ProtoReflect.Descriptor instead.
func (*TexasPotData) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{10}
}

func (x *TexasPotData) GetPotType() uint32 {
	if x != nil {
		return x.PotType
	}
	return 0
}

func (x *TexasPotData) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasPotData) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

var File_database_proto protoreflect.FileDescriptor

var file_database_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x63, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x63, 0x72, 0x22, 0x39, 0x0a, 0x0d,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x22, 0x7e, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x91, 0x03, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x75, 0x79, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x9d, 0x03, 0x0a, 0x0e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x52, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x22, 0x9c, 0x04, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x35, 0x0a,
	0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x53, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65,
	0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xd9, 0x03, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x69,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x65,
	0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x69, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x69, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x87, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x0c, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x50, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_database_proto_rawDescOnce sync.Once
	file_database_proto_rawDescData []byte
)

func file_database_proto_rawDescGZIP() []byte {
	file_database_proto_rawDescOnce.Do(func() {
		file_database_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_database_proto_rawDesc), len(file_database_proto_rawDesc)))
	})
	return file_database_proto_rawDescData
}

var file_database_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_database_proto_goTypes = []any{
	(*GeneratorInfo)(nil),       // 0: poker.GeneratorInfo
	(*GeneratorData)(nil),       // 1: poker.GeneratorData
	(*UserInfo)(nil),            // 2: poker.UserInfo
	(*RoomInfo)(nil),            // 3: poker.RoomInfo
	(*TexasRoomData)(nil),       // 4: poker.TexasRoomData
	(*TexasTableData)(nil),      // 5: poker.TexasTableData
	(*TexasPlayerData)(nil),     // 6: poker.TexasPlayerData
	(*TexasPlayerGameInfo)(nil), // 7: poker.TexasPlayerGameInfo
	(*TexasGameData)(nil),       // 8: poker.TexasGameData
	(*TexasPotPoolData)(nil),    // 9: poker.TexasPotPoolData
	(*TexasPotData)(nil),        // 10: poker.TexasPotData
	nil,                         // 11: poker.TexasTableData.PlayersEntry
	nil,                         // 12: poker.TexasTableData.ChairInfoEntry
	(GeneratorType)(0),          // 13: poker.GeneratorType
	(GameType)(0),               // 14: poker.GameType
	(RoomStatus)(0),             // 15: poker.RoomStatus
	(GameState)(0),              // 16: poker.GameState
	(PlayerStatus)(0),           // 17: poker.PlayerStatus
	(OperateType)(0),            // 18: poker.OperateType
	(CardType)(0),               // 19: poker.CardType
}
var file_database_proto_depIdxs = []int32{
	13, // 0: poker.GeneratorInfo.id:type_name -> poker.GeneratorType
	0,  // 1: poker.GeneratorData.list:type_name -> poker.GeneratorInfo
	14, // 2: poker.RoomInfo.game_type:type_name -> poker.GameType
	15, // 3: poker.TexasRoomData.room_state:type_name -> poker.RoomStatus
	5,  // 4: poker.TexasRoomData.table:type_name -> poker.TexasTableData
	16, // 5: poker.TexasTableData.cur_state:type_name -> poker.GameState
	11, // 6: poker.TexasTableData.players:type_name -> poker.TexasTableData.PlayersEntry
	12, // 7: poker.TexasTableData.chair_info:type_name -> poker.TexasTableData.ChairInfoEntry
	8,  // 8: poker.TexasTableData.game_data:type_name -> poker.TexasGameData
	17, // 9: poker.TexasPlayerData.player_state:type_name -> poker.PlayerStatus
	7,  // 10: poker.TexasPlayerData.game_info:type_name -> poker.TexasPlayerGameInfo
	16, // 11: poker.TexasPlayerGameInfo.game_state:type_name -> poker.GameState
	18, // 12: poker.TexasPlayerGameInfo.operate:type_name -> poker.OperateType
	18, // 13: poker.TexasPlayerGameInfo.pre_operate:type_name -> poker.OperateType
	19, // 14: poker.TexasPlayerGameInfo.best_card_type:type_name -> poker.CardType
	9,  // 15: poker.TexasGameData.pot_pool:type_name -> poker.TexasPotPoolData
	10, // 16: poker.TexasPotPoolData.pot_list:type_name -> poker.TexasPotData
	6,  // 17: poker.TexasTableData.PlayersEntry.value:type_name -> poker.TexasPlayerData
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_database_proto_init() }
func file_database_proto_init() {
	if File_database_proto != nil {
		return
	}
	file_global_enum_proto_init()
	file_global_enum_cfg_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_database_proto_rawDesc), len(file_database_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_database_proto_goTypes,
		DependencyIndexes: file_database_proto_depIdxs,
		MessageInfos:      file_database_proto_msgTypes,
	}.Build()
	File_database_proto = out.File
	file_database_proto_goTypes = nil
	file_database_proto_depIdxs = nil
}
