// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: client_db_rummy_ext.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 扩展玩法每局比赛字段 db:xorm/rummy_ext_settle_record
type RummyExtSettleMatch struct {
	state         protoimpl.MessageState `xorm:"-"`   
	Id            uint64                   `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk comment('主键ID')"`                                                // @inject_tag: xorm:"bigint autoincr pk comment('主键ID')"
	RoomId        uint64                   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间ID')"`                           // @inject_tag: xorm:"bigint index notnull comment('房间ID')"
	PlayerId      []uint64                 `protobuf:"varint,2,rep,packed,name=player_id,json=playerId,proto3" json:"player_id,omitempty" xorm:"Text notnull comment('玩家ID')"`              // @inject_tag: xorm:"Text notnull comment('玩家ID')"
	GameType      GameType                 `protobuf:"varint,4,opt,name=game_type,json=gameType,proto3,enum=poker.GameType" json:"game_type,omitempty" xorm:"tinyint comment('游戏类型')"` // @inject_tag: xorm:"tinyint comment('游戏类型')"
	RoomType      RoomType                 `protobuf:"varint,5,opt,name=room_type,json=roomType,proto3,enum=poker.RoomType" json:"room_type,omitempty" xorm:"tinyint comment('房间类型')"` // @inject_tag: xorm:"tinyint comment('房间类型')"
	CoinType      CoinType                 `protobuf:"varint,6,opt,name=coin_type,json=coinType,proto3,enum=poker.CoinType" json:"coin_type,omitempty" xorm:"tinyint comment('货币类型')"` // @inject_tag: xorm:"tinyint comment('货币类型')"
	BaseScore     int64                    `protobuf:"varint,7,opt,name=base_score,json=baseScore,proto3" json:"base_score,omitempty" xorm:"bigint comment('底分')"`                  // @inject_tag: xorm:"bigint comment('底分')"
	RakeRate      int64                    `protobuf:"varint,8,opt,name=rake_rate,json=rakeRate,proto3" json:"rake_rate,omitempty" xorm:"bigint comment('每局抽水万分比')"`                     // @inject_tag: xorm:"bigint comment('每局抽水万分比')"
	CreatedAt     int64                    `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" xorm:"bigint comment('创建时间毫秒级')"`                  // @inject_tag: xorm:"bigint comment('创建时间毫秒级')"
	FinishAt      int64                    `protobuf:"varint,10,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty" xorm:"bigint comment('结束时间毫秒级')"`                    // @inject_tag: xorm:"bigint comment('结束时间毫秒级')"
	RakeCoin      int64                    `protobuf:"varint,11,opt,name=rake_coin,json=rakeCoin,proto3" json:"rake_coin,omitempty" xorm:"bigint comment('比赛抽水')"`                    // @inject_tag: xorm:"bigint comment('比赛抽水')"
	Bills         []*RummySettlePlayerInfo `protobuf:"bytes,13,rep,name=bills,proto3" json:"bills,omitempty" xorm:"blob comment('比赛流水')"`                                           // @inject_tag: xorm:"blob comment('比赛流水')"
	MatchInfo     []*RummyMatchInfo        `protobuf:"bytes,14,rep,name=match_info,json=matchInfo,proto3" json:"match_info,omitempty" xorm:"blob comment('结束战局数据')"`                  // @inject_tag: xorm:"blob comment('结束战局数据')"
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyExtSettleMatch) Reset() {
	*x = RummyExtSettleMatch{}
	mi := &file_client_db_rummy_ext_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyExtSettleMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyExtSettleMatch) ProtoMessage() {}

func (x *RummyExtSettleMatch) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_ext_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyExtSettleMatch.ProtoReflect.Descriptor instead.
func (*RummyExtSettleMatch) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_ext_proto_rawDescGZIP(), []int{0}
}

func (x *RummyExtSettleMatch) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RummyExtSettleMatch) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyExtSettleMatch) GetPlayerId() []uint64 {
	if x != nil {
		return x.PlayerId
	}
	return nil
}

func (x *RummyExtSettleMatch) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeNone
}

func (x *RummyExtSettleMatch) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_RoomTypeNone
}

func (x *RummyExtSettleMatch) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeNone
}

func (x *RummyExtSettleMatch) GetBaseScore() int64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *RummyExtSettleMatch) GetRakeRate() int64 {
	if x != nil {
		return x.RakeRate
	}
	return 0
}

func (x *RummyExtSettleMatch) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RummyExtSettleMatch) GetFinishAt() int64 {
	if x != nil {
		return x.FinishAt
	}
	return 0
}

func (x *RummyExtSettleMatch) GetRakeCoin() int64 {
	if x != nil {
		return x.RakeCoin
	}
	return 0
}

func (x *RummyExtSettleMatch) GetBills() []*RummySettlePlayerInfo {
	if x != nil {
		return x.Bills
	}
	return nil
}

func (x *RummyExtSettleMatch) GetMatchInfo() []*RummyMatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

// 扩展玩法每局比赛表-玩家id副表 db:xorm/rummy_ext_settle_user 匹配模式  局内记录需要玩家id query
type RummyExtSettleUser struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk comment('主键ID')"`                                 // @inject_tag: xorm:"bigint autoincr pk comment('主键ID')"
	MatchId       uint64                 `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty" xorm:"bigint notnull comment('RummyExtSettleMatch ID')"`        // @inject_tag: xorm:"bigint notnull comment('RummyExtSettleMatch ID')"
	PlayerId      uint64                 `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty" xorm:"bigint index notnull comment('player ID')"`     // @inject_tag: xorm:"bigint index notnull comment('player ID')"
	Coin          int64                  `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty" xorm:"bigint comment('游戏输赢')"`                             // @inject_tag: xorm:"bigint comment('游戏输赢')"
	State         RummyPlayState         `protobuf:"varint,5,opt,name=state,proto3,enum=poker.RummyPlayState" json:"state,omitempty" xorm:"tinyint comment('状态')"` // @inject_tag: xorm:"tinyint comment('状态')""
	CreatedAt     int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" xorm:"bigint comment('创建时间毫秒级')"`  // @inject_tag: xorm:"bigint comment('创建时间毫秒级')"
	FinishAt      int64                  `protobuf:"varint,7,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty" xorm:"bigint comment('结束时间毫秒级')"`     // @inject_tag: xorm:"bigint comment('结束时间毫秒级')"
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyExtSettleUser) Reset() {
	*x = RummyExtSettleUser{}
	mi := &file_client_db_rummy_ext_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyExtSettleUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyExtSettleUser) ProtoMessage() {}

func (x *RummyExtSettleUser) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_ext_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyExtSettleUser.ProtoReflect.Descriptor instead.
func (*RummyExtSettleUser) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_ext_proto_rawDescGZIP(), []int{1}
}

func (x *RummyExtSettleUser) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RummyExtSettleUser) GetMatchId() uint64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *RummyExtSettleUser) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RummyExtSettleUser) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RummyExtSettleUser) GetState() RummyPlayState {
	if x != nil {
		return x.State
	}
	return RummyPlayState_Rummy_PLAYSTATE_INIT
}

func (x *RummyExtSettleUser) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RummyExtSettleUser) GetFinishAt() int64 {
	if x != nil {
		return x.FinishAt
	}
	return 0
}

type RummyExtSettleMatchInsertReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Data          *RummyExtSettleMatch   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Bills         []*RummyExtSettleUser  `protobuf:"bytes,2,rep,name=bills,proto3" json:"bills,omitempty"` // 玩家最终账单
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyExtSettleMatchInsertReq) Reset() {
	*x = RummyExtSettleMatchInsertReq{}
	mi := &file_client_db_rummy_ext_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyExtSettleMatchInsertReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyExtSettleMatchInsertReq) ProtoMessage() {}

func (x *RummyExtSettleMatchInsertReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_ext_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyExtSettleMatchInsertReq.ProtoReflect.Descriptor instead.
func (*RummyExtSettleMatchInsertReq) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_ext_proto_rawDescGZIP(), []int{2}
}

func (x *RummyExtSettleMatchInsertReq) GetData() *RummyExtSettleMatch {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RummyExtSettleMatchInsertReq) GetBills() []*RummyExtSettleUser {
	if x != nil {
		return x.Bills
	}
	return nil
}

type RummyExtSettleMatchInsertRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"` // 请求结果信息
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyExtSettleMatchInsertRsp) Reset() {
	*x = RummyExtSettleMatchInsertRsp{}
	mi := &file_client_db_rummy_ext_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyExtSettleMatchInsertRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyExtSettleMatchInsertRsp) ProtoMessage() {}

func (x *RummyExtSettleMatchInsertRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_ext_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyExtSettleMatchInsertRsp.ProtoReflect.Descriptor instead.
func (*RummyExtSettleMatchInsertRsp) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_ext_proto_rawDescGZIP(), []int{3}
}

func (x *RummyExtSettleMatchInsertRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

type RummyExtSettleSelectReq struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PlayerId      uint64                 `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyExtSettleSelectReq) Reset() {
	*x = RummyExtSettleSelectReq{}
	mi := &file_client_db_rummy_ext_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyExtSettleSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyExtSettleSelectReq) ProtoMessage() {}

func (x *RummyExtSettleSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_ext_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyExtSettleSelectReq.ProtoReflect.Descriptor instead.
func (*RummyExtSettleSelectReq) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_ext_proto_rawDescGZIP(), []int{4}
}

func (x *RummyExtSettleSelectReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RummyExtSettleSelectReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RummyExtSettleSelectReq) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type RummyExtSettleSelectRsp struct {
	state         protoimpl.MessageState `xorm:"-"` 
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`    //请求结果信息
	Data          []*RummyExtSettleMatch `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`    //用户比赛记录信息
	Count         int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"` //记录总数
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyExtSettleSelectRsp) Reset() {
	*x = RummyExtSettleSelectRsp{}
	mi := &file_client_db_rummy_ext_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyExtSettleSelectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyExtSettleSelectRsp) ProtoMessage() {}

func (x *RummyExtSettleSelectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_ext_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyExtSettleSelectRsp.ProtoReflect.Descriptor instead.
func (*RummyExtSettleSelectRsp) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_ext_proto_rawDescGZIP(), []int{5}
}

func (x *RummyExtSettleSelectRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RummyExtSettleSelectRsp) GetData() []*RummyExtSettleMatch {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RummyExtSettleSelectRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// RummyExtSettleNtf 游戏 每个小局结算通知
type RummyExtSettleNtf struct {
	state         protoimpl.MessageState `xorm:"-"` 
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // 桌子ID
	Records       []*RummyMatchInfo      `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`                       // 每局 玩家手牌和结算账单
	TimeOut       int64                  `protobuf:"varint,3,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty"`       // 倒计时(unix秒时间戳)， time_out - 当前时间戳=倒计时时间秒
	GhostCard     uint32                 `protobuf:"varint,5,opt,name=ghost_card,json=ghostCard,proto3" json:"ghost_card,omitempty"` // 癞子牌
	TotalTime     int64                  `protobuf:"varint,6,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	HalfState     HalfState              `protobuf:"varint,7,opt,name=half_state,json=halfState,proto3,enum=poker.HalfState" json:"half_state,omitempty"` //是否平分奖池
	unknownFields protoimpl.UnknownFields `xorm:"-"`
	sizeCache     protoimpl.SizeCache `xorm:"-"`
}

func (x *RummyExtSettleNtf) Reset() {
	*x = RummyExtSettleNtf{}
	mi := &file_client_db_rummy_ext_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RummyExtSettleNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RummyExtSettleNtf) ProtoMessage() {}

func (x *RummyExtSettleNtf) ProtoReflect() protoreflect.Message {
	mi := &file_client_db_rummy_ext_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RummyExtSettleNtf.ProtoReflect.Descriptor instead.
func (*RummyExtSettleNtf) Descriptor() ([]byte, []int) {
	return file_client_db_rummy_ext_proto_rawDescGZIP(), []int{6}
}

func (x *RummyExtSettleNtf) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RummyExtSettleNtf) GetRecords() []*RummyMatchInfo {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RummyExtSettleNtf) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *RummyExtSettleNtf) GetGhostCard() uint32 {
	if x != nil {
		return x.GhostCard
	}
	return 0
}

func (x *RummyExtSettleNtf) GetTotalTime() int64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *RummyExtSettleNtf) GetHalfState() HalfState {
	if x != nil {
		return x.HalfState
	}
	return HalfState_Init
}

var File_client_db_rummy_ext_proto protoreflect.FileDescriptor

var file_client_db_rummy_ext_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x62, 0x5f, 0x72, 0x75, 0x6d, 0x6d,
	0x79, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe4, 0x03, 0x0a, 0x13, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x78, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6b, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6b, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x32, 0x0a,
	0x05, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x34, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x45, 0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x41, 0x74, 0x22, 0x7f, 0x0a, 0x1c, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x78, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45,
	0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79,
	0x45, 0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x62,
	0x69, 0x6c, 0x6c, 0x73, 0x22, 0x42, 0x0a, 0x1c, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x78, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x22, 0x67, 0x0a, 0x17, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x45, 0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x78, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x45, 0x78, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x52, 0x75, 0x6d, 0x6d,
	0x79, 0x45, 0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6d, 0x6d, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x0a, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6c,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x68, 0x61, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_client_db_rummy_ext_proto_rawDescOnce sync.Once
	file_client_db_rummy_ext_proto_rawDescData []byte
)

func file_client_db_rummy_ext_proto_rawDescGZIP() []byte {
	file_client_db_rummy_ext_proto_rawDescOnce.Do(func() {
		file_client_db_rummy_ext_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_db_rummy_ext_proto_rawDesc), len(file_client_db_rummy_ext_proto_rawDesc)))
	})
	return file_client_db_rummy_ext_proto_rawDescData
}

var file_client_db_rummy_ext_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_client_db_rummy_ext_proto_goTypes = []any{
	(*RummyExtSettleMatch)(nil),          // 0: poker.RummyExtSettleMatch
	(*RummyExtSettleUser)(nil),           // 1: poker.RummyExtSettleUser
	(*RummyExtSettleMatchInsertReq)(nil), // 2: poker.RummyExtSettleMatchInsertReq
	(*RummyExtSettleMatchInsertRsp)(nil), // 3: poker.RummyExtSettleMatchInsertRsp
	(*RummyExtSettleSelectReq)(nil),      // 4: poker.RummyExtSettleSelectReq
	(*RummyExtSettleSelectRsp)(nil),      // 5: poker.RummyExtSettleSelectRsp
	(*RummyExtSettleNtf)(nil),            // 6: poker.RummyExtSettleNtf
	(GameType)(0),                        // 7: poker.GameType
	(RoomType)(0),                        // 8: poker.RoomType
	(CoinType)(0),                        // 9: poker.CoinType
	(*RummySettlePlayerInfo)(nil),        // 10: poker.RummySettlePlayerInfo
	(*RummyMatchInfo)(nil),               // 11: poker.RummyMatchInfo
	(RummyPlayState)(0),                  // 12: poker.RummyPlayState
	(*RspHead)(nil),                      // 13: poker.RspHead
	(HalfState)(0),                       // 14: poker.HalfState
}
var file_client_db_rummy_ext_proto_depIdxs = []int32{
	7,  // 0: poker.RummyExtSettleMatch.game_type:type_name -> poker.GameType
	8,  // 1: poker.RummyExtSettleMatch.room_type:type_name -> poker.RoomType
	9,  // 2: poker.RummyExtSettleMatch.coin_type:type_name -> poker.CoinType
	10, // 3: poker.RummyExtSettleMatch.bills:type_name -> poker.RummySettlePlayerInfo
	11, // 4: poker.RummyExtSettleMatch.match_info:type_name -> poker.RummyMatchInfo
	12, // 5: poker.RummyExtSettleUser.state:type_name -> poker.RummyPlayState
	0,  // 6: poker.RummyExtSettleMatchInsertReq.data:type_name -> poker.RummyExtSettleMatch
	1,  // 7: poker.RummyExtSettleMatchInsertReq.bills:type_name -> poker.RummyExtSettleUser
	13, // 8: poker.RummyExtSettleMatchInsertRsp.head:type_name -> poker.RspHead
	13, // 9: poker.RummyExtSettleSelectRsp.head:type_name -> poker.RspHead
	0,  // 10: poker.RummyExtSettleSelectRsp.data:type_name -> poker.RummyExtSettleMatch
	11, // 11: poker.RummyExtSettleNtf.records:type_name -> poker.RummyMatchInfo
	14, // 12: poker.RummyExtSettleNtf.half_state:type_name -> poker.HalfState
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_client_db_rummy_ext_proto_init() }
func file_client_db_rummy_ext_proto_init() {
	if File_client_db_rummy_ext_proto != nil {
		return
	}
	file_global_enum_cfg_proto_init()
	file_client_room_rummy_proto_init()
	file_packet_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_db_rummy_ext_proto_rawDesc), len(file_client_db_rummy_ext_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_db_rummy_ext_proto_goTypes,
		DependencyIndexes: file_client_db_rummy_ext_proto_depIdxs,
		MessageInfos:      file_client_db_rummy_ext_proto_msgTypes,
	}.Build()
	File_client_db_rummy_ext_proto = out.File
	file_client_db_rummy_ext_proto_goTypes = nil
	file_client_db_rummy_ext_proto_depIdxs = nil
}
