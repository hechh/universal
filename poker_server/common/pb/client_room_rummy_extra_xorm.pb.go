// Code generated by protoc-gen-go-xorm. DO NOT EDIT.
// Source: client_room_rummy_extra.proto

package pb

import (
	"github.com/golang/protobuf/proto"
)

func (x *RummyGiveUpReq) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyGiveUpReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyGiveUpReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyGiveUpRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *RummyGiveUpRsp) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyGiveUpRsp) SetCharge(val int64) {
	x.Charge = val
}

func (x *RummyGiveUpRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyGiveUpRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyTryHalfPoolReq) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyTryHalfPoolReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyTryHalfPoolReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyTryHalfPoolRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *RummyTryHalfPoolRsp) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyTryHalfPoolRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyTryHalfPoolRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyTryHalfPoolNtf) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyTryHalfPoolNtf) SetPlayers(val map[uint64]*RummyRoomPlayer) {
	x.Players = val
}

func (x *RummyTryHalfPoolNtf) SetTimeOut(val int64) {
	x.TimeOut = val
}

func (x *RummyTryHalfPoolNtf) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyTryHalfPoolNtf) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyFinSettleNtf) SetRoomId(val uint64) {
	x.RoomId = val
}

func (x *RummyFinSettleNtf) SetRecords(val []*RummyMatchInfo) {
	x.Records = val
}

func (x *RummyFinSettleNtf) SetTimeOut(val int64) {
	x.TimeOut = val
}

func (x *RummyFinSettleNtf) SetRake(val int64) {
	x.Rake = val
}

func (x *RummyFinSettleNtf) SetTotalTime(val int64) {
	x.TotalTime = val
}

func (x *RummyFinSettleNtf) SetPrizePoll(val int64) {
	x.PrizePoll = val
}

func (x *RummyFinSettleNtf) SetBill(val []*RummySettlePlayerInfo) {
	x.Bill = val
}

func (x *RummyFinSettleNtf) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyFinSettleNtf) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyMatchReq) SetCfgId(val uint32) {
	x.CfgId = val
}

func (x *RummyMatchReq) SetGameType(val GameType) {
	x.GameType = val
}

func (x *RummyMatchReq) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *RummyMatchReq) SetCoin(val int64) {
	x.Coin = val
}

func (x *RummyMatchReq) SetPlayerInfo(val *PlayerInfo) {
	x.PlayerInfo = val
}

func (x *RummyMatchReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyMatchReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyMatchRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *RummyMatchRsp) SetCfg(val *RummyConfig) {
	x.Cfg = val
}

func (x *RummyMatchRsp) SetCfgId(val uint32) {
	x.CfgId = val
}

func (x *RummyMatchRsp) SetTimeout(val int64) {
	x.Timeout = val
}

func (x *RummyMatchRsp) SetCurCount(val uint32) {
	x.CurCount = val
}

func (x *RummyMatchRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyMatchRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyMatchNtf) SetCfgId(val uint32) {
	x.CfgId = val
}

func (x *RummyMatchNtf) SetTimeout(val int64) {
	x.Timeout = val
}

func (x *RummyMatchNtf) SetCurCount(val uint32) {
	x.CurCount = val
}

func (x *RummyMatchNtf) SetMaxCount(val uint32) {
	x.MaxCount = val
}

func (x *RummyMatchNtf) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyMatchNtf) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyCancelMatchReq) SetCfgId(val uint32) {
	x.CfgId = val
}

func (x *RummyCancelMatchReq) SetGameType(val GameType) {
	x.GameType = val
}

func (x *RummyCancelMatchReq) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *RummyCancelMatchReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyCancelMatchReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyCancelMatchRsp) SetHead(val *RspHead) {
	x.Head = val
}

func (x *RummyCancelMatchRsp) SetCfgId(val uint32) {
	x.CfgId = val
}

func (x *RummyCancelMatchRsp) SetGameType(val GameType) {
	x.GameType = val
}

func (x *RummyCancelMatchRsp) SetCoinType(val CoinType) {
	x.CoinType = val
}

func (x *RummyCancelMatchRsp) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyCancelMatchRsp) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}

func (x *RummyBatchJoinReq) SetBatch(val []*RummyJoinRoomReq) {
	x.Batch = val
}

func (x *RummyBatchJoinReq) SetRoomData(val *RummyRoomData) {
	x.RoomData = val
}

func (x *RummyBatchJoinReq) FromDB(data []byte) error {
	if len(data) == 0 {
		return nil
	}
	return proto.Unmarshal(data, x)
}

func (x *RummyBatchJoinReq) ToDB() ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return proto.Marshal(x)
}
