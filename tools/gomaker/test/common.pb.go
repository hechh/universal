// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 服务器类型
type SERVICE int32

const (
	SERVICE_NONE   SERVICE = 0
	SERVICE_CLIENT SERVICE = 1 // 客户端
	SERVICE_GATE   SERVICE = 2 // 网关,转发服务
	SERVICE_GM     SERVICE = 3 // gamemgr
	SERVICE_GAME   SERVICE = 4 // game
	SERVICE_DB     SERVICE = 5 // db
	SERVICE_Dip    SERVICE = 6 // 后台服务
	SERVICE_Record SERVICE = 7 // 日志服务
)

// Enum value maps for SERVICE.
var (
	SERVICE_name = map[int32]string{
		0: "NONE",
		1: "CLIENT",
		2: "GATE",
		3: "GM",
		4: "GAME",
		5: "DB",
		6: "Dip",
		7: "Record",
	}
	SERVICE_value = map[string]int32{
		"NONE":   0,
		"CLIENT": 1,
		"GATE":   2,
		"GM":     3,
		"GAME":   4,
		"DB":     5,
		"Dip":    6,
		"Record": 7,
	}
)

func (x SERVICE) Enum() *SERVICE {
	p := new(SERVICE)
	*p = x
	return p
}

func (x SERVICE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (SERVICE) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x SERVICE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SERVICE.Descriptor instead.
func (SERVICE) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// 平台类型
type EmPlatType int32

const (
	EmPlatType_Local EmPlatType = 0 // 本地
)

// Enum value maps for EmPlatType.
var (
	EmPlatType_name = map[int32]string{
		0: "Local",
	}
	EmPlatType_value = map[string]int32{
		"Local": 0,
	}
)

func (x EmPlatType) Enum() *EmPlatType {
	p := new(EmPlatType)
	*p = x
	return p
}

func (x EmPlatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmPlatType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (EmPlatType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x EmPlatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmPlatType.Descriptor instead.
func (EmPlatType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

// 登录状态
type LoginState int32

const (
	LoginState_None    LoginState = 0 // 未初始化
	LoginState_Init    LoginState = 1 // 初始化
	LoginState_SetName LoginState = 2 // 取名完成
)

// Enum value maps for LoginState.
var (
	LoginState_name = map[int32]string{
		0: "None",
		1: "Init",
		2: "SetName",
	}
	LoginState_value = map[string]int32{
		"None":    0,
		"Init":    1,
		"SetName": 2,
	}
)

func (x LoginState) Enum() *LoginState {
	p := new(LoginState)
	*p = x
	return p
}

func (x LoginState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (LoginState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x LoginState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginState.Descriptor instead.
func (LoginState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

// 服务器类型
type PlayerDataType int32

const (
	PlayerDataType_Crystal            PlayerDataType = 0  // 晶核系统
	PlayerDataType_Base               PlayerDataType = 1  // 角色基础数据
	PlayerDataType_System             PlayerDataType = 2  // 角色功能数据
	PlayerDataType_Bag                PlayerDataType = 3  // 玩家背包
	PlayerDataType_Equipment          PlayerDataType = 4  // 玩家装备
	PlayerDataType_Client             PlayerDataType = 5  // 角色前端数据
	PlayerDataType_Hero               PlayerDataType = 6  // 伙伴数据
	PlayerDataType_Mail               PlayerDataType = 7  // 邮件数据
	PlayerDataType_Max                PlayerDataType = 8  // 最大值
	PlayerDataType_SystemCommon       PlayerDataType = 10 // 功能通用系统
	PlayerDataType_SystemChat         PlayerDataType = 11 // 功能聊天系统
	PlayerDataType_SystemProfession   PlayerDataType = 12 // 功能职业系统
	PlayerDataType_SystemBox          PlayerDataType = 13 // 宝箱系统
	PlayerDataType_SystemBattle       PlayerDataType = 14 // 功能战斗系统
	PlayerDataType_SystemTask         PlayerDataType = 15 // 功能任务系统
	PlayerDataType_SystemShop         PlayerDataType = 16 // 黑市商店
	PlayerDataType_SystemDraw         PlayerDataType = 17 // 抽奖系统
	PlayerDataType_SystemCharge       PlayerDataType = 18 // 充值系统
	PlayerDataType_SystemGene         PlayerDataType = 19 // 基因系统
	PlayerDataType_SystemOffline      PlayerDataType = 20 // 离线系统
	PlayerDataType_SystemHookTech     PlayerDataType = 21 // 挂机科技
	PlayerDataType_SystemSevenDay     PlayerDataType = 22 // 七天系统
	PlayerDataType_SystemWorldBoss    PlayerDataType = 23 // 世界buss
	PlayerDataType_SystemChampionship PlayerDataType = 24 // 锦标赛
	PlayerDataType_SystemActivity     PlayerDataType = 25 // 活动
	PlayerDataType_SystemRepair       PlayerDataType = 26 // 数据修复
	PlayerDataType_SystemMax          PlayerDataType = 27 // 功能最大
)

// Enum value maps for PlayerDataType.
var (
	PlayerDataType_name = map[int32]string{
		0:  "Crystal",
		1:  "Base",
		2:  "System",
		3:  "Bag",
		4:  "Equipment",
		5:  "Client",
		6:  "Hero",
		7:  "Mail",
		8:  "Max",
		10: "SystemCommon",
		11: "SystemChat",
		12: "SystemProfession",
		13: "SystemBox",
		14: "SystemBattle",
		15: "SystemTask",
		16: "SystemShop",
		17: "SystemDraw",
		18: "SystemCharge",
		19: "SystemGene",
		20: "SystemOffline",
		21: "SystemHookTech",
		22: "SystemSevenDay",
		23: "SystemWorldBoss",
		24: "SystemChampionship",
		25: "SystemActivity",
		26: "SystemRepair",
		27: "SystemMax",
	}
	PlayerDataType_value = map[string]int32{
		"Crystal":            0,
		"Base":               1,
		"System":             2,
		"Bag":                3,
		"Equipment":          4,
		"Client":             5,
		"Hero":               6,
		"Mail":               7,
		"Max":                8,
		"SystemCommon":       10,
		"SystemChat":         11,
		"SystemProfession":   12,
		"SystemBox":          13,
		"SystemBattle":       14,
		"SystemTask":         15,
		"SystemShop":         16,
		"SystemDraw":         17,
		"SystemCharge":       18,
		"SystemGene":         19,
		"SystemOffline":      20,
		"SystemHookTech":     21,
		"SystemSevenDay":     22,
		"SystemWorldBoss":    23,
		"SystemChampionship": 24,
		"SystemActivity":     25,
		"SystemRepair":       26,
		"SystemMax":          27,
	}
)

func (x PlayerDataType) Enum() *PlayerDataType {
	p := new(PlayerDataType)
	*p = x
	return p
}

func (x PlayerDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (PlayerDataType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x PlayerDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerDataType.Descriptor instead.
func (PlayerDataType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type CHAT int32

const (
	CHAT_MSG_TYPE_WORLD   CHAT = 0
	CHAT_MSG_TYPE_PRIVATE CHAT = 1
	CHAT_MSG_TYPE_ORG     CHAT = 2
	CHAT_MSG_TYPE_COUNT   CHAT = 3
)

// Enum value maps for CHAT.
var (
	CHAT_name = map[int32]string{
		0: "MSG_TYPE_WORLD",
		1: "MSG_TYPE_PRIVATE",
		2: "MSG_TYPE_ORG",
		3: "MSG_TYPE_COUNT",
	}
	CHAT_value = map[string]int32{
		"MSG_TYPE_WORLD":   0,
		"MSG_TYPE_PRIVATE": 1,
		"MSG_TYPE_ORG":     2,
		"MSG_TYPE_COUNT":   3,
	}
)

func (x CHAT) Enum() *CHAT {
	p := new(CHAT)
	*p = x
	return p
}

func (x CHAT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHAT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (CHAT) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x CHAT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHAT.Descriptor instead.
func (CHAT) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

// 邮件状态
type EmMailState int32

const (
	EmMailState_NoRead      EmMailState = 0 // 未读
	EmMailState_ReadRecieve EmMailState = 1 // 已读已领取
)

// Enum value maps for EmMailState.
var (
	EmMailState_name = map[int32]string{
		0: "NoRead",
		1: "ReadRecieve",
	}
	EmMailState_value = map[string]int32{
		"NoRead":      0,
		"ReadRecieve": 1,
	}
)

func (x EmMailState) Enum() *EmMailState {
	p := new(EmMailState)
	*p = x
	return p
}

func (x EmMailState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmMailState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (EmMailState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x EmMailState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmMailState.Descriptor instead.
func (EmMailState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

// -------------------------------------------------------------
// ------------------------------ 道具列表类型
type EmBagType int32

const (
	EmBagType_BagType_Equip    EmBagType = 0 // 装备背包类型
	EmBagType_BagType_Item     EmBagType = 1 // 道具背包类型
	EmBagType_BagType_PetPiece EmBagType = 2 // 碎片背包类型
	EmBagType_BagType_Special  EmBagType = 3 // 特殊背包类型
	EmBagType_BagType_GodEquip EmBagType = 4 // 神装背包类型
)

// Enum value maps for EmBagType.
var (
	EmBagType_name = map[int32]string{
		0: "BagType_Equip",
		1: "BagType_Item",
		2: "BagType_PetPiece",
		3: "BagType_Special",
		4: "BagType_GodEquip",
	}
	EmBagType_value = map[string]int32{
		"BagType_Equip":    0,
		"BagType_Item":     1,
		"BagType_PetPiece": 2,
		"BagType_Special":  3,
		"BagType_GodEquip": 4,
	}
)

func (x EmBagType) Enum() *EmBagType {
	p := new(EmBagType)
	*p = x
	return p
}

func (x EmBagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmBagType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (EmBagType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x EmBagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmBagType.Descriptor instead.
func (EmBagType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

// ------------------------------------------------------
// ------------------------------ 道具消耗类型
type EmItemExpendType int32

const (
	EmItemExpendType_EIET_None       EmItemExpendType = 0   // 无
	EmItemExpendType_EIET_Cash       EmItemExpendType = 1   // 元宝
	EmItemExpendType_EIET_Gold       EmItemExpendType = 2   // 金币
	EmItemExpendType_EIET_SplitScore EmItemExpendType = 25  // 分解积分
	EmItemExpendType_EIET_Max        EmItemExpendType = 100 // 最大值
)

// Enum value maps for EmItemExpendType.
var (
	EmItemExpendType_name = map[int32]string{
		0:   "EIET_None",
		1:   "EIET_Cash",
		2:   "EIET_Gold",
		25:  "EIET_SplitScore",
		100: "EIET_Max",
	}
	EmItemExpendType_value = map[string]int32{
		"EIET_None":       0,
		"EIET_Cash":       1,
		"EIET_Gold":       2,
		"EIET_SplitScore": 25,
		"EIET_Max":        100,
	}
)

func (x EmItemExpendType) Enum() *EmItemExpendType {
	p := new(EmItemExpendType)
	*p = x
	return p
}

func (x EmItemExpendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmItemExpendType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (EmItemExpendType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x EmItemExpendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmItemExpendType.Descriptor instead.
func (EmItemExpendType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

// ------------------------------------------------------
// ------------------------------ 玩家离线数据类型
type EmPlayerOfflineType int32

const (
	EmPlayerOfflineType_EPOT_Mail EmPlayerOfflineType = 0 // 邮件
	EmPlayerOfflineType_EPOT_Item EmPlayerOfflineType = 1 // 道具
)

// Enum value maps for EmPlayerOfflineType.
var (
	EmPlayerOfflineType_name = map[int32]string{
		0: "EPOT_Mail",
		1: "EPOT_Item",
	}
	EmPlayerOfflineType_value = map[string]int32{
		"EPOT_Mail": 0,
		"EPOT_Item": 1,
	}
)

func (x EmPlayerOfflineType) Enum() *EmPlayerOfflineType {
	p := new(EmPlayerOfflineType)
	*p = x
	return p
}

func (x EmPlayerOfflineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmPlayerOfflineType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (EmPlayerOfflineType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x EmPlayerOfflineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmPlayerOfflineType.Descriptor instead.
func (EmPlayerOfflineType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

// 常用枚举类型
type EmGmFuncType int32

const (
	EmGmFuncType_GFT_AddItem  EmGmFuncType = 0 // 增加道具 参数：类型 ID 数量
	EmGmFuncType_GFT_AddEquip EmGmFuncType = 1 // 增加装备 参数：装备id 品质 星级 数量
	EmGmFuncType_GFT_AddHero  EmGmFuncType = 2 // 增加英雄 参数：英雄id 星级 数量
	EmGmFuncType_GFT_NB       EmGmFuncType = 3 // 牛逼
	EmGmFuncType_GFT_Relogin  EmGmFuncType = 4 // 重登陆
	EmGmFuncType_GFT_Charge   EmGmFuncType = 5 // 直冲
)

// Enum value maps for EmGmFuncType.
var (
	EmGmFuncType_name = map[int32]string{
		0: "GFT_AddItem",
		1: "GFT_AddEquip",
		2: "GFT_AddHero",
		3: "GFT_NB",
		4: "GFT_Relogin",
		5: "GFT_Charge",
	}
	EmGmFuncType_value = map[string]int32{
		"GFT_AddItem":  0,
		"GFT_AddEquip": 1,
		"GFT_AddHero":  2,
		"GFT_NB":       3,
		"GFT_Relogin":  4,
		"GFT_Charge":   5,
	}
)

func (x EmGmFuncType) Enum() *EmGmFuncType {
	p := new(EmGmFuncType)
	*p = x
	return p
}

func (x EmGmFuncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmGmFuncType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (EmGmFuncType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x EmGmFuncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmGmFuncType.Descriptor instead.
func (EmGmFuncType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

// GM后台参数类型
type EmGmParamType int32

const (
	EmGmParamType_GPT_None   EmGmParamType = 0 // gm是否开启
	EmGmParamType_GPT_GmOpen EmGmParamType = 1 // gm是否开启
)

// Enum value maps for EmGmParamType.
var (
	EmGmParamType_name = map[int32]string{
		0: "GPT_None",
		1: "GPT_GmOpen",
	}
	EmGmParamType_value = map[string]int32{
		"GPT_None":   0,
		"GPT_GmOpen": 1,
	}
)

func (x EmGmParamType) Enum() *EmGmParamType {
	p := new(EmGmParamType)
	*p = x
	return p
}

func (x EmGmParamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmGmParamType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (EmGmParamType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x EmGmParamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmGmParamType.Descriptor instead.
func (EmGmParamType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

// ------------------------------------------------------
// ------------------------------ 操作类型
type EmDoingType int32

const (
	EmDoingType_EDT_Gm                       EmDoingType = 0  // gm后台添加
	EmDoingType_EDT_Other                    EmDoingType = 1  // 其它
	EmDoingType_EDT_Client                   EmDoingType = 2  // 客户端请求
	EmDoingType_EDT_ItemUse                  EmDoingType = 3  // 道具使用
	EmDoingType_EDT_GiftCode                 EmDoingType = 4  // 兑换码
	EmDoingType_EDT_ProfessionLevel          EmDoingType = 5  // 职业升级
	EmDoingType_EDT_ProfessionPeakLevel      EmDoingType = 6  // 职业巅峰升级
	EmDoingType_EDT_ProfessionPartLevel      EmDoingType = 7  // 职业部位升级
	EmDoingType_EDT_EquipSplit               EmDoingType = 8  // 装备分解
	EmDoingType_EDT_HeroAwaken               EmDoingType = 9  // 英雄技能觉醒
	EmDoingType_EDT_HeroRebirth              EmDoingType = 10 // 英雄重生
	EmDoingType_EDT_BoxScoreExchange         EmDoingType = 11 // 宝箱积分兑换
	EmDoingType_EDT_Battle                   EmDoingType = 12 // 战斗
	EmDoingType_EDT_BoxConsume               EmDoingType = 13 // 宝箱消耗
	EmDoingType_EDT_BoxOpen                  EmDoingType = 14 // 开宝箱
	EmDoingType_EDT_Task                     EmDoingType = 15 // 任务
	EmDoingType_EDT_System                   EmDoingType = 16 // 系统增加
	EmDoingType_EDT_Login                    EmDoingType = 17 // 登录
	EmDoingType_EDT_ChangePlayerName         EmDoingType = 18 // 修改名字
	EmDoingType_EDT_Mail                     EmDoingType = 19 // 邮件
	EmDoingType_EDT_BlackShop                EmDoingType = 20 // 黑市商店
	EmDoingType_EDT_Advert                   EmDoingType = 21 // 广告
	EmDoingType_EDT_CrystalRobotUpgrade      EmDoingType = 22 // 晶核系统机器人升级
	EmDoingType_EDT_CrystalRedefine          EmDoingType = 23 // 晶核改造消耗
	EmDoingType_EDT_CrystalBookUpgrade       EmDoingType = 24 // 晶核图鉴系统升级
	EmDoingType_EDT_Draw                     EmDoingType = 25 // 抽奖
	EmDoingType_EDT_Charge                   EmDoingType = 26 // 充值
	EmDoingType_EDT_BattleHook               EmDoingType = 27 // 挂机关卡
	EmDoingType_EDT_Offline                  EmDoingType = 28 // 离线收益
	EmDoingType_EDT_ProfessionPartRefine     EmDoingType = 29 // 职业部位精炼
	EmDoingType_EDT_ProfessionPartRefineTupo EmDoingType = 30 // 职业部位精炼突破
	EmDoingType_EDT_HeroBook                 EmDoingType = 31 // 英雄图鉴
	EmDoingType_EDT_StarSource               EmDoingType = 32 // 挂机科技
	EmDoingType_EDT_SevenDay                 EmDoingType = 33 // 七天登录
	EmDoingType_EDT_Shop                     EmDoingType = 34 // 商店
	EmDoingType_EDT_DailyTask                EmDoingType = 35 // 每日任务
	EmDoingType_EDT_Reset                    EmDoingType = 36 // 部位重置
	EmDoingType_EDT_Entry                    EmDoingType = 37 // 词条
	EmDoingType_EDT_BattleNormal             EmDoingType = 38 // 精英官咖
	EmDoingType_EDT_StarSourceDraw           EmDoingType = 39 // 星源抽奖
	EmDoingType_EDT_RankReward               EmDoingType = 40 // 排行榜奖励
	EmDoingType_EDT_WorldBoss                EmDoingType = 41 // 世界boss
	EmDoingType_EDT_Championship             EmDoingType = 42 // 锦标赛
	EmDoingType_EDT_FirstCharge              EmDoingType = 43 // 首冲
	EmDoingType_EDT_BP                       EmDoingType = 44 // bp
	EmDoingType_EDT_ChargeCard               EmDoingType = 45 // 充值卡
	EmDoingType_EDT_ChargeGift               EmDoingType = 46 // 直购礼包
	EmDoingType_EDT_GrowRoad                 EmDoingType = 47 // 成长之路
	EmDoingType_EDT_HookTech                 EmDoingType = 48 // 星源抽奖
	EmDoingType_EDT_CrystalUpgrade           EmDoingType = 49 // 晶核升级
	EmDoingType_EDT_Adventure                EmDoingType = 50 // 冒险奖励
	EmDoingType_EDT_ItemBuy                  EmDoingType = 51 // 道具购买
	EmDoingType_EDT_Activity                 EmDoingType = 52 // 活动
	EmDoingType_EDT_AdvertEject              EmDoingType = 53 // 广告弹出
	EmDoingType_EDT_CrystalGenerate          EmDoingType = 54 // 晶核生成
	EmDoingType_EDT_BattleHookPassReward     EmDoingType = 55 // 挂机通关奖励
)

// Enum value maps for EmDoingType.
var (
	EmDoingType_name = map[int32]string{
		0:  "EDT_Gm",
		1:  "EDT_Other",
		2:  "EDT_Client",
		3:  "EDT_ItemUse",
		4:  "EDT_GiftCode",
		5:  "EDT_ProfessionLevel",
		6:  "EDT_ProfessionPeakLevel",
		7:  "EDT_ProfessionPartLevel",
		8:  "EDT_EquipSplit",
		9:  "EDT_HeroAwaken",
		10: "EDT_HeroRebirth",
		11: "EDT_BoxScoreExchange",
		12: "EDT_Battle",
		13: "EDT_BoxConsume",
		14: "EDT_BoxOpen",
		15: "EDT_Task",
		16: "EDT_System",
		17: "EDT_Login",
		18: "EDT_ChangePlayerName",
		19: "EDT_Mail",
		20: "EDT_BlackShop",
		21: "EDT_Advert",
		22: "EDT_CrystalRobotUpgrade",
		23: "EDT_CrystalRedefine",
		24: "EDT_CrystalBookUpgrade",
		25: "EDT_Draw",
		26: "EDT_Charge",
		27: "EDT_BattleHook",
		28: "EDT_Offline",
		29: "EDT_ProfessionPartRefine",
		30: "EDT_ProfessionPartRefineTupo",
		31: "EDT_HeroBook",
		32: "EDT_StarSource",
		33: "EDT_SevenDay",
		34: "EDT_Shop",
		35: "EDT_DailyTask",
		36: "EDT_Reset",
		37: "EDT_Entry",
		38: "EDT_BattleNormal",
		39: "EDT_StarSourceDraw",
		40: "EDT_RankReward",
		41: "EDT_WorldBoss",
		42: "EDT_Championship",
		43: "EDT_FirstCharge",
		44: "EDT_BP",
		45: "EDT_ChargeCard",
		46: "EDT_ChargeGift",
		47: "EDT_GrowRoad",
		48: "EDT_HookTech",
		49: "EDT_CrystalUpgrade",
		50: "EDT_Adventure",
		51: "EDT_ItemBuy",
		52: "EDT_Activity",
		53: "EDT_AdvertEject",
		54: "EDT_CrystalGenerate",
		55: "EDT_BattleHookPassReward",
	}
	EmDoingType_value = map[string]int32{
		"EDT_Gm":                       0,
		"EDT_Other":                    1,
		"EDT_Client":                   2,
		"EDT_ItemUse":                  3,
		"EDT_GiftCode":                 4,
		"EDT_ProfessionLevel":          5,
		"EDT_ProfessionPeakLevel":      6,
		"EDT_ProfessionPartLevel":      7,
		"EDT_EquipSplit":               8,
		"EDT_HeroAwaken":               9,
		"EDT_HeroRebirth":              10,
		"EDT_BoxScoreExchange":         11,
		"EDT_Battle":                   12,
		"EDT_BoxConsume":               13,
		"EDT_BoxOpen":                  14,
		"EDT_Task":                     15,
		"EDT_System":                   16,
		"EDT_Login":                    17,
		"EDT_ChangePlayerName":         18,
		"EDT_Mail":                     19,
		"EDT_BlackShop":                20,
		"EDT_Advert":                   21,
		"EDT_CrystalRobotUpgrade":      22,
		"EDT_CrystalRedefine":          23,
		"EDT_CrystalBookUpgrade":       24,
		"EDT_Draw":                     25,
		"EDT_Charge":                   26,
		"EDT_BattleHook":               27,
		"EDT_Offline":                  28,
		"EDT_ProfessionPartRefine":     29,
		"EDT_ProfessionPartRefineTupo": 30,
		"EDT_HeroBook":                 31,
		"EDT_StarSource":               32,
		"EDT_SevenDay":                 33,
		"EDT_Shop":                     34,
		"EDT_DailyTask":                35,
		"EDT_Reset":                    36,
		"EDT_Entry":                    37,
		"EDT_BattleNormal":             38,
		"EDT_StarSourceDraw":           39,
		"EDT_RankReward":               40,
		"EDT_WorldBoss":                41,
		"EDT_Championship":             42,
		"EDT_FirstCharge":              43,
		"EDT_BP":                       44,
		"EDT_ChargeCard":               45,
		"EDT_ChargeGift":               46,
		"EDT_GrowRoad":                 47,
		"EDT_HookTech":                 48,
		"EDT_CrystalUpgrade":           49,
		"EDT_Adventure":                50,
		"EDT_ItemBuy":                  51,
		"EDT_Activity":                 52,
		"EDT_AdvertEject":              53,
		"EDT_CrystalGenerate":          54,
		"EDT_BattleHookPassReward":     55,
	}
)

func (x EmDoingType) Enum() *EmDoingType {
	p := new(EmDoingType)
	*p = x
	return p
}

func (x EmDoingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmDoingType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (EmDoingType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x EmDoingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmDoingType.Descriptor instead.
func (EmDoingType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

// ------------------------------------------------------
// ------------------------------ 礼包兑换码类型
type EmGiftCodeType int32

const (
	EmGiftCodeType_GAT_Common EmGiftCodeType = 0 // 通用礼包
	EmGiftCodeType_GAT_Code   EmGiftCodeType = 1 // 兑换码礼包
	EmGiftCodeType_GAT_Week   EmGiftCodeType = 2 // 周礼包
	EmGiftCodeType_GAT_Month  EmGiftCodeType = 3 // 月礼包
)

// Enum value maps for EmGiftCodeType.
var (
	EmGiftCodeType_name = map[int32]string{
		0: "GAT_Common",
		1: "GAT_Code",
		2: "GAT_Week",
		3: "GAT_Month",
	}
	EmGiftCodeType_value = map[string]int32{
		"GAT_Common": 0,
		"GAT_Code":   1,
		"GAT_Week":   2,
		"GAT_Month":  3,
	}
)

func (x EmGiftCodeType) Enum() *EmGiftCodeType {
	p := new(EmGiftCodeType)
	*p = x
	return p
}

func (x EmGiftCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmGiftCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (EmGiftCodeType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x EmGiftCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmGiftCodeType.Descriptor instead.
func (EmGiftCodeType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

// ------------------------------------------------------
// ------------------------------ 战斗类型
type EmBattleType int32

const (
	EmBattleType_EBT_None   EmBattleType = 0 // 默认
	EmBattleType_EBT_Normal EmBattleType = 1 // 精英关卡
	EmBattleType_EBT_Tower  EmBattleType = 2 // 爬塔
	EmBattleType_EBT_Hook   EmBattleType = 3 // 挂机
)

// Enum value maps for EmBattleType.
var (
	EmBattleType_name = map[int32]string{
		0: "EBT_None",
		1: "EBT_Normal",
		2: "EBT_Tower",
		3: "EBT_Hook",
	}
	EmBattleType_value = map[string]int32{
		"EBT_None":   0,
		"EBT_Normal": 1,
		"EBT_Tower":  2,
		"EBT_Hook":   3,
	}
)

func (x EmBattleType) Enum() *EmBattleType {
	p := new(EmBattleType)
	*p = x
	return p
}

func (x EmBattleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmBattleType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (EmBattleType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x EmBattleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmBattleType.Descriptor instead.
func (EmBattleType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

// ------------------------------------------------------
// ------------------------------ 任务状态
type EmTaskState int32

const (
	EmTaskState_ETS_Ing    EmTaskState = 0 // 进行中
	EmTaskState_ETS_Finish EmTaskState = 1 // 已完成
	EmTaskState_ETS_Award  EmTaskState = 2 // 已领取
)

// Enum value maps for EmTaskState.
var (
	EmTaskState_name = map[int32]string{
		0: "ETS_Ing",
		1: "ETS_Finish",
		2: "ETS_Award",
	}
	EmTaskState_value = map[string]int32{
		"ETS_Ing":    0,
		"ETS_Finish": 1,
		"ETS_Award":  2,
	}
)

func (x EmTaskState) Enum() *EmTaskState {
	p := new(EmTaskState)
	*p = x
	return p
}

func (x EmTaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmTaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[14].Descriptor()
}

func (EmTaskState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[14]
}

func (x EmTaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmTaskState.Descriptor instead.
func (EmTaskState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

// ----------------商店类型
type EmShopType int32

const (
	EmShopType_EST_None      EmShopType = 0
	EmShopType_EST_BlackShop EmShopType = 1 // 黑市商店
)

// Enum value maps for EmShopType.
var (
	EmShopType_name = map[int32]string{
		0: "EST_None",
		1: "EST_BlackShop",
	}
	EmShopType_value = map[string]int32{
		"EST_None":      0,
		"EST_BlackShop": 1,
	}
)

func (x EmShopType) Enum() *EmShopType {
	p := new(EmShopType)
	*p = x
	return p
}

func (x EmShopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmShopType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[15].Descriptor()
}

func (EmShopType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[15]
}

func (x EmShopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmShopType.Descriptor instead.
func (EmShopType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

// ------------------------------------------------------
// ------------------------------ 系统属性类型
type EmSyetemPropType int32

const (
	EmSyetemPropType_SPT_HeroBook EmSyetemPropType = 0 // 图鉴
)

// Enum value maps for EmSyetemPropType.
var (
	EmSyetemPropType_name = map[int32]string{
		0: "SPT_HeroBook",
	}
	EmSyetemPropType_value = map[string]int32{
		"SPT_HeroBook": 0,
	}
)

func (x EmSyetemPropType) Enum() *EmSyetemPropType {
	p := new(EmSyetemPropType)
	*p = x
	return p
}

func (x EmSyetemPropType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmSyetemPropType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[16].Descriptor()
}

func (EmSyetemPropType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[16]
}

func (x EmSyetemPropType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmSyetemPropType.Descriptor instead.
func (EmSyetemPropType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID   uint64 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	PlayerGold int32  `protobuf:"varint,3,opt,name=PlayerGold,proto3" json:"PlayerGold,omitempty"`
	Ok         bool   `protobuf:"varint,4,opt,name=Ok,proto3" json:"Ok,omitempty"`
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerData) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *PlayerData) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PlayerData) GetPlayerGold() int32 {
	if x != nil {
		return x.PlayerGold
	}
	return 0
}

func (x *PlayerData) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// 客户端包头
type IPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stx            uint32  `protobuf:"varint,1,opt,name=stx,proto3" json:"stx,omitempty"`
	Ckx            uint32  `protobuf:"varint,2,opt,name=ckx,proto3" json:"ckx,omitempty"`
	DestServerType SERVICE `protobuf:"varint,3,opt,name=destServerType,proto3,enum=common.SERVICE" json:"destServerType,omitempty"` // 发送者服务器类型
	Id             uint64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                             // 目标ID
	Seqid          uint32  `protobuf:"varint,5,opt,name=seqid,proto3" json:"seqid,omitempty"`                                       // 序列号
	Code           uint32  `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`                                         // 错误码 ErrorCode
}

func (x *IPacket) Reset() {
	*x = IPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPacket) ProtoMessage() {}

func (x *IPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPacket.ProtoReflect.Descriptor instead.
func (*IPacket) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *IPacket) GetStx() uint32 {
	if x != nil {
		return x.Stx
	}
	return 0
}

func (x *IPacket) GetCkx() uint32 {
	if x != nil {
		return x.Ckx
	}
	return 0
}

func (x *IPacket) GetDestServerType() SERVICE {
	if x != nil {
		return x.DestServerType
	}
	return SERVICE_NONE
}

func (x *IPacket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IPacket) GetSeqid() uint32 {
	if x != nil {
		return x.Seqid
	}
	return 0
}

func (x *IPacket) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 心跳包
type HeardPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeardPacket) Reset() {
	*x = HeardPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeardPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeardPacket) ProtoMessage() {}

func (x *HeardPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeardPacket.ProtoReflect.Descriptor instead.
func (*HeardPacket) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type RouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gate   uint32 `protobuf:"varint,1,opt,name=Gate,proto3" json:"Gate,omitempty"`
	Game   uint32 `protobuf:"varint,2,opt,name=Game,proto3" json:"Game,omitempty"`
	Gm     uint32 `protobuf:"varint,3,opt,name=Gm,proto3" json:"Gm,omitempty"`
	Db     uint32 `protobuf:"varint,4,opt,name=Db,proto3" json:"Db,omitempty"`
	Dip    uint32 `protobuf:"varint,5,opt,name=Dip,proto3" json:"Dip,omitempty"`
	Record uint32 `protobuf:"varint,6,opt,name=Record,proto3" json:"Record,omitempty"`
}

func (x *RouteInfo) Reset() {
	*x = RouteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInfo) ProtoMessage() {}

func (x *RouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInfo.ProtoReflect.Descriptor instead.
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *RouteInfo) GetGate() uint32 {
	if x != nil {
		return x.Gate
	}
	return 0
}

func (x *RouteInfo) GetGame() uint32 {
	if x != nil {
		return x.Game
	}
	return 0
}

func (x *RouteInfo) GetGm() uint32 {
	if x != nil {
		return x.Gm
	}
	return 0
}

func (x *RouteInfo) GetDb() uint32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *RouteInfo) GetDip() uint32 {
	if x != nil {
		return x.Dip
	}
	return 0
}

func (x *RouteInfo) GetRecord() uint32 {
	if x != nil {
		return x.Record
	}
	return 0
}

type RankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType   uint32   `protobuf:"varint,1,opt,name=RankType,proto3" json:"RankType,omitempty"`            // 排行榜类型
	RegionID   uint32   `protobuf:"varint,2,opt,name=RegionID,proto3" json:"RegionID,omitempty"`            // 分区ID
	CreateTime uint64   `protobuf:"varint,3,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`        // 开启时间点
	HasRewards []uint64 `protobuf:"varint,7,rep,packed,name=HasRewards,proto3" json:"HasRewards,omitempty"` // 已经领取奖励的玩家
}

func (x *RankData) Reset() {
	*x = RankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankData) ProtoMessage() {}

func (x *RankData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankData.ProtoReflect.Descriptor instead.
func (*RankData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *RankData) GetRankType() uint32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *RankData) GetRegionID() uint32 {
	if x != nil {
		return x.RegionID
	}
	return 0
}

func (x *RankData) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RankData) GetHasRewards() []uint64 {
	if x != nil {
		return x.HasRewards
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b,
	0x22, 0xa0, 0x01, 0x0a, 0x07, 0x49, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x74, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x6b, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x6b, 0x78,
	0x12, 0x37, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0x7d, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x47, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x47,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x47, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x44, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x44, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x44, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x48, 0x61, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2a, 0x58, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4d, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x42, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x69, 0x70, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x07,
	0x2a, 0x17, 0x0a, 0x0a, 0x65, 0x6d, 0x50, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x2a, 0x2d, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x2a, 0xbc, 0x03, 0x0a, 0x0e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x61, 0x67, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x61, 0x69, 0x6c, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x10, 0x08, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10,
	0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x10,
	0x0b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x42, 0x6f, 0x78, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x14, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x63, 0x68, 0x10,
	0x15, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x76, 0x65, 0x6e,
	0x44, 0x61, 0x79, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x61, 0x78, 0x10, 0x1b, 0x2a, 0x56, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x54, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x2a,
	0x2a, 0x0a, 0x0b, 0x45, 0x6d, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x10, 0x01, 0x2a, 0x71, 0x0a, 0x09, 0x45,
	0x6d, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x65, 0x74, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x47, 0x6f, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x04, 0x2a, 0x62,
	0x0a, 0x10, 0x45, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x45, 0x54, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x45, 0x54, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x45, 0x54, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x49, 0x45, 0x54, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x10, 0x19, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x49, 0x45, 0x54, 0x5f, 0x4d, 0x61, 0x78,
	0x10, 0x64, 0x2a, 0x33, 0x0a, 0x13, 0x45, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x50, 0x4f,
	0x54, 0x5f, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x50, 0x4f, 0x54,
	0x5f, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x2a, 0x6f, 0x0a, 0x0c, 0x45, 0x6d, 0x47, 0x6d, 0x46,
	0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x46, 0x54, 0x5f, 0x41,
	0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x46, 0x54, 0x5f,
	0x41, 0x64, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x46,
	0x54, 0x5f, 0x41, 0x64, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x46, 0x54, 0x5f, 0x4e, 0x42, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x46, 0x54, 0x5f, 0x52,
	0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x46, 0x54, 0x5f,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x05, 0x2a, 0x2d, 0x0a, 0x0d, 0x45, 0x6d, 0x47, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x50, 0x54,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x50, 0x54, 0x5f, 0x47,
	0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x01, 0x2a, 0xf0, 0x08, 0x0a, 0x0b, 0x45, 0x6d, 0x44, 0x6f,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x54, 0x5f, 0x47,
	0x6d, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x54, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x44, 0x54, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x44, 0x54, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73,
	0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x44, 0x54, 0x5f, 0x47, 0x69, 0x66, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x54, 0x5f, 0x50, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x44, 0x54, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x44, 0x54, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x54, 0x5f,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x44, 0x54, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x10, 0x09,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x44, 0x54, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x54, 0x5f, 0x42, 0x6f, 0x78,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x44, 0x54, 0x5f, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x44, 0x54, 0x5f, 0x42, 0x6f, 0x78, 0x4f, 0x70,
	0x65, 0x6e, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x54, 0x5f, 0x54, 0x61, 0x73, 0x6b,
	0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x44, 0x54, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x54, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10,
	0x11, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x44, 0x54, 0x5f, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44, 0x54,
	0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x44, 0x54, 0x5f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x44, 0x54, 0x5f, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x54,
	0x5f, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x44, 0x54, 0x5f, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x18, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x44, 0x54, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x10, 0x1b,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x44, 0x54, 0x5f, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x44, 0x54, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x10, 0x1d, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x44, 0x54, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x75, 0x70, 0x6f, 0x10,
	0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x44, 0x54, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x6f,
	0x6b, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x44, 0x54, 0x5f, 0x53,
	0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x54,
	0x5f, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44, 0x54, 0x5f, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x23, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44,
	0x54, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x24, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x54,
	0x5f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x44, 0x54, 0x5f,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x26, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x44, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x54, 0x5f, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44,
	0x54, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x10, 0x29, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x44, 0x54, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x54, 0x5f,
	0x42, 0x50, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x54, 0x5f, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x2d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x54, 0x5f,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x44, 0x54, 0x5f, 0x47, 0x72, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x64, 0x10, 0x2f, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x44, 0x54, 0x5f, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x63, 0x68, 0x10, 0x30,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x44, 0x54, 0x5f, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x31, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44, 0x54, 0x5f,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x10, 0x32, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x44, 0x54, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x75, 0x79, 0x10, 0x33, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x44, 0x54, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x34, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x44, 0x54, 0x5f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x45, 0x6a, 0x65, 0x63,
	0x74, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x54, 0x5f, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0x36, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x44, 0x54, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x37, 0x2a, 0x4b, 0x0a, 0x0e, 0x45, 0x6d,
	0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x47, 0x41, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x41, 0x54, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x41,
	0x54, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x54, 0x5f,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x0c, 0x45, 0x6d, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x42, 0x54, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x42, 0x54, 0x5f, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x42, 0x54, 0x5f, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x42, 0x54, 0x5f, 0x48, 0x6f, 0x6f, 0x6b,
	0x10, 0x03, 0x2a, 0x39, 0x0a, 0x0b, 0x45, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x54, 0x53, 0x5f, 0x49, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x54, 0x53, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x10, 0x02, 0x2a, 0x2d, 0x0a,
	0x0a, 0x45, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x53, 0x54, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x54,
	0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x01, 0x2a, 0x24, 0x0a, 0x10,
	0x45, 0x6d, 0x53, 0x79, 0x65, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x54, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x6f, 0x6b,
	0x10, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_common_proto_goTypes = []interface{}{
	(SERVICE)(0),             // 0: common.SERVICE
	(EmPlatType)(0),          // 1: common.emPlatType
	(LoginState)(0),          // 2: common.LoginState
	(PlayerDataType)(0),      // 3: common.PlayerDataType
	(CHAT)(0),                // 4: common.CHAT
	(EmMailState)(0),         // 5: common.EmMailState
	(EmBagType)(0),           // 6: common.EmBagType
	(EmItemExpendType)(0),    // 7: common.EmItemExpendType
	(EmPlayerOfflineType)(0), // 8: common.EmPlayerOfflineType
	(EmGmFuncType)(0),        // 9: common.EmGmFuncType
	(EmGmParamType)(0),       // 10: common.EmGmParamType
	(EmDoingType)(0),         // 11: common.EmDoingType
	(EmGiftCodeType)(0),      // 12: common.EmGiftCodeType
	(EmBattleType)(0),        // 13: common.EmBattleType
	(EmTaskState)(0),         // 14: common.EmTaskState
	(EmShopType)(0),          // 15: common.EmShopType
	(EmSyetemPropType)(0),    // 16: common.EmSyetemPropType
	(*PlayerData)(nil),       // 17: common.PlayerData
	(*IPacket)(nil),          // 18: common.IPacket
	(*HeardPacket)(nil),      // 19: common.HeardPacket
	(*RouteInfo)(nil),        // 20: common.RouteInfo
	(*RankData)(nil),         // 21: common.RankData
}
var file_common_proto_depIdxs = []int32{
	0, // 0: common.IPacket.destServerType:type_name -> common.SERVICE
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeardPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
