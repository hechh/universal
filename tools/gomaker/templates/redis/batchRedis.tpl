// Code generated by gomaker. DO NOT EDIT.

package activity_batch

import (
	"fmt"

	"forevernine.com/planet/server/common/dao/domain"
	"forevernine.com/planet/server/common/dao/internal/common/base"
	"forevernine.com/planet/server/common/dao/internal/manager"
	"forevernine.com/planet/server/common/dao/internal/service/redis"
	pb "forevernine.com/planet/server/common/pbclass"
	"github.com/gogo/protobuf/proto"
)

func Batch(uid string, pbnames []string, f func(data map[string]interface{}, err error)) {
	manager.Batch(uid, pbnames, f)
}

func init() {
{{range $item := .}} manager.RegisterIBatch(&{{$item.UniqueID}}RedisHash{
		dbName: domain.{{$item.DBName}}, 
		makers: make(map[string]domain.IMaker),
	})
{{range $val := $item.List}} manager.RegisterIMaker("{{$item.UniqueID}}", &{{$val.PBName}}Maker{})
{{end}}
{{end}}
}

{{range $item := .}}

{{$uniqueID := $item.UniqueID}}
{{$key := $item.Key}}

// 实现 IRedisHash 接口
type {{$uniqueID}}RedisHash struct {
	dbName string
	makers map[string]domain.IMaker
}

func (d *{{$uniqueID}}RedisHash) GetRedisKey({{$key.Values.Arg}}) string {
	return fmt.Sprintf("{{$key.Format}}" {{if $key.Values}}, {{$key.Values.Val ""}} {{end}})
}

func (d *{{$uniqueID}}RedisHash) UniqueID() string {
	return "{{$uniqueID}}"
}

func (d *{{$uniqueID}}RedisHash) Register(m domain.IMaker) {
	d.makers[m.GetName()] = m
}

func (d *{{$uniqueID}}RedisHash) Batch(uid string, pbnames []string) (map[string]interface{}, error) {
	if len(pbnames) <= 0 {
		return nil, fmt.Errorf("pbnames is empty")
	}

	makerSet := []domain.IMaker{}
	args := []interface{}{}
	for _, field := range pbnames {
		maker, ok := d.makers[field]
		if !ok {
			continue
		}
		args = append(args, maker.GetField())
		makerSet = append(makerSet, maker)
	}
	if len(args) <= 0 {
		return nil, nil	
	}

	rets, err := redis.HMGet(d.dbName, d.GetRedisKey(uid), args...)
	if err != nil {
		return nil, err
	}
	return base.UnmarshalBatch(makerSet, rets), nil
}

{{range $pbname := $item.List}}
type {{$pbname.PBName}}Maker struct {}

func (d *{{$pbname.PBName}}Maker) GetName() string {
	return "{{$pbname.PBName}}"
}

func (d *{{$pbname.PBName}}Maker) GetField() string {
	return "{{$pbname.Field.Field}}"
}

func (d *{{$pbname.PBName}}Maker) NewProto() proto.Unmarshaler {
	return &pb.{{$pbname.PBName}}{}
}
{{end}}

{{end}}
