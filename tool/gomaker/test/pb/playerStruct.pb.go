// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: playerStruct.proto

package pb

import (
	reflect "reflect"
	sync "sync"
	"universal/tool/gomaker/test/pb/ttt"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TPlayerBase ttt.PBPlayerBase

// 用户标记
type PBPlayerBase struct {
	TTT *ttt.PBPlayerBase
	Display           *PBPlayerBaseDisplay `protobuf:"bytes,1,opt,name=Display,proto3" json:"Display,omitempty"`                               // 展示数据
	CreateTime        uint64               `protobuf:"varint,2,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`                        // 创建时间
	LoginState        LoginState           `protobuf:"varint,3,opt,name=LoginState,proto3,enum=common.LoginState" json:"LoginState,omitempty"` // 登录状态
	Expend            []*PBPlayerExpend    `protobuf:"bytes,4,rep,name=Expend,proto3" json:"Expend,omitempty"`                                 // 消耗
	LastDailyTime     uint64               `protobuf:"varint,5,opt,name=LastDailyTime,proto3" json:"LastDailyTime,omitempty"`                  // 上一次跨天时间戳
	LastModifyTime    uint64               `protobuf:"varint,6,opt,name=LastModifyTime,proto3" json:"LastModifyTime,omitempty"`                // 上一次修改名字时间戳(扩展字段)
	NewPlayerTypeList []uint32             `protobuf:"varint,7,rep,packed,name=NewPlayerTypeList,proto3" json:"NewPlayerTypeList,omitempty"`   // 是否new过的系统
	PlatType          uint32               `protobuf:"varint,8,opt,name=PlatType,proto3" json:"PlatType,omitempty"`                            // 平台类型 本地0,冰川1
	PlatSystemType    uint32               `protobuf:"varint,9,opt,name=PlatSystemType,proto3" json:"PlatSystemType,omitempty"`                // 平台系统类型 安卓/ios/海外安卓/海外ios
	AccountName       string               `protobuf:"bytes,10,opt,name=AccountName,proto3" json:"AccountName,omitempty"`                      // 账号名称（openid）
	SeverStartTime    uint64               `protobuf:"varint,11,opt,name=SeverStartTime,proto3" json:"SeverStartTime,omitempty"`               // 开服时间
}

// 属性
type PBU32U32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`     // 主键
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"` // 值
}

func (x *PBU32U32) Reset() {
	*x = PBU32U32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBU32U32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBU32U32) ProtoMessage() {}

func (x *PBU32U32) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBU32U32.ProtoReflect.Descriptor instead.
func (*PBU32U32) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{0}
}

func (x *PBU32U32) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *PBU32U32) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 属性
type PBU32U64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`     // 主键
	Value uint64 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"` // 值
}

func (x *PBU32U64) Reset() {
	*x = PBU32U64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBU32U64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBU32U64) ProtoMessage() {}

func (x *PBU32U64) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBU32U64.ProtoReflect.Descriptor instead.
func (*PBU32U64) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{1}
}

func (x *PBU32U64) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *PBU32U64) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 用户消耗数据
type PBStringInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`      // 名称
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *PBStringInt64) Reset() {
	*x = PBStringInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBStringInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBStringInt64) ProtoMessage() {}

func (x *PBStringInt64) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBStringInt64.ProtoReflect.Descriptor instead.
func (*PBStringInt64) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{2}
}

func (x *PBStringInt64) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PBStringInt64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 用户消耗数据
type PBPlayerExpend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpendType  uint32 `protobuf:"varint,1,opt,name=ExpendType,proto3" json:"ExpendType,omitempty"`   // 消耗类型
	ExpendValue int64  `protobuf:"varint,2,opt,name=ExpendValue,proto3" json:"ExpendValue,omitempty"` // 消耗值
}

func (x *PBPlayerExpend) Reset() {
	*x = PBPlayerExpend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerExpend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerExpend) ProtoMessage() {}

func (x *PBPlayerExpend) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerExpend.ProtoReflect.Descriptor instead.
func (*PBPlayerExpend) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{3}
}

func (x *PBPlayerExpend) GetExpendType() uint32 {
	if x != nil {
		return x.ExpendType
	}
	return 0
}

func (x *PBPlayerExpend) GetExpendValue() int64 {
	if x != nil {
		return x.ExpendValue
	}
	return 0
}

// 用户显示
type PBPlayerBaseDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     uint64 `protobuf:"varint,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`         // 账号ID
	PlayerName    string `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`        // 角色名称
	PlayerLevel   uint32 `protobuf:"varint,3,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`     // 角色等级
	VipLevel      uint32 `protobuf:"varint,4,opt,name=vipLevel,proto3" json:"vipLevel,omitempty"`           // vip等级
	AvatarID      uint32 `protobuf:"varint,5,opt,name=AvatarID,proto3" json:"AvatarID,omitempty"`           // 头像ID
	AvatarFrameID uint32 `protobuf:"varint,6,opt,name=AvatarFrameID,proto3" json:"AvatarFrameID,omitempty"` // 头像框ID
	SeverId       uint32 `protobuf:"varint,7,opt,name=SeverId,proto3" json:"SeverId,omitempty"`             // 内部区服ID
}

func (x *PBPlayerBaseDisplay) Reset() {
	*x = PBPlayerBaseDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerBaseDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerBaseDisplay) ProtoMessage() {}

func (x *PBPlayerBaseDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerBaseDisplay.ProtoReflect.Descriptor instead.
func (*PBPlayerBaseDisplay) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{4}
}

func (x *PBPlayerBaseDisplay) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *PBPlayerBaseDisplay) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PBPlayerBaseDisplay) GetPlayerLevel() uint32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *PBPlayerBaseDisplay) GetVipLevel() uint32 {
	if x != nil {
		return x.VipLevel
	}
	return 0
}

func (x *PBPlayerBaseDisplay) GetAvatarID() uint32 {
	if x != nil {
		return x.AvatarID
	}
	return 0
}

func (x *PBPlayerBaseDisplay) GetAvatarFrameID() uint32 {
	if x != nil {
		return x.AvatarFrameID
	}
	return 0
}

func (x *PBPlayerBaseDisplay) GetSeverId() uint32 {
	if x != nil {
		return x.SeverId
	}
	return 0
}

func (x *PBPlayerBase) Reset() {
	*x = PBPlayerBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerBase) ProtoMessage() {}

func (x *PBPlayerBase) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerBase.ProtoReflect.Descriptor instead.
func (*PBPlayerBase) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{5}
}

func (x *PBPlayerBase) GetDisplay() *PBPlayerBaseDisplay {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *PBPlayerBase) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PBPlayerBase) GetLoginState() LoginState {
	if x != nil {
		return x.LoginState
	}
	return LoginState_None
}

func (x *PBPlayerBase) GetExpend() []*PBPlayerExpend {
	if x != nil {
		return x.Expend
	}
	return nil
}

func (x *PBPlayerBase) GetLastDailyTime() uint64 {
	if x != nil {
		return x.LastDailyTime
	}
	return 0
}

func (x *PBPlayerBase) GetLastModifyTime() uint64 {
	if x != nil {
		return x.LastModifyTime
	}
	return 0
}

func (x *PBPlayerBase) GetNewPlayerTypeList() []uint32 {
	if x != nil {
		return x.NewPlayerTypeList
	}
	return nil
}

func (x *PBPlayerBase) GetPlatType() uint32 {
	if x != nil {
		return x.PlatType
	}
	return 0
}

func (x *PBPlayerBase) GetPlatSystemType() uint32 {
	if x != nil {
		return x.PlatSystemType
	}
	return 0
}

func (x *PBPlayerBase) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *PBPlayerBase) GetSeverStartTime() uint64 {
	if x != nil {
		return x.SeverStartTime
	}
	return 0
}

// 用户任务
type PBPlayerGiftCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acode string `protobuf:"bytes,1,opt,name=Acode,proto3" json:"Acode,omitempty"`  // 兑换码
	Count uint32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"` // 次数
	Time  uint64 `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`   // 兑换时间
}

func (x *PBPlayerGiftCode) Reset() {
	*x = PBPlayerGiftCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerGiftCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerGiftCode) ProtoMessage() {}

func (x *PBPlayerGiftCode) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerGiftCode.ProtoReflect.Descriptor instead.
func (*PBPlayerGiftCode) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{6}
}

func (x *PBPlayerGiftCode) GetAcode() string {
	if x != nil {
		return x.Acode
	}
	return ""
}

func (x *PBPlayerGiftCode) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PBPlayerGiftCode) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 用户头像
type PBAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarID uint32 `protobuf:"varint,1,opt,name=AvatarID,proto3" json:"AvatarID,omitempty"` // 头像ID
	Type     uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`         // 获取方式(EmDointType)
}

func (x *PBAvatar) Reset() {
	*x = PBAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAvatar) ProtoMessage() {}

func (x *PBAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAvatar.ProtoReflect.Descriptor instead.
func (*PBAvatar) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{7}
}

func (x *PBAvatar) GetAvatarID() uint32 {
	if x != nil {
		return x.AvatarID
	}
	return 0
}

func (x *PBAvatar) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 用户头像框
type PBAvatarFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameID uint32 `protobuf:"varint,1,opt,name=FrameID,proto3" json:"FrameID,omitempty"` // 头像框ID
	Type    uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`       // 获取方式(EmDointType)
}

func (x *PBAvatarFrame) Reset() {
	*x = PBAvatarFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAvatarFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAvatarFrame) ProtoMessage() {}

func (x *PBAvatarFrame) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAvatarFrame.ProtoReflect.Descriptor instead.
func (*PBAvatarFrame) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{8}
}

func (x *PBAvatarFrame) GetFrameID() uint32 {
	if x != nil {
		return x.FrameID
	}
	return 0
}

func (x *PBAvatarFrame) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 用户广告数据
type PBAdvertInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`             // 广告类型
	DailyCount uint32 `protobuf:"varint,2,opt,name=DailyCount,proto3" json:"DailyCount,omitempty"` // 每日观看次数
}

func (x *PBAdvertInfo) Reset() {
	*x = PBAdvertInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAdvertInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAdvertInfo) ProtoMessage() {}

func (x *PBAdvertInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAdvertInfo.ProtoReflect.Descriptor instead.
func (*PBAdvertInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{9}
}

func (x *PBAdvertInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PBAdvertInfo) GetDailyCount() uint32 {
	if x != nil {
		return x.DailyCount
	}
	return 0
}

// 用户通用数据
type PBPlayerSystemCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastChatTime        uint64              `protobuf:"varint,1,opt,name=LastChatTime,proto3" json:"LastChatTime,omitempty"`                      // 上次聊天时间
	GiftCode            []*PBPlayerGiftCode `protobuf:"bytes,2,rep,name=GiftCode,proto3" json:"GiftCode,omitempty"`                               // 兑换码
	SystemOpenIds       []uint32            `protobuf:"varint,3,rep,packed,name=SystemOpenIds,proto3" json:"SystemOpenIds,omitempty"`             // 系统开关列表
	Avatars             []*PBAvatar         `protobuf:"bytes,4,rep,name=Avatars,proto3" json:"Avatars,omitempty"`                                 // 头像
	AvatarFrames        []*PBAvatarFrame    `protobuf:"bytes,5,rep,name=AvatarFrames,proto3" json:"AvatarFrames,omitempty"`                       // 头像框
	MaxNoticeId         uint32              `protobuf:"varint,6,opt,name=MaxNoticeId,proto3" json:"MaxNoticeId,omitempty"`                        // 最大的公告ID
	AdvertList          []*PBAdvertInfo     `protobuf:"bytes,7,rep,name=AdvertList,proto3" json:"AdvertList,omitempty"`                           // 广告信息
	SystemOpenPrizeList []uint32            `protobuf:"varint,8,rep,packed,name=SystemOpenPrizeList,proto3" json:"SystemOpenPrizeList,omitempty"` // 系统开关领取列表
}

func (x *PBPlayerSystemCommon) Reset() {
	*x = PBPlayerSystemCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemCommon) ProtoMessage() {}

func (x *PBPlayerSystemCommon) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemCommon.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemCommon) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{10}
}

func (x *PBPlayerSystemCommon) GetLastChatTime() uint64 {
	if x != nil {
		return x.LastChatTime
	}
	return 0
}

func (x *PBPlayerSystemCommon) GetGiftCode() []*PBPlayerGiftCode {
	if x != nil {
		return x.GiftCode
	}
	return nil
}

func (x *PBPlayerSystemCommon) GetSystemOpenIds() []uint32 {
	if x != nil {
		return x.SystemOpenIds
	}
	return nil
}

func (x *PBPlayerSystemCommon) GetAvatars() []*PBAvatar {
	if x != nil {
		return x.Avatars
	}
	return nil
}

func (x *PBPlayerSystemCommon) GetAvatarFrames() []*PBAvatarFrame {
	if x != nil {
		return x.AvatarFrames
	}
	return nil
}

func (x *PBPlayerSystemCommon) GetMaxNoticeId() uint32 {
	if x != nil {
		return x.MaxNoticeId
	}
	return 0
}

func (x *PBPlayerSystemCommon) GetAdvertList() []*PBAdvertInfo {
	if x != nil {
		return x.AdvertList
	}
	return nil
}

func (x *PBPlayerSystemCommon) GetSystemOpenPrizeList() []uint32 {
	if x != nil {
		return x.SystemOpenPrizeList
	}
	return nil
}

// *************************************************用户任务数据开始***************************
// 成就
type PBAchieveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchieveType uint32   `protobuf:"varint,1,opt,name=AchieveType,proto3" json:"AchieveType,omitempty"` // 成就类型
	Params      []uint32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`    // 参数
	Value       uint32   `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`             // 当前值
}

func (x *PBAchieveInfo) Reset() {
	*x = PBAchieveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAchieveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAchieveInfo) ProtoMessage() {}

func (x *PBAchieveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAchieveInfo.ProtoReflect.Descriptor instead.
func (*PBAchieveInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{11}
}

func (x *PBAchieveInfo) GetAchieveType() uint32 {
	if x != nil {
		return x.AchieveType
	}
	return 0
}

func (x *PBAchieveInfo) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PBAchieveInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 每日任务
type PBDailyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList   []*PBTaskStageInfo `protobuf:"bytes,1,rep,name=TaskList,proto3" json:"TaskList,omitempty"`      // 任务列表
	Score      uint32             `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`           // 活跃值
	PrizeScore uint32             `protobuf:"varint,3,opt,name=PrizeScore,proto3" json:"PrizeScore,omitempty"` // 领取的活跃值
}

func (x *PBDailyTask) Reset() {
	*x = PBDailyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBDailyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDailyTask) ProtoMessage() {}

func (x *PBDailyTask) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDailyTask.ProtoReflect.Descriptor instead.
func (*PBDailyTask) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{12}
}

func (x *PBDailyTask) GetTaskList() []*PBTaskStageInfo {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *PBDailyTask) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PBDailyTask) GetPrizeScore() uint32 {
	if x != nil {
		return x.PrizeScore
	}
	return 0
}

// 用户任务信息
type PBPlayerSystemTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTask    *PBTaskStageInfo `protobuf:"bytes,1,opt,name=MainTask,proto3" json:"MainTask,omitempty"`       // 主线任务
	DailyTask   *PBDailyTask     `protobuf:"bytes,2,opt,name=DailyTask,proto3" json:"DailyTask,omitempty"`     // 每日任务
	AchieveList []*PBAchieveInfo `protobuf:"bytes,3,rep,name=AchieveList,proto3" json:"AchieveList,omitempty"` // 成就
}

func (x *PBPlayerSystemTask) Reset() {
	*x = PBPlayerSystemTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemTask) ProtoMessage() {}

func (x *PBPlayerSystemTask) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemTask.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemTask) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{13}
}

func (x *PBPlayerSystemTask) GetMainTask() *PBTaskStageInfo {
	if x != nil {
		return x.MainTask
	}
	return nil
}

func (x *PBPlayerSystemTask) GetDailyTask() *PBDailyTask {
	if x != nil {
		return x.DailyTask
	}
	return nil
}

func (x *PBPlayerSystemTask) GetAchieveList() []*PBAchieveInfo {
	if x != nil {
		return x.AchieveList
	}
	return nil
}

// *************************************************用户任务数据开始***************************
// 用户职业装备信息
type PBPlayerSystemProfPartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Part       uint32 `protobuf:"varint,1,opt,name=Part,proto3" json:"Part,omitempty"`             // 部位ID EmEquipPartType
	Level      uint32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`           // 强化等级
	EquipSn    uint32 `protobuf:"varint,3,opt,name=EquipSn,proto3" json:"EquipSn,omitempty"`       // 装备Sn 0表示无
	Refine     uint32 `protobuf:"varint,4,opt,name=Refine,proto3" json:"Refine,omitempty"`         // 精炼等级
	RefineTupo uint32 `protobuf:"varint,5,opt,name=RefineTupo,proto3" json:"RefineTupo,omitempty"` // 精炼突破等级
}

func (x *PBPlayerSystemProfPartInfo) Reset() {
	*x = PBPlayerSystemProfPartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemProfPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemProfPartInfo) ProtoMessage() {}

func (x *PBPlayerSystemProfPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemProfPartInfo.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemProfPartInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{14}
}

func (x *PBPlayerSystemProfPartInfo) GetPart() uint32 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *PBPlayerSystemProfPartInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PBPlayerSystemProfPartInfo) GetEquipSn() uint32 {
	if x != nil {
		return x.EquipSn
	}
	return 0
}

func (x *PBPlayerSystemProfPartInfo) GetRefine() uint32 {
	if x != nil {
		return x.Refine
	}
	return 0
}

func (x *PBPlayerSystemProfPartInfo) GetRefineTupo() uint32 {
	if x != nil {
		return x.RefineTupo
	}
	return 0
}

// 用户职业信息
type PBPlayerSystemProfInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfType     uint32                        `protobuf:"varint,1,opt,name=ProfType,proto3" json:"ProfType,omitempty"`         // 职业类型  EmProfessionType
	Level        uint32                        `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`               // 职业等级
	Grade        uint32                        `protobuf:"varint,3,opt,name=Grade,proto3" json:"Grade,omitempty"`               // 突破等级
	PeakLevel    uint32                        `protobuf:"varint,4,opt,name=PeakLevel,proto3" json:"PeakLevel,omitempty"`       // 巅峰等级
	PartList     []*PBPlayerSystemProfPartInfo `protobuf:"bytes,5,rep,name=PartList,proto3" json:"PartList,omitempty"`          // 职业装备信息
	LastLinkStar uint32                        `protobuf:"varint,6,opt,name=LastLinkStar,proto3" json:"LastLinkStar,omitempty"` // 上一次套装品阶
}

func (x *PBPlayerSystemProfInfo) Reset() {
	*x = PBPlayerSystemProfInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemProfInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemProfInfo) ProtoMessage() {}

func (x *PBPlayerSystemProfInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemProfInfo.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemProfInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{15}
}

func (x *PBPlayerSystemProfInfo) GetProfType() uint32 {
	if x != nil {
		return x.ProfType
	}
	return 0
}

func (x *PBPlayerSystemProfInfo) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PBPlayerSystemProfInfo) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *PBPlayerSystemProfInfo) GetPeakLevel() uint32 {
	if x != nil {
		return x.PeakLevel
	}
	return 0
}

func (x *PBPlayerSystemProfInfo) GetPartList() []*PBPlayerSystemProfPartInfo {
	if x != nil {
		return x.PartList
	}
	return nil
}

func (x *PBPlayerSystemProfInfo) GetLastLinkStar() uint32 {
	if x != nil {
		return x.LastLinkStar
	}
	return 0
}

// 用户职业
type PBPlayerSystemProfession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfList []*PBPlayerSystemProfInfo `protobuf:"bytes,1,rep,name=ProfList,proto3" json:"ProfList,omitempty"` // 职业信息
}

func (x *PBPlayerSystemProfession) Reset() {
	*x = PBPlayerSystemProfession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemProfession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemProfession) ProtoMessage() {}

func (x *PBPlayerSystemProfession) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemProfession.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemProfession) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{16}
}

func (x *PBPlayerSystemProfession) GetProfList() []*PBPlayerSystemProfInfo {
	if x != nil {
		return x.ProfList
	}
	return nil
}

// *************************************************用户关卡数据开始***************************
// 怪物数据
type BattleKillMonsterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonsterType uint32 `protobuf:"varint,1,opt,name=MonsterType,proto3" json:"MonsterType,omitempty"` // 怪物类型 小怪 精英怪 boss
	KillCount   uint32 `protobuf:"varint,2,opt,name=KillCount,proto3" json:"KillCount,omitempty"`     // 击杀数量
	MaxCount    uint32 `protobuf:"varint,3,opt,name=MaxCount,proto3" json:"MaxCount,omitempty"`       // 最大数量
}

func (x *BattleKillMonsterInfo) Reset() {
	*x = BattleKillMonsterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleKillMonsterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleKillMonsterInfo) ProtoMessage() {}

func (x *BattleKillMonsterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleKillMonsterInfo.ProtoReflect.Descriptor instead.
func (*BattleKillMonsterInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{17}
}

func (x *BattleKillMonsterInfo) GetMonsterType() uint32 {
	if x != nil {
		return x.MonsterType
	}
	return 0
}

func (x *BattleKillMonsterInfo) GetKillCount() uint32 {
	if x != nil {
		return x.KillCount
	}
	return 0
}

func (x *BattleKillMonsterInfo) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

// 战场数据
type BattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType  EmBattleType             `protobuf:"varint,1,opt,name=BattleType,proto3,enum=common.EmBattleType" json:"BattleType,omitempty"` // 战斗类型 1地图，2爬塔，3挂机
	MapId       uint32                   `protobuf:"varint,2,opt,name=MapId,proto3" json:"MapId,omitempty"`                                    // 地图ID
	StageId     uint32                   `protobuf:"varint,3,opt,name=StageId,proto3" json:"StageId,omitempty"`                                // 关卡ID
	IsSucc      uint32                   `protobuf:"varint,4,opt,name=IsSucc,proto3" json:"IsSucc,omitempty"`                                  // 结果 1胜利
	UseTime     uint32                   `protobuf:"varint,5,opt,name=UseTime,proto3" json:"UseTime,omitempty"`                                // 使用时间秒
	StageRate   uint32                   `protobuf:"varint,6,opt,name=StageRate,proto3" json:"StageRate,omitempty"`                            // 通关进度百分比
	MonsterInfo []*BattleKillMonsterInfo `protobuf:"bytes,7,rep,name=MonsterInfo,proto3" json:"MonsterInfo,omitempty"`                         // 击杀数据
	ClientData  *PBBattleClientData      `protobuf:"bytes,8,opt,name=ClientData,proto3" json:"ClientData,omitempty"`                           // 战场内部客户端数据
	TotalDamage uint64                   `protobuf:"varint,9,opt,name=TotalDamage,proto3" json:"TotalDamage,omitempty"`                        // 总伤害
}

func (x *BattleInfo) Reset() {
	*x = BattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleInfo) ProtoMessage() {}

func (x *BattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleInfo.ProtoReflect.Descriptor instead.
func (*BattleInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{18}
}

func (x *BattleInfo) GetBattleType() EmBattleType {
	if x != nil {
		return x.BattleType
	}
	return EmBattleType_EBT_None
}

func (x *BattleInfo) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *BattleInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *BattleInfo) GetIsSucc() uint32 {
	if x != nil {
		return x.IsSucc
	}
	return 0
}

func (x *BattleInfo) GetUseTime() uint32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *BattleInfo) GetStageRate() uint32 {
	if x != nil {
		return x.StageRate
	}
	return 0
}

func (x *BattleInfo) GetMonsterInfo() []*BattleKillMonsterInfo {
	if x != nil {
		return x.MonsterInfo
	}
	return nil
}

func (x *BattleInfo) GetClientData() *PBBattleClientData {
	if x != nil {
		return x.ClientData
	}
	return nil
}

func (x *BattleInfo) GetTotalDamage() uint64 {
	if x != nil {
		return x.TotalDamage
	}
	return 0
}

// 用户战场信息
type PBBattleMapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId        uint32 `protobuf:"varint,1,opt,name=MapId,proto3" json:"MapId,omitempty"`               // 地图ID
	StageId      uint32 `protobuf:"varint,2,opt,name=StageId,proto3" json:"StageId,omitempty"`           // 关卡ID
	Time         uint64 `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`                 // 时间戳
	StageRate    uint32 `protobuf:"varint,4,opt,name=StageRate,proto3" json:"StageRate,omitempty"`       // 通关进度万分比
	UseTime      uint32 `protobuf:"varint,5,opt,name=UseTime,proto3" json:"UseTime,omitempty"`           // 使用时间秒
	FightCount   uint32 `protobuf:"varint,6,opt,name=FightCount,proto3" json:"FightCount,omitempty"`     // 挑战次数 begin就算一次
	IsSuceess    uint32 `protobuf:"varint,7,opt,name=IsSuceess,proto3" json:"IsSuceess,omitempty"`       // 是否通关 1通关
	RebirthCount uint32 `protobuf:"varint,8,opt,name=RebirthCount,proto3" json:"RebirthCount,omitempty"` // 总复活次数
}

func (x *PBBattleMapInfo) Reset() {
	*x = PBBattleMapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBattleMapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBattleMapInfo) ProtoMessage() {}

func (x *PBBattleMapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBattleMapInfo.ProtoReflect.Descriptor instead.
func (*PBBattleMapInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{19}
}

func (x *PBBattleMapInfo) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *PBBattleMapInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *PBBattleMapInfo) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PBBattleMapInfo) GetStageRate() uint32 {
	if x != nil {
		return x.StageRate
	}
	return 0
}

func (x *PBBattleMapInfo) GetUseTime() uint32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *PBBattleMapInfo) GetFightCount() uint32 {
	if x != nil {
		return x.FightCount
	}
	return 0
}

func (x *PBBattleMapInfo) GetIsSuceess() uint32 {
	if x != nil {
		return x.IsSuceess
	}
	return 0
}

func (x *PBBattleMapInfo) GetRebirthCount() uint32 {
	if x != nil {
		return x.RebirthCount
	}
	return 0
}

// 用户战场进度
type PBBattleSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType   uint32                   `protobuf:"varint,1,opt,name=BattleType,proto3" json:"BattleType,omitempty"`     // 战斗类型
	StageRate    uint32                   `protobuf:"varint,2,opt,name=StageRate,proto3" json:"StageRate,omitempty"`       // 通关进度万分比
	UseTime      uint32                   `protobuf:"varint,3,opt,name=UseTime,proto3" json:"UseTime,omitempty"`           // 使用时间秒
	RebirthCount uint32                   `protobuf:"varint,4,opt,name=RebirthCount,proto3" json:"RebirthCount,omitempty"` // 复活次数
	ClientData   *PBBattleClientData      `protobuf:"bytes,5,opt,name=ClientData,proto3" json:"ClientData,omitempty"`      // 战场客户端数据
	MonsterInfo  []*BattleKillMonsterInfo `protobuf:"bytes,6,rep,name=MonsterInfo,proto3" json:"MonsterInfo,omitempty"`    // 击杀数据
}

func (x *PBBattleSchedule) Reset() {
	*x = PBBattleSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBattleSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBattleSchedule) ProtoMessage() {}

func (x *PBBattleSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBattleSchedule.ProtoReflect.Descriptor instead.
func (*PBBattleSchedule) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{20}
}

func (x *PBBattleSchedule) GetBattleType() uint32 {
	if x != nil {
		return x.BattleType
	}
	return 0
}

func (x *PBBattleSchedule) GetStageRate() uint32 {
	if x != nil {
		return x.StageRate
	}
	return 0
}

func (x *PBBattleSchedule) GetUseTime() uint32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *PBBattleSchedule) GetRebirthCount() uint32 {
	if x != nil {
		return x.RebirthCount
	}
	return 0
}

func (x *PBBattleSchedule) GetClientData() *PBBattleClientData {
	if x != nil {
		return x.ClientData
	}
	return nil
}

func (x *PBBattleSchedule) GetMonsterInfo() []*BattleKillMonsterInfo {
	if x != nil {
		return x.MonsterInfo
	}
	return nil
}

// 战场客户端数据
type PBBattleClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroBattleLevel []*PBU32U32 `protobuf:"bytes,1,rep,name=HeroBattleLevel,proto3" json:"HeroBattleLevel,omitempty"`       // 战场内部英雄等级数据
	SelectCard      []uint32    `protobuf:"varint,2,rep,packed,name=SelectCard,proto3" json:"SelectCard,omitempty"`         // 战场内部选卡数据
	LeaderId        uint32      `protobuf:"varint,3,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`                    // 队长ID
	CryscalRobotId  []uint32    `protobuf:"varint,4,rep,packed,name=CryscalRobotId,proto3" json:"CryscalRobotId,omitempty"` // 使徒ID
	DropBoxCount    uint32      `protobuf:"varint,5,opt,name=DropBoxCount,proto3" json:"DropBoxCount,omitempty"`            // 空投次数
}

func (x *PBBattleClientData) Reset() {
	*x = PBBattleClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBattleClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBattleClientData) ProtoMessage() {}

func (x *PBBattleClientData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBattleClientData.ProtoReflect.Descriptor instead.
func (*PBBattleClientData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{21}
}

func (x *PBBattleClientData) GetHeroBattleLevel() []*PBU32U32 {
	if x != nil {
		return x.HeroBattleLevel
	}
	return nil
}

func (x *PBBattleClientData) GetSelectCard() []uint32 {
	if x != nil {
		return x.SelectCard
	}
	return nil
}

func (x *PBBattleClientData) GetLeaderId() uint32 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *PBBattleClientData) GetCryscalRobotId() []uint32 {
	if x != nil {
		return x.CryscalRobotId
	}
	return nil
}

func (x *PBBattleClientData) GetDropBoxCount() uint32 {
	if x != nil {
		return x.DropBoxCount
	}
	return 0
}

// 用户战场挂机信息
type PBBattleHookInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapInfo        *PBBattleMapInfo `protobuf:"bytes,1,opt,name=MapInfo,proto3" json:"MapInfo,omitempty"`                // 战场信息
	CurMapId       uint32           `protobuf:"varint,2,opt,name=CurMapId,proto3" json:"CurMapId,omitempty"`             // 当前地图ID
	CurStageId     uint32           `protobuf:"varint,3,opt,name=CurStageId,proto3" json:"CurStageId,omitempty"`         // 当前关卡ID
	AutoMap        bool             `protobuf:"varint,4,opt,name=AutoMap,proto3" json:"AutoMap,omitempty"`               // 是否自动推关
	BeginLootTime  uint64           `protobuf:"varint,5,opt,name=BeginLootTime,proto3" json:"BeginLootTime,omitempty"`   // 开始掉落时间
	TotalLootCount uint32           `protobuf:"varint,6,opt,name=TotalLootCount,proto3" json:"TotalLootCount,omitempty"` // 累计掉落件数
}

func (x *PBBattleHookInfo) Reset() {
	*x = PBBattleHookInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBattleHookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBattleHookInfo) ProtoMessage() {}

func (x *PBBattleHookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBattleHookInfo.ProtoReflect.Descriptor instead.
func (*PBBattleHookInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{22}
}

func (x *PBBattleHookInfo) GetMapInfo() *PBBattleMapInfo {
	if x != nil {
		return x.MapInfo
	}
	return nil
}

func (x *PBBattleHookInfo) GetCurMapId() uint32 {
	if x != nil {
		return x.CurMapId
	}
	return 0
}

func (x *PBBattleHookInfo) GetCurStageId() uint32 {
	if x != nil {
		return x.CurStageId
	}
	return 0
}

func (x *PBBattleHookInfo) GetAutoMap() bool {
	if x != nil {
		return x.AutoMap
	}
	return false
}

func (x *PBBattleHookInfo) GetBeginLootTime() uint64 {
	if x != nil {
		return x.BeginLootTime
	}
	return 0
}

func (x *PBBattleHookInfo) GetTotalLootCount() uint32 {
	if x != nil {
		return x.TotalLootCount
	}
	return 0
}

// 用户战场精英信息
type PBBattleNormalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapInfo      *PBBattleMapInfo `protobuf:"bytes,1,opt,name=MapInfo,proto3" json:"MapInfo,omitempty"`               // 战场信息
	PrizeMapId   uint32           `protobuf:"varint,2,opt,name=PrizeMapId,proto3" json:"PrizeMapId,omitempty"`        // 领取的地图ID
	PrizeStageId uint32           `protobuf:"varint,3,opt,name=PrizeStageId,proto3" json:"PrizeStageId,omitempty"`    // 领取的关卡ID
	PrizeStage   []uint32         `protobuf:"varint,4,rep,packed,name=PrizeStage,proto3" json:"PrizeStage,omitempty"` // 领取的奖励进度
}

func (x *PBBattleNormalInfo) Reset() {
	*x = PBBattleNormalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBattleNormalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBattleNormalInfo) ProtoMessage() {}

func (x *PBBattleNormalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBattleNormalInfo.ProtoReflect.Descriptor instead.
func (*PBBattleNormalInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{23}
}

func (x *PBBattleNormalInfo) GetMapInfo() *PBBattleMapInfo {
	if x != nil {
		return x.MapInfo
	}
	return nil
}

func (x *PBBattleNormalInfo) GetPrizeMapId() uint32 {
	if x != nil {
		return x.PrizeMapId
	}
	return 0
}

func (x *PBBattleNormalInfo) GetPrizeStageId() uint32 {
	if x != nil {
		return x.PrizeStageId
	}
	return 0
}

func (x *PBBattleNormalInfo) GetPrizeStage() []uint32 {
	if x != nil {
		return x.PrizeStage
	}
	return nil
}

// 用户战场复活
type PBBattleRelive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvestReliveCount uint32 `protobuf:"varint,1,opt,name=AdvestReliveCount,proto3" json:"AdvestReliveCount,omitempty"` // 广告复活次数
	ShareReliveCount  uint32 `protobuf:"varint,2,opt,name=ShareReliveCount,proto3" json:"ShareReliveCount,omitempty"`   // 分享复活次数
}

func (x *PBBattleRelive) Reset() {
	*x = PBBattleRelive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBattleRelive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBattleRelive) ProtoMessage() {}

func (x *PBBattleRelive) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBattleRelive.ProtoReflect.Descriptor instead.
func (*PBBattleRelive) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{24}
}

func (x *PBBattleRelive) GetAdvestReliveCount() uint32 {
	if x != nil {
		return x.AdvestReliveCount
	}
	return 0
}

func (x *PBBattleRelive) GetShareReliveCount() uint32 {
	if x != nil {
		return x.ShareReliveCount
	}
	return 0
}

// 用户战斗数据
type PBPlayerSystemBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleNormal  *PBBattleNormalInfo `protobuf:"bytes,1,opt,name=BattleNormal,proto3" json:"BattleNormal,omitempty"`   // 精英关卡数据
	BattleHook    *PBBattleHookInfo   `protobuf:"bytes,2,opt,name=BattleHook,proto3" json:"BattleHook,omitempty"`       // 挂机关卡数据
	Battlechedule *PBBattleSchedule   `protobuf:"bytes,3,opt,name=Battlechedule,proto3" json:"Battlechedule,omitempty"` // 战场进度
	Relive        *PBBattleRelive     `protobuf:"bytes,4,opt,name=Relive,proto3" json:"Relive,omitempty"`               // 复活次数
}

func (x *PBPlayerSystemBattle) Reset() {
	*x = PBPlayerSystemBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemBattle) ProtoMessage() {}

func (x *PBPlayerSystemBattle) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemBattle.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemBattle) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{25}
}

func (x *PBPlayerSystemBattle) GetBattleNormal() *PBBattleNormalInfo {
	if x != nil {
		return x.BattleNormal
	}
	return nil
}

func (x *PBPlayerSystemBattle) GetBattleHook() *PBBattleHookInfo {
	if x != nil {
		return x.BattleHook
	}
	return nil
}

func (x *PBPlayerSystemBattle) GetBattlechedule() *PBBattleSchedule {
	if x != nil {
		return x.Battlechedule
	}
	return nil
}

func (x *PBPlayerSystemBattle) GetRelive() *PBBattleRelive {
	if x != nil {
		return x.Relive
	}
	return nil
}

// *************************************************用户关卡数据结束***************************
// 用户宝箱
type PBBoxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemID    uint32 `protobuf:"varint,1,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	OpenTimes uint32 `protobuf:"varint,2,opt,name=OpenTimes,proto3" json:"OpenTimes,omitempty"` // 开宝箱次数
}

func (x *PBBoxInfo) Reset() {
	*x = PBBoxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBoxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBoxInfo) ProtoMessage() {}

func (x *PBBoxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBoxInfo.ProtoReflect.Descriptor instead.
func (*PBBoxInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{26}
}

func (x *PBBoxInfo) GetItemID() uint32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *PBBoxInfo) GetOpenTimes() uint32 {
	if x != nil {
		return x.OpenTimes
	}
	return 0
}

type PBPlayerSystemBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxScore     uint32       `protobuf:"varint,1,opt,name=BoxScore,proto3" json:"BoxScore,omitempty"`         // 宝箱积分
	CurrentLevel uint32       `protobuf:"varint,2,opt,name=CurrentLevel,proto3" json:"CurrentLevel,omitempty"` // 当前等级
	RecycleTimes uint32       `protobuf:"varint,3,opt,name=RecycleTimes,proto3" json:"RecycleTimes,omitempty"` //  宝箱积分循环次数
	Boxs         []*PBBoxInfo `protobuf:"bytes,4,rep,name=Boxs,proto3" json:"Boxs,omitempty"`                  //  当前未开宝箱类型
}

func (x *PBPlayerSystemBox) Reset() {
	*x = PBPlayerSystemBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemBox) ProtoMessage() {}

func (x *PBPlayerSystemBox) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemBox.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemBox) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{27}
}

func (x *PBPlayerSystemBox) GetBoxScore() uint32 {
	if x != nil {
		return x.BoxScore
	}
	return 0
}

func (x *PBPlayerSystemBox) GetCurrentLevel() uint32 {
	if x != nil {
		return x.CurrentLevel
	}
	return 0
}

func (x *PBPlayerSystemBox) GetRecycleTimes() uint32 {
	if x != nil {
		return x.RecycleTimes
	}
	return 0
}

func (x *PBPlayerSystemBox) GetBoxs() []*PBBoxInfo {
	if x != nil {
		return x.Boxs
	}
	return nil
}

// *************************************************商店数据开始***************************
// 商品信息
type PBShopGoodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsID   uint32       `protobuf:"varint,1,opt,name=GoodsID,proto3" json:"GoodsID,omitempty"`     // 商品ID
	Discount  uint32       `protobuf:"varint,2,opt,name=Discount,proto3" json:"Discount,omitempty"`   // 折扣率
	BuyTimes  uint32       `protobuf:"varint,3,opt,name=BuyTimes,proto3" json:"BuyTimes,omitempty"`   // 购买次数
	FreeTimes uint32       `protobuf:"varint,4,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"` // 可获得的免费次数
	Equipment *PBEquipment `protobuf:"bytes,5,opt,name=Equipment,proto3" json:"Equipment,omitempty"`  // 装备信息
}

func (x *PBShopGoodInfo) Reset() {
	*x = PBShopGoodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBShopGoodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBShopGoodInfo) ProtoMessage() {}

func (x *PBShopGoodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBShopGoodInfo.ProtoReflect.Descriptor instead.
func (*PBShopGoodInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{28}
}

func (x *PBShopGoodInfo) GetGoodsID() uint32 {
	if x != nil {
		return x.GoodsID
	}
	return 0
}

func (x *PBShopGoodInfo) GetDiscount() uint32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *PBShopGoodInfo) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *PBShopGoodInfo) GetFreeTimes() uint32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *PBShopGoodInfo) GetEquipment() *PBEquipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

type PBShopRefreshInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyBuyCount       uint32 `protobuf:"varint,1,opt,name=DailyBuyCount,proto3" json:"DailyBuyCount,omitempty"`             // 每日购买次数
	DailyFreeUseCount   uint32 `protobuf:"varint,2,opt,name=DailyFreeUseCount,proto3" json:"DailyFreeUseCount,omitempty"`     // 每日免费刷新使用次数
	NextFreeRefreshTime uint64 `protobuf:"varint,3,opt,name=NextFreeRefreshTime,proto3" json:"NextFreeRefreshTime,omitempty"` // 免费刷新时间 0表示下次刷新
	DailyFreeMaxCount   uint32 `protobuf:"varint,4,opt,name=DailyFreeMaxCount,proto3" json:"DailyFreeMaxCount,omitempty"`     // 每日免费最大次数
}

func (x *PBShopRefreshInfo) Reset() {
	*x = PBShopRefreshInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBShopRefreshInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBShopRefreshInfo) ProtoMessage() {}

func (x *PBShopRefreshInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBShopRefreshInfo.ProtoReflect.Descriptor instead.
func (*PBShopRefreshInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{29}
}

func (x *PBShopRefreshInfo) GetDailyBuyCount() uint32 {
	if x != nil {
		return x.DailyBuyCount
	}
	return 0
}

func (x *PBShopRefreshInfo) GetDailyFreeUseCount() uint32 {
	if x != nil {
		return x.DailyFreeUseCount
	}
	return 0
}

func (x *PBShopRefreshInfo) GetNextFreeRefreshTime() uint64 {
	if x != nil {
		return x.NextFreeRefreshTime
	}
	return 0
}

func (x *PBShopRefreshInfo) GetDailyFreeMaxCount() uint32 {
	if x != nil {
		return x.DailyFreeMaxCount
	}
	return 0
}

type PBBlackShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRefreshTime uint64             `protobuf:"varint,1,opt,name=NextRefreshTime,proto3" json:"NextRefreshTime,omitempty"` // 下一次刷新时间点
	Items           []*PBShopGoodInfo  `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`                      // 橱窗列表(刷新生成)
	RefreshInfo     *PBShopRefreshInfo `protobuf:"bytes,3,opt,name=RefreshInfo,proto3" json:"RefreshInfo,omitempty"`          // 刷新数据
}

func (x *PBBlackShop) Reset() {
	*x = PBBlackShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBlackShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBlackShop) ProtoMessage() {}

func (x *PBBlackShop) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBlackShop.ProtoReflect.Descriptor instead.
func (*PBBlackShop) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{30}
}

func (x *PBBlackShop) GetNextRefreshTime() uint64 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

func (x *PBBlackShop) GetItems() []*PBShopGoodInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PBBlackShop) GetRefreshInfo() *PBShopRefreshInfo {
	if x != nil {
		return x.RefreshInfo
	}
	return nil
}

// 商品配置数据
type PBShopGoodCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsID     uint32           `protobuf:"varint,1,opt,name=GoodsID,proto3" json:"GoodsID,omitempty"`        // 商品ID
	BuyTimes    uint32           `protobuf:"varint,2,opt,name=BuyTimes,proto3" json:"BuyTimes,omitempty"`      // 购买次数  钻石商店大于0不展示首充双倍
	MaxTimes    uint32           `protobuf:"varint,3,opt,name=MaxTimes,proto3" json:"MaxTimes,omitempty"`      // 最大购买次数
	Discount    uint32           `protobuf:"varint,4,opt,name=Discount,proto3" json:"Discount,omitempty"`      // 折扣率
	NeedItem    *PBAddItem       `protobuf:"bytes,5,opt,name=NeedItem,proto3" json:"NeedItem,omitempty"`       // 需要道具
	AddItem     []*PBAddItemData `protobuf:"bytes,6,rep,name=AddItem,proto3" json:"AddItem,omitempty"`         // 商品道具
	ProductId   uint32           `protobuf:"varint,7,opt,name=ProductId,proto3" json:"ProductId,omitempty"`    // 充值商品ID
	ProductName string           `protobuf:"bytes,8,opt,name=ProductName,proto3" json:"ProductName,omitempty"` // 商品名称
	Price       uint32           `protobuf:"varint,9,opt,name=Price,proto3" json:"Price,omitempty"`            // 人民币价格分
	ValueTips   string           `protobuf:"bytes,10,opt,name=ValueTips,proto3" json:"ValueTips,omitempty"`    // 价值Tips
	SortTag     uint32           `protobuf:"varint,11,opt,name=SortTag,proto3" json:"SortTag,omitempty"`       // 排序优先级(从大到小)
}

func (x *PBShopGoodCfg) Reset() {
	*x = PBShopGoodCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBShopGoodCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBShopGoodCfg) ProtoMessage() {}

func (x *PBShopGoodCfg) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBShopGoodCfg.ProtoReflect.Descriptor instead.
func (*PBShopGoodCfg) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{31}
}

func (x *PBShopGoodCfg) GetGoodsID() uint32 {
	if x != nil {
		return x.GoodsID
	}
	return 0
}

func (x *PBShopGoodCfg) GetBuyTimes() uint32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *PBShopGoodCfg) GetMaxTimes() uint32 {
	if x != nil {
		return x.MaxTimes
	}
	return 0
}

func (x *PBShopGoodCfg) GetDiscount() uint32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *PBShopGoodCfg) GetNeedItem() *PBAddItem {
	if x != nil {
		return x.NeedItem
	}
	return nil
}

func (x *PBShopGoodCfg) GetAddItem() []*PBAddItemData {
	if x != nil {
		return x.AddItem
	}
	return nil
}

func (x *PBShopGoodCfg) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PBShopGoodCfg) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *PBShopGoodCfg) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PBShopGoodCfg) GetValueTips() string {
	if x != nil {
		return x.ValueTips
	}
	return ""
}

func (x *PBShopGoodCfg) GetSortTag() uint32 {
	if x != nil {
		return x.SortTag
	}
	return 0
}

// 商店信息
type PBShopInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopType        uint32      `protobuf:"varint,1,opt,name=ShopType,proto3" json:"ShopType,omitempty"`               // 商店类型
	NextRefreshTime uint64      `protobuf:"varint,2,opt,name=NextRefreshTime,proto3" json:"NextRefreshTime,omitempty"` // 下一次刷新时间点
	Items           []*PBU32U32 `protobuf:"bytes,3,rep,name=Items,proto3" json:"Items,omitempty"`                      // 商品购买数据
}

func (x *PBShopInfo) Reset() {
	*x = PBShopInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBShopInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBShopInfo) ProtoMessage() {}

func (x *PBShopInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBShopInfo.ProtoReflect.Descriptor instead.
func (*PBShopInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{32}
}

func (x *PBShopInfo) GetShopType() uint32 {
	if x != nil {
		return x.ShopType
	}
	return 0
}

func (x *PBShopInfo) GetNextRefreshTime() uint64 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

func (x *PBShopInfo) GetItems() []*PBU32U32 {
	if x != nil {
		return x.Items
	}
	return nil
}

// 商店
type PBPlayerSystemShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlackShop *PBBlackShop  `protobuf:"bytes,1,opt,name=BlackShop,proto3" json:"BlackShop,omitempty"` // 黑市商店
	ShopList  []*PBShopInfo `protobuf:"bytes,2,rep,name=ShopList,proto3" json:"ShopList,omitempty"`   // 商店列表
}

func (x *PBPlayerSystemShop) Reset() {
	*x = PBPlayerSystemShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemShop) ProtoMessage() {}

func (x *PBPlayerSystemShop) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemShop.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemShop) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{33}
}

func (x *PBPlayerSystemShop) GetBlackShop() *PBBlackShop {
	if x != nil {
		return x.BlackShop
	}
	return nil
}

func (x *PBPlayerSystemShop) GetShopList() []*PBShopInfo {
	if x != nil {
		return x.ShopList
	}
	return nil
}

// *************************************************商店数据结束***************************
// 抽奖信息
type PBDrawPrizeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string       `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`         // 名称
	Rate     uint32       `protobuf:"varint,2,opt,name=Rate,proto3" json:"Rate,omitempty"`        // 概率万分比
	ItemList []*PBAddItem `protobuf:"bytes,3,rep,name=ItemList,proto3" json:"ItemList,omitempty"` // 道具列表
}

func (x *PBDrawPrizeInfo) Reset() {
	*x = PBDrawPrizeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBDrawPrizeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDrawPrizeInfo) ProtoMessage() {}

func (x *PBDrawPrizeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDrawPrizeInfo.ProtoReflect.Descriptor instead.
func (*PBDrawPrizeInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{34}
}

func (x *PBDrawPrizeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PBDrawPrizeInfo) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *PBDrawPrizeInfo) GetItemList() []*PBAddItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

// 抽奖信息
type PBDrawInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId         uint32   `protobuf:"varint,1,opt,name=DrawId,proto3" json:"DrawId,omitempty"`                 // 抽奖次数
	DrawCount      uint32   `protobuf:"varint,2,opt,name=DrawCount,proto3" json:"DrawCount,omitempty"`           // 抽奖次数
	GuarCount      uint32   `protobuf:"varint,3,opt,name=GuarCount,proto3" json:"GuarCount,omitempty"`           // 保底次数
	Guar2Count     uint32   `protobuf:"varint,4,opt,name=Guar2Count,proto3" json:"Guar2Count,omitempty"`         // 保底2次数
	AdvertNextTime uint64   `protobuf:"varint,5,opt,name=AdvertNextTime,proto3" json:"AdvertNextTime,omitempty"` // 下次广告购买时间
	BeginTime      uint64   `protobuf:"varint,6,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`           // 开启时间戳
	EndTime        uint64   `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`               // 结束时间戳
	Guar3Count     uint32   `protobuf:"varint,8,opt,name=Guar3Count,proto3" json:"Guar3Count,omitempty"`         // 保底3次数
	ScorePrize     []uint32 `protobuf:"varint,9,rep,packed,name=ScorePrize,proto3" json:"ScorePrize,omitempty"`  // 积分奖励进度
}

func (x *PBDrawInfo) Reset() {
	*x = PBDrawInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBDrawInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDrawInfo) ProtoMessage() {}

func (x *PBDrawInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDrawInfo.ProtoReflect.Descriptor instead.
func (*PBDrawInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{35}
}

func (x *PBDrawInfo) GetDrawId() uint32 {
	if x != nil {
		return x.DrawId
	}
	return 0
}

func (x *PBDrawInfo) GetDrawCount() uint32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

func (x *PBDrawInfo) GetGuarCount() uint32 {
	if x != nil {
		return x.GuarCount
	}
	return 0
}

func (x *PBDrawInfo) GetGuar2Count() uint32 {
	if x != nil {
		return x.Guar2Count
	}
	return 0
}

func (x *PBDrawInfo) GetAdvertNextTime() uint64 {
	if x != nil {
		return x.AdvertNextTime
	}
	return 0
}

func (x *PBDrawInfo) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBDrawInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBDrawInfo) GetGuar3Count() uint32 {
	if x != nil {
		return x.Guar3Count
	}
	return 0
}

func (x *PBDrawInfo) GetScorePrize() []uint32 {
	if x != nil {
		return x.ScorePrize
	}
	return nil
}

// 抽奖数据
type PBPlayerSystemDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawList []*PBDrawInfo `protobuf:"bytes,1,rep,name=DrawList,proto3" json:"DrawList,omitempty"` // 抽奖信息
}

func (x *PBPlayerSystemDraw) Reset() {
	*x = PBPlayerSystemDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemDraw) ProtoMessage() {}

func (x *PBPlayerSystemDraw) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemDraw.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemDraw) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{36}
}

func (x *PBPlayerSystemDraw) GetDrawList() []*PBDrawInfo {
	if x != nil {
		return x.DrawList
	}
	return nil
}

// 首冲活动
type PBFirstCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstChargeId uint32 `protobuf:"varint,1,opt,name=FirstChargeId,proto3" json:"FirstChargeId,omitempty"` // 首冲类型
	ActiveTime    uint64 `protobuf:"varint,2,opt,name=ActiveTime,proto3" json:"ActiveTime,omitempty"`       // 激活时间
	PrizeDay      uint32 `protobuf:"varint,3,opt,name=PrizeDay,proto3" json:"PrizeDay,omitempty"`           // 领取的最新奖励天数
}

func (x *PBFirstCharge) Reset() {
	*x = PBFirstCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBFirstCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBFirstCharge) ProtoMessage() {}

func (x *PBFirstCharge) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBFirstCharge.ProtoReflect.Descriptor instead.
func (*PBFirstCharge) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{37}
}

func (x *PBFirstCharge) GetFirstChargeId() uint32 {
	if x != nil {
		return x.FirstChargeId
	}
	return 0
}

func (x *PBFirstCharge) GetActiveTime() uint64 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

func (x *PBFirstCharge) GetPrizeDay() uint32 {
	if x != nil {
		return x.PrizeDay
	}
	return 0
}

// 充值数据活动
type PBCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId     uint32 `protobuf:"varint,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`         // 流水ID
	TotalCharge uint32 `protobuf:"varint,2,opt,name=TotalCharge,proto3" json:"TotalCharge,omitempty"` // 累计充值
	DailyCharge uint32 `protobuf:"varint,3,opt,name=DailyCharge,proto3" json:"DailyCharge,omitempty"` // 每日充值数据
	WeekCharge  uint32 `protobuf:"varint,4,opt,name=WeekCharge,proto3" json:"WeekCharge,omitempty"`   // 每周充值数据
	MonthCharge uint32 `protobuf:"varint,5,opt,name=MonthCharge,proto3" json:"MonthCharge,omitempty"` // 每月充值数据
}

func (x *PBCharge) Reset() {
	*x = PBCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBCharge) ProtoMessage() {}

func (x *PBCharge) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBCharge.ProtoReflect.Descriptor instead.
func (*PBCharge) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{38}
}

func (x *PBCharge) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *PBCharge) GetTotalCharge() uint32 {
	if x != nil {
		return x.TotalCharge
	}
	return 0
}

func (x *PBCharge) GetDailyCharge() uint32 {
	if x != nil {
		return x.DailyCharge
	}
	return 0
}

func (x *PBCharge) GetWeekCharge() uint32 {
	if x != nil {
		return x.WeekCharge
	}
	return 0
}

func (x *PBCharge) GetMonthCharge() uint32 {
	if x != nil {
		return x.MonthCharge
	}
	return 0
}

// BP期数数据
type PBBPStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId       uint32 `protobuf:"varint,1,opt,name=StageId,proto3" json:"StageId,omitempty"`             // 期数
	BeginTime     uint64 `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`         // 结束时间
	EndTime       uint64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`             // 结束时间
	NoramlPrizeId uint32 `protobuf:"varint,4,opt,name=NoramlPrizeId,proto3" json:"NoramlPrizeId,omitempty"` // 普通领奖ID
	ExtralPrizeId uint32 `protobuf:"varint,5,opt,name=ExtralPrizeId,proto3" json:"ExtralPrizeId,omitempty"` // 额外领奖ID
	ChargeTime    uint64 `protobuf:"varint,6,opt,name=ChargeTime,proto3" json:"ChargeTime,omitempty"`       // 充值时间
}

func (x *PBBPStageInfo) Reset() {
	*x = PBBPStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBPStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBPStageInfo) ProtoMessage() {}

func (x *PBBPStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBPStageInfo.ProtoReflect.Descriptor instead.
func (*PBBPStageInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{39}
}

func (x *PBBPStageInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *PBBPStageInfo) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBBPStageInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBBPStageInfo) GetNoramlPrizeId() uint32 {
	if x != nil {
		return x.NoramlPrizeId
	}
	return 0
}

func (x *PBBPStageInfo) GetExtralPrizeId() uint32 {
	if x != nil {
		return x.ExtralPrizeId
	}
	return 0
}

func (x *PBBPStageInfo) GetChargeTime() uint64 {
	if x != nil {
		return x.ChargeTime
	}
	return 0
}

// BP
type PBBPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BPType    uint32           `protobuf:"varint,1,opt,name=BPType,proto3" json:"BPType,omitempty"`      // BP类型
	Value     uint32           `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`        // 当前值
	StageList []*PBBPStageInfo `protobuf:"bytes,3,rep,name=StageList,proto3" json:"StageList,omitempty"` // 期数数据
	MaxStage  uint32           `protobuf:"varint,4,opt,name=MaxStage,proto3" json:"MaxStage,omitempty"`  // 历史最大期
}

func (x *PBBPInfo) Reset() {
	*x = PBBPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBBPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBBPInfo) ProtoMessage() {}

func (x *PBBPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBBPInfo.ProtoReflect.Descriptor instead.
func (*PBBPInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{40}
}

func (x *PBBPInfo) GetBPType() uint32 {
	if x != nil {
		return x.BPType
	}
	return 0
}

func (x *PBBPInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PBBPInfo) GetStageList() []*PBBPStageInfo {
	if x != nil {
		return x.StageList
	}
	return nil
}

func (x *PBBPInfo) GetMaxStage() uint32 {
	if x != nil {
		return x.MaxStage
	}
	return 0
}

// 充值卡数据
type PBChargeCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType  uint32 `protobuf:"varint,1,opt,name=CardType,proto3" json:"CardType,omitempty"`   // 月卡类型
	BeginTime uint64 `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"` // 开始时间
	EndTime   uint64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 结束时间
	PrizeTime uint64 `protobuf:"varint,4,opt,name=PrizeTime,proto3" json:"PrizeTime,omitempty"` // 上次领奖时间
}

func (x *PBChargeCard) Reset() {
	*x = PBChargeCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBChargeCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBChargeCard) ProtoMessage() {}

func (x *PBChargeCard) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBChargeCard.ProtoReflect.Descriptor instead.
func (*PBChargeCard) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{41}
}

func (x *PBChargeCard) GetCardType() uint32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *PBChargeCard) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBChargeCard) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBChargeCard) GetPrizeTime() uint64 {
	if x != nil {
		return x.PrizeTime
	}
	return 0
}

// 充值数据
type PBPlayerSystemCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charge          *PBCharge        `protobuf:"bytes,1,opt,name=Charge,proto3" json:"Charge,omitempty"`                   // 充值数据
	FirstChargeList []*PBFirstCharge `protobuf:"bytes,2,rep,name=FirstChargeList,proto3" json:"FirstChargeList,omitempty"` // 首冲数据
	BPList          []*PBBPInfo      `protobuf:"bytes,3,rep,name=BPList,proto3" json:"BPList,omitempty"`                   // bp
	CardList        []*PBChargeCard  `protobuf:"bytes,4,rep,name=CardList,proto3" json:"CardList,omitempty"`               // 充值卡
}

func (x *PBPlayerSystemCharge) Reset() {
	*x = PBPlayerSystemCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemCharge) ProtoMessage() {}

func (x *PBPlayerSystemCharge) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemCharge.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemCharge) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{42}
}

func (x *PBPlayerSystemCharge) GetCharge() *PBCharge {
	if x != nil {
		return x.Charge
	}
	return nil
}

func (x *PBPlayerSystemCharge) GetFirstChargeList() []*PBFirstCharge {
	if x != nil {
		return x.FirstChargeList
	}
	return nil
}

func (x *PBPlayerSystemCharge) GetBPList() []*PBBPInfo {
	if x != nil {
		return x.BPList
	}
	return nil
}

func (x *PBPlayerSystemCharge) GetCardList() []*PBChargeCard {
	if x != nil {
		return x.CardList
	}
	return nil
}

// 冰川充值订单
type PBChargeBingchuanOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderItem        string `protobuf:"bytes,1,opt,name=OrderItem,proto3" json:"OrderItem,omitempty"`               // 订单明细
	OrderNo          string `protobuf:"bytes,2,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`                   // 游戏订单号
	PayNum           string `protobuf:"bytes,3,opt,name=payNum,proto3" json:"payNum,omitempty"`                     // 订单明细
	UserId           string `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`                     // 冰川用户ID
	OrderSign        string `protobuf:"bytes,5,opt,name=orderSign,proto3" json:"orderSign,omitempty"`               // 签名
	ActorId          string `protobuf:"bytes,6,opt,name=actorId,proto3" json:"actorId,omitempty"`                   // 角色ID
	CurrencyType     string `protobuf:"bytes,7,opt,name=currencyType,proto3" json:"currencyType,omitempty"`         // 货币类型
	DeveloperPayload string `protobuf:"bytes,8,opt,name=developerPayload,proto3" json:"developerPayload,omitempty"` // 透传参数
}

func (x *PBChargeBingchuanOrder) Reset() {
	*x = PBChargeBingchuanOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBChargeBingchuanOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBChargeBingchuanOrder) ProtoMessage() {}

func (x *PBChargeBingchuanOrder) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBChargeBingchuanOrder.ProtoReflect.Descriptor instead.
func (*PBChargeBingchuanOrder) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{43}
}

func (x *PBChargeBingchuanOrder) GetOrderItem() string {
	if x != nil {
		return x.OrderItem
	}
	return ""
}

func (x *PBChargeBingchuanOrder) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PBChargeBingchuanOrder) GetPayNum() string {
	if x != nil {
		return x.PayNum
	}
	return ""
}

func (x *PBChargeBingchuanOrder) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PBChargeBingchuanOrder) GetOrderSign() string {
	if x != nil {
		return x.OrderSign
	}
	return ""
}

func (x *PBChargeBingchuanOrder) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *PBChargeBingchuanOrder) GetCurrencyType() string {
	if x != nil {
		return x.CurrencyType
	}
	return ""
}

func (x *PBChargeBingchuanOrder) GetDeveloperPayload() string {
	if x != nil {
		return x.DeveloperPayload
	}
	return ""
}

// *************************************************挂机科技系统开始***************************
// 挂机科技数据
type PBHookTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // Id
	Level     uint32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`         // 等级
	LevelTime uint64 `protobuf:"varint,3,opt,name=LevelTime,proto3" json:"LevelTime,omitempty"` // 结束升级时间
}

func (x *PBHookTech) Reset() {
	*x = PBHookTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBHookTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBHookTech) ProtoMessage() {}

func (x *PBHookTech) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBHookTech.ProtoReflect.Descriptor instead.
func (*PBHookTech) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{44}
}

func (x *PBHookTech) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBHookTech) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PBHookTech) GetLevelTime() uint64 {
	if x != nil {
		return x.LevelTime
	}
	return 0
}

type PBPlayerSystemHookTech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HookTechList []*PBHookTech `protobuf:"bytes,1,rep,name=HookTechList,proto3" json:"HookTechList,omitempty"` // 挂机科技列表
}

func (x *PBPlayerSystemHookTech) Reset() {
	*x = PBPlayerSystemHookTech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemHookTech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemHookTech) ProtoMessage() {}

func (x *PBPlayerSystemHookTech) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemHookTech.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemHookTech) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{45}
}

func (x *PBPlayerSystemHookTech) GetHookTechList() []*PBHookTech {
	if x != nil {
		return x.HookTechList
	}
	return nil
}

// *************************************************七天活动开始***************************
// 任务进度信息
type PBTaskStageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                               // 任务ID
	Value    uint32      `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`                         // 进度值
	MaxValue uint32      `protobuf:"varint,3,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`                   // 最大值
	State    EmTaskState `protobuf:"varint,4,opt,name=State,proto3,enum=common.EmTaskState" json:"State,omitempty"` // 领取状态 0未达到 1完成 2已经领取
}

func (x *PBTaskStageInfo) Reset() {
	*x = PBTaskStageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBTaskStageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBTaskStageInfo) ProtoMessage() {}

func (x *PBTaskStageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBTaskStageInfo.ProtoReflect.Descriptor instead.
func (*PBTaskStageInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{46}
}

func (x *PBTaskStageInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBTaskStageInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PBTaskStageInfo) GetMaxValue() uint32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *PBTaskStageInfo) GetState() EmTaskState {
	if x != nil {
		return x.State
	}
	return EmTaskState_ETS_Ing
}

// 七天活动信息
type PBSevenDayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                 // 活动ID
	BeginTime  uint64             `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`   // 活动开始时间
	EndTime    uint64             `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`       // 活动结束时间
	Value      uint32             `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`           // 活跃值
	PrizeValue uint32             `protobuf:"varint,5,opt,name=PrizeValue,proto3" json:"PrizeValue,omitempty"` // 领取的活跃值
	TaskList   []*PBTaskStageInfo `protobuf:"bytes,6,rep,name=TaskList,proto3" json:"TaskList,omitempty"`      // 任务进度列表
	GiftList   []*PBU32U32        `protobuf:"bytes,7,rep,name=GiftList,proto3" json:"GiftList,omitempty"`      // 礼包列表 礼包ID|数量
}

func (x *PBSevenDayInfo) Reset() {
	*x = PBSevenDayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBSevenDayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBSevenDayInfo) ProtoMessage() {}

func (x *PBSevenDayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBSevenDayInfo.ProtoReflect.Descriptor instead.
func (*PBSevenDayInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{47}
}

func (x *PBSevenDayInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBSevenDayInfo) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBSevenDayInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBSevenDayInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PBSevenDayInfo) GetPrizeValue() uint32 {
	if x != nil {
		return x.PrizeValue
	}
	return 0
}

func (x *PBSevenDayInfo) GetTaskList() []*PBTaskStageInfo {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *PBSevenDayInfo) GetGiftList() []*PBU32U32 {
	if x != nil {
		return x.GiftList
	}
	return nil
}

type PBPlayerSystemSevenDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SevenDayList []*PBSevenDayInfo `protobuf:"bytes,1,rep,name=SevenDayList,proto3" json:"SevenDayList,omitempty"` // 活动列表
}

func (x *PBPlayerSystemSevenDay) Reset() {
	*x = PBPlayerSystemSevenDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemSevenDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemSevenDay) ProtoMessage() {}

func (x *PBPlayerSystemSevenDay) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemSevenDay.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemSevenDay) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{48}
}

func (x *PBPlayerSystemSevenDay) GetSevenDayList() []*PBSevenDayInfo {
	if x != nil {
		return x.SevenDayList
	}
	return nil
}

// 锦标赛活动
type PBPlayerSystemChampionship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelHasReward  uint32           `protobuf:"varint,1,opt,name=LevelHasReward,proto3" json:"LevelHasReward,omitempty"`   //  0表示没加入,1表示加入,2表示领完奖
	BattleHasReward uint32           `protobuf:"varint,2,opt,name=BattleHasReward,proto3" json:"BattleHasReward,omitempty"` // 是否已经领奖
	DamageHasReward uint32           `protobuf:"varint,3,opt,name=DamageHasReward,proto3" json:"DamageHasReward,omitempty"` // 是否已经领奖
	PowerHasReward  uint32           `protobuf:"varint,4,opt,name=PowerHasReward,proto3" json:"PowerHasReward,omitempty"`   // 是否已经领奖
	Level           *PBTaskStageInfo `protobuf:"bytes,5,opt,name=Level,proto3" json:"Level,omitempty"`                      // 等级排行榜任务
	Battle          *PBTaskStageInfo `protobuf:"bytes,6,opt,name=Battle,proto3" json:"Battle,omitempty"`                    // 关卡排行榜任务
	Damage          *PBTaskStageInfo `protobuf:"bytes,7,opt,name=Damage,proto3" json:"Damage,omitempty"`                    // 试炼排行榜任务
	Power           *PBTaskStageInfo `protobuf:"bytes,8,opt,name=Power,proto3" json:"Power,omitempty"`                      // 战力排行榜任务
}

func (x *PBPlayerSystemChampionship) Reset() {
	*x = PBPlayerSystemChampionship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemChampionship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemChampionship) ProtoMessage() {}

func (x *PBPlayerSystemChampionship) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemChampionship.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemChampionship) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{49}
}

func (x *PBPlayerSystemChampionship) GetLevelHasReward() uint32 {
	if x != nil {
		return x.LevelHasReward
	}
	return 0
}

func (x *PBPlayerSystemChampionship) GetBattleHasReward() uint32 {
	if x != nil {
		return x.BattleHasReward
	}
	return 0
}

func (x *PBPlayerSystemChampionship) GetDamageHasReward() uint32 {
	if x != nil {
		return x.DamageHasReward
	}
	return 0
}

func (x *PBPlayerSystemChampionship) GetPowerHasReward() uint32 {
	if x != nil {
		return x.PowerHasReward
	}
	return 0
}

func (x *PBPlayerSystemChampionship) GetLevel() *PBTaskStageInfo {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *PBPlayerSystemChampionship) GetBattle() *PBTaskStageInfo {
	if x != nil {
		return x.Battle
	}
	return nil
}

func (x *PBPlayerSystemChampionship) GetDamage() *PBTaskStageInfo {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *PBPlayerSystemChampionship) GetPower() *PBTaskStageInfo {
	if x != nil {
		return x.Power
	}
	return nil
}

// 用户世界boss
type PBPlayerSystemWorldBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId            uint32 `protobuf:"varint,1,opt,name=BossId,proto3" json:"BossId,omitempty"`                       // bossid
	DailyPrizeStageId uint32 `protobuf:"varint,2,opt,name=DailyPrizeStageId,proto3" json:"DailyPrizeStageId,omitempty"` // 领取的进度ID
	DailyMaxDamage    uint64 `protobuf:"varint,3,opt,name=DailyMaxDamage,proto3" json:"DailyMaxDamage,omitempty"`       // 最大伤害值
	DailyTotalDamage  uint64 `protobuf:"varint,4,opt,name=DailyTotalDamage,proto3" json:"DailyTotalDamage,omitempty"`   // 每日累计伤害值
	DailyBuyCount     uint32 `protobuf:"varint,5,opt,name=DailyBuyCount,proto3" json:"DailyBuyCount,omitempty"`         // 购买次数
	DailyEnterCount   uint32 `protobuf:"varint,6,opt,name=DailyEnterCount,proto3" json:"DailyEnterCount,omitempty"`     // 进入次数
	DailyPrizeCount   uint32 `protobuf:"varint,7,opt,name=DailyPrizeCount,proto3" json:"DailyPrizeCount,omitempty"`     // 结算次数
	MaxDamage         uint64 `protobuf:"varint,8,opt,name=MaxDamage,proto3" json:"MaxDamage,omitempty"`                 // 历史最大伤害值
}

func (x *PBPlayerSystemWorldBoss) Reset() {
	*x = PBPlayerSystemWorldBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemWorldBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemWorldBoss) ProtoMessage() {}

func (x *PBPlayerSystemWorldBoss) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemWorldBoss.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemWorldBoss) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{50}
}

func (x *PBPlayerSystemWorldBoss) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

func (x *PBPlayerSystemWorldBoss) GetDailyPrizeStageId() uint32 {
	if x != nil {
		return x.DailyPrizeStageId
	}
	return 0
}

func (x *PBPlayerSystemWorldBoss) GetDailyMaxDamage() uint64 {
	if x != nil {
		return x.DailyMaxDamage
	}
	return 0
}

func (x *PBPlayerSystemWorldBoss) GetDailyTotalDamage() uint64 {
	if x != nil {
		return x.DailyTotalDamage
	}
	return 0
}

func (x *PBPlayerSystemWorldBoss) GetDailyBuyCount() uint32 {
	if x != nil {
		return x.DailyBuyCount
	}
	return 0
}

func (x *PBPlayerSystemWorldBoss) GetDailyEnterCount() uint32 {
	if x != nil {
		return x.DailyEnterCount
	}
	return 0
}

func (x *PBPlayerSystemWorldBoss) GetDailyPrizeCount() uint32 {
	if x != nil {
		return x.DailyPrizeCount
	}
	return 0
}

func (x *PBPlayerSystemWorldBoss) GetMaxDamage() uint64 {
	if x != nil {
		return x.MaxDamage
	}
	return 0
}

// *************************************************活动开始***************************
// 活动信息
type PBPlayerActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId uint32 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"` // 活动ID
	BeginTime  uint64 `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`   // 开始时间
	EndTime    uint64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`       // 结束时间
}

func (x *PBPlayerActivityInfo) Reset() {
	*x = PBPlayerActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerActivityInfo) ProtoMessage() {}

func (x *PBPlayerActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerActivityInfo.ProtoReflect.Descriptor instead.
func (*PBPlayerActivityInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{51}
}

func (x *PBPlayerActivityInfo) GetActivityId() uint32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *PBPlayerActivityInfo) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBPlayerActivityInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 活动成长任务
type PBActivityGrowRoadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 活动ID
	BeginTime uint64             `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"` // 开始时间
	EndTime   uint64             `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 结束时间
	TaskList  []*PBTaskStageInfo `protobuf:"bytes,4,rep,name=TaskList,proto3" json:"TaskList,omitempty"`    // 任务列表
}

func (x *PBActivityGrowRoadInfo) Reset() {
	*x = PBActivityGrowRoadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBActivityGrowRoadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBActivityGrowRoadInfo) ProtoMessage() {}

func (x *PBActivityGrowRoadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBActivityGrowRoadInfo.ProtoReflect.Descriptor instead.
func (*PBActivityGrowRoadInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{52}
}

func (x *PBActivityGrowRoadInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBActivityGrowRoadInfo) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBActivityGrowRoadInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBActivityGrowRoadInfo) GetTaskList() []*PBTaskStageInfo {
	if x != nil {
		return x.TaskList
	}
	return nil
}

// 直购礼包
type PBActivityChargeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 活动ID
	BeginTime uint64      `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"` // 开始时间
	EndTime   uint64      `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 结束时间
	BuyList   []*PBU32U32 `protobuf:"bytes,4,rep,name=BuyList,proto3" json:"BuyList,omitempty"`      // 已列表 礼包ID|数量
}

func (x *PBActivityChargeGift) Reset() {
	*x = PBActivityChargeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBActivityChargeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBActivityChargeGift) ProtoMessage() {}

func (x *PBActivityChargeGift) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBActivityChargeGift.ProtoReflect.Descriptor instead.
func (*PBActivityChargeGift) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{53}
}

func (x *PBActivityChargeGift) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBActivityChargeGift) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBActivityChargeGift) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBActivityChargeGift) GetBuyList() []*PBU32U32 {
	if x != nil {
		return x.BuyList
	}
	return nil
}

// 冒险奖励
type PBActivityAdventure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                          // 活动ID
	BeginTime    uint64   `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`            // 开始时间
	EndTime      uint64   `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                // 结束时间
	RegisterTime uint64   `protobuf:"varint,4,opt,name=RegisterTime,proto3" json:"RegisterTime,omitempty"`      // 注册时间
	PrizeIdList  []uint32 `protobuf:"varint,5,rep,packed,name=PrizeIdList,proto3" json:"PrizeIdList,omitempty"` // 领取的奖励配置ID
}

func (x *PBActivityAdventure) Reset() {
	*x = PBActivityAdventure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBActivityAdventure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBActivityAdventure) ProtoMessage() {}

func (x *PBActivityAdventure) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBActivityAdventure.ProtoReflect.Descriptor instead.
func (*PBActivityAdventure) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{54}
}

func (x *PBActivityAdventure) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBActivityAdventure) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBActivityAdventure) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBActivityAdventure) GetRegisterTime() uint64 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *PBActivityAdventure) GetPrizeIdList() []uint32 {
	if x != nil {
		return x.PrizeIdList
	}
	return nil
}

// 开服特惠礼包
type PBOpenServerGiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId    uint32      `protobuf:"varint,1,opt,name=GiftId,proto3" json:"GiftId,omitempty"`       // 礼包ID
	BeginTime uint64      `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"` // 开始时间
	EndTime   uint64      `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 结束时间
	StageList []*PBU32U32 `protobuf:"bytes,4,rep,name=StageList,proto3" json:"StageList,omitempty"`  // 档次列表 ID|数量
}

func (x *PBOpenServerGiftInfo) Reset() {
	*x = PBOpenServerGiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBOpenServerGiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBOpenServerGiftInfo) ProtoMessage() {}

func (x *PBOpenServerGiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBOpenServerGiftInfo.ProtoReflect.Descriptor instead.
func (*PBOpenServerGiftInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{55}
}

func (x *PBOpenServerGiftInfo) GetGiftId() uint32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *PBOpenServerGiftInfo) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBOpenServerGiftInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBOpenServerGiftInfo) GetStageList() []*PBU32U32 {
	if x != nil {
		return x.StageList
	}
	return nil
}

// 开服特惠礼包
type PBActivityOpenServerGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                 // 活动SID
	BeginTime          uint64                  `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`                   // 开始时间
	EndTime            uint64                  `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                       // 结束时间
	GiftList           []*PBOpenServerGiftInfo `protobuf:"bytes,4,rep,name=GiftList,proto3" json:"GiftList,omitempty"`                      // 礼包列表
	NextDailyPrizeTime uint64                  `protobuf:"varint,5,opt,name=NextDailyPrizeTime,proto3" json:"NextDailyPrizeTime,omitempty"` // 下次领取时间
}

func (x *PBActivityOpenServerGift) Reset() {
	*x = PBActivityOpenServerGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBActivityOpenServerGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBActivityOpenServerGift) ProtoMessage() {}

func (x *PBActivityOpenServerGift) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBActivityOpenServerGift.ProtoReflect.Descriptor instead.
func (*PBActivityOpenServerGift) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{56}
}

func (x *PBActivityOpenServerGift) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBActivityOpenServerGift) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBActivityOpenServerGift) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBActivityOpenServerGift) GetGiftList() []*PBOpenServerGiftInfo {
	if x != nil {
		return x.GiftList
	}
	return nil
}

func (x *PBActivityOpenServerGift) GetNextDailyPrizeTime() uint64 {
	if x != nil {
		return x.NextDailyPrizeTime
	}
	return 0
}

// 用户活动
type PBPlayerSystemActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityList       []*PBPlayerActivityInfo     `protobuf:"bytes,1,rep,name=ActivityList,proto3" json:"ActivityList,omitempty"`             // 活动列表
	GrowRoadList       []*PBActivityGrowRoadInfo   `protobuf:"bytes,2,rep,name=GrowRoadList,proto3" json:"GrowRoadList,omitempty"`             // 成长之路列表
	GiftList           []*PBActivityChargeGift     `protobuf:"bytes,3,rep,name=GiftList,proto3" json:"GiftList,omitempty"`                     // 直购礼包
	AdventureList      []*PBActivityAdventure      `protobuf:"bytes,4,rep,name=AdventureList,proto3" json:"AdventureList,omitempty"`           // 冒险奖励列表
	OpenServerGiftList []*PBActivityOpenServerGift `protobuf:"bytes,5,rep,name=OpenServerGiftList,proto3" json:"OpenServerGiftList,omitempty"` // 开服特惠礼包
}

func (x *PBPlayerSystemActivity) Reset() {
	*x = PBPlayerSystemActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemActivity) ProtoMessage() {}

func (x *PBPlayerSystemActivity) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemActivity.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemActivity) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{57}
}

func (x *PBPlayerSystemActivity) GetActivityList() []*PBPlayerActivityInfo {
	if x != nil {
		return x.ActivityList
	}
	return nil
}

func (x *PBPlayerSystemActivity) GetGrowRoadList() []*PBActivityGrowRoadInfo {
	if x != nil {
		return x.GrowRoadList
	}
	return nil
}

func (x *PBPlayerSystemActivity) GetGiftList() []*PBActivityChargeGift {
	if x != nil {
		return x.GiftList
	}
	return nil
}

func (x *PBPlayerSystemActivity) GetAdventureList() []*PBActivityAdventure {
	if x != nil {
		return x.AdventureList
	}
	return nil
}

func (x *PBPlayerSystemActivity) GetOpenServerGiftList() []*PBActivityOpenServerGift {
	if x != nil {
		return x.OpenServerGiftList
	}
	return nil
}

type PBPlayerSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common       *PBPlayerSystemCommon       `protobuf:"bytes,1,opt,name=Common,proto3" json:"Common,omitempty"`              // 用户通用数据
	Task         *PBPlayerSystemTask         `protobuf:"bytes,2,opt,name=Task,proto3" json:"Task,omitempty"`                  // 任务信息
	Prof         *PBPlayerSystemProfession   `protobuf:"bytes,3,opt,name=Prof,proto3" json:"Prof,omitempty"`                  // 职业
	Battle       *PBPlayerSystemBattle       `protobuf:"bytes,4,opt,name=Battle,proto3" json:"Battle,omitempty"`              // 战斗
	Box          *PBPlayerSystemBox          `protobuf:"bytes,5,opt,name=Box,proto3" json:"Box,omitempty"`                    // 宝箱系统
	Shop         *PBPlayerSystemShop         `protobuf:"bytes,6,opt,name=Shop,proto3" json:"Shop,omitempty"`                  // 商店
	Draw         *PBPlayerSystemDraw         `protobuf:"bytes,7,opt,name=Draw,proto3" json:"Draw,omitempty"`                  // 抽奖
	Charge       *PBPlayerSystemCharge       `protobuf:"bytes,8,opt,name=Charge,proto3" json:"Charge,omitempty"`              // 充值
	Gene         *PBPlayerSystemGene         `protobuf:"bytes,9,opt,name=Gene,proto3" json:"Gene,omitempty"`                  // 基因系统
	Offline      *PBPlayerSystemOffline      `protobuf:"bytes,10,opt,name=Offline,proto3" json:"Offline,omitempty"`           // 离线系统
	HookTech     *PBPlayerSystemHookTech     `protobuf:"bytes,11,opt,name=HookTech,proto3" json:"HookTech,omitempty"`         // 挂机科技系统
	SevenDay     *PBPlayerSystemSevenDay     `protobuf:"bytes,12,opt,name=SevenDay,proto3" json:"SevenDay,omitempty"`         // 七天活动
	WorldBoss    *PBPlayerSystemWorldBoss    `protobuf:"bytes,13,opt,name=WorldBoss,proto3" json:"WorldBoss,omitempty"`       // 世界boss
	Championship *PBPlayerSystemChampionship `protobuf:"bytes,14,opt,name=Championship,proto3" json:"Championship,omitempty"` // 锦标赛
	Activity     *PBPlayerSystemActivity     `protobuf:"bytes,15,opt,name=Activity,proto3" json:"Activity,omitempty"`         // 活动
}

func (x *PBPlayerSystem) Reset() {
	*x = PBPlayerSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystem) ProtoMessage() {}

func (x *PBPlayerSystem) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystem.ProtoReflect.Descriptor instead.
func (*PBPlayerSystem) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{58}
}

func (x *PBPlayerSystem) GetCommon() *PBPlayerSystemCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *PBPlayerSystem) GetTask() *PBPlayerSystemTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *PBPlayerSystem) GetProf() *PBPlayerSystemProfession {
	if x != nil {
		return x.Prof
	}
	return nil
}

func (x *PBPlayerSystem) GetBattle() *PBPlayerSystemBattle {
	if x != nil {
		return x.Battle
	}
	return nil
}

func (x *PBPlayerSystem) GetBox() *PBPlayerSystemBox {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *PBPlayerSystem) GetShop() *PBPlayerSystemShop {
	if x != nil {
		return x.Shop
	}
	return nil
}

func (x *PBPlayerSystem) GetDraw() *PBPlayerSystemDraw {
	if x != nil {
		return x.Draw
	}
	return nil
}

func (x *PBPlayerSystem) GetCharge() *PBPlayerSystemCharge {
	if x != nil {
		return x.Charge
	}
	return nil
}

func (x *PBPlayerSystem) GetGene() *PBPlayerSystemGene {
	if x != nil {
		return x.Gene
	}
	return nil
}

func (x *PBPlayerSystem) GetOffline() *PBPlayerSystemOffline {
	if x != nil {
		return x.Offline
	}
	return nil
}

func (x *PBPlayerSystem) GetHookTech() *PBPlayerSystemHookTech {
	if x != nil {
		return x.HookTech
	}
	return nil
}

func (x *PBPlayerSystem) GetSevenDay() *PBPlayerSystemSevenDay {
	if x != nil {
		return x.SevenDay
	}
	return nil
}

func (x *PBPlayerSystem) GetWorldBoss() *PBPlayerSystemWorldBoss {
	if x != nil {
		return x.WorldBoss
	}
	return nil
}

func (x *PBPlayerSystem) GetChampionship() *PBPlayerSystemChampionship {
	if x != nil {
		return x.Championship
	}
	return nil
}

func (x *PBPlayerSystem) GetActivity() *PBPlayerSystemActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

// 基因卡牌
type PBGeneTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID uint32   `protobuf:"varint,1,opt,name=TagID,proto3" json:"TagID,omitempty"`        // 标签ID
	Cards []uint32 `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 激活的卡牌
}

func (x *PBGeneTag) Reset() {
	*x = PBGeneTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBGeneTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBGeneTag) ProtoMessage() {}

func (x *PBGeneTag) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBGeneTag.ProtoReflect.Descriptor instead.
func (*PBGeneTag) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{59}
}

func (x *PBGeneTag) GetTagID() uint32 {
	if x != nil {
		return x.TagID
	}
	return 0
}

func (x *PBGeneTag) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 基因使徒
type PBGeneRobot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotID  uint32       `protobuf:"varint,1,opt,name=RobotID,proto3" json:"RobotID,omitempty"`   // 机器人id
	Position uint32       `protobuf:"varint,2,opt,name=Position,proto3" json:"Position,omitempty"` // 位置
	Tags     []*PBGeneTag `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`          // 机器人激活的强化卡
}

func (x *PBGeneRobot) Reset() {
	*x = PBGeneRobot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBGeneRobot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBGeneRobot) ProtoMessage() {}

func (x *PBGeneRobot) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBGeneRobot.ProtoReflect.Descriptor instead.
func (*PBGeneRobot) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{60}
}

func (x *PBGeneRobot) GetRobotID() uint32 {
	if x != nil {
		return x.RobotID
	}
	return 0
}

func (x *PBGeneRobot) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PBGeneRobot) GetTags() []*PBGeneTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PBGeneScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeID uint32         `protobuf:"varint,1,opt,name=SchemeID,proto3" json:"SchemeID,omitempty"` // 方案id
	Name     string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`          // 方案名字(为空，表示使用默认值)
	Tags     []*PBGeneTag   `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`          // 基因触发器
	Robots   []*PBGeneRobot `protobuf:"bytes,4,rep,name=Robots,proto3" json:"Robots,omitempty"`      // 共鸣使徒
}

func (x *PBGeneScheme) Reset() {
	*x = PBGeneScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBGeneScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBGeneScheme) ProtoMessage() {}

func (x *PBGeneScheme) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBGeneScheme.ProtoReflect.Descriptor instead.
func (*PBGeneScheme) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{61}
}

func (x *PBGeneScheme) GetSchemeID() uint32 {
	if x != nil {
		return x.SchemeID
	}
	return 0
}

func (x *PBGeneScheme) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PBGeneScheme) GetTags() []*PBGeneTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PBGeneScheme) GetRobots() []*PBGeneRobot {
	if x != nil {
		return x.Robots
	}
	return nil
}

type PBPlayerSystemGene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemeID uint32          `protobuf:"varint,1,opt,name=SchemeID,proto3" json:"SchemeID,omitempty"` // 当前基因方案
	Schemes  []*PBGeneScheme `protobuf:"bytes,2,rep,name=Schemes,proto3" json:"Schemes,omitempty"`    // 基因方案
}

func (x *PBPlayerSystemGene) Reset() {
	*x = PBPlayerSystemGene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemGene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemGene) ProtoMessage() {}

func (x *PBPlayerSystemGene) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemGene.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemGene) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{62}
}

func (x *PBPlayerSystemGene) GetSchemeID() uint32 {
	if x != nil {
		return x.SchemeID
	}
	return 0
}

func (x *PBPlayerSystemGene) GetSchemes() []*PBGeneScheme {
	if x != nil {
		return x.Schemes
	}
	return nil
}

// 离线收益系统
type PBPlayerSystemOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginTime           uint64           `protobuf:"varint,1,opt,name=LoginTime,proto3" json:"LoginTime,omitempty"`                     // 上次登录时间
	LogoutTime          uint64           `protobuf:"varint,2,opt,name=LogoutTime,proto3" json:"LogoutTime,omitempty"`                   // 登出时间
	IncomTime           uint32           `protobuf:"varint,3,opt,name=IncomTime,proto3" json:"IncomTime,omitempty"`                     // 离线收益时长秒
	Rewards             []*PBAddItemData `protobuf:"bytes,4,rep,name=Rewards,proto3" json:"Rewards,omitempty"`                          // 离线收益
	TotalEquipment      uint32           `protobuf:"varint,5,opt,name=TotalEquipment,proto3" json:"TotalEquipment,omitempty"`           // 装备数量
	AddEquipmentBag     uint32           `protobuf:"varint,6,opt,name=AddEquipmentBag,proto3" json:"AddEquipmentBag,omitempty"`         // 加入背包数量
	SplitEquipmentScore uint64           `protobuf:"varint,7,opt,name=SplitEquipmentScore,proto3" json:"SplitEquipmentScore,omitempty"` // 分解装备积分
	MaxIncomTime        uint32           `protobuf:"varint,8,opt,name=MaxIncomTime,proto3" json:"MaxIncomTime,omitempty"`               // 最大离线收益时长秒
}

func (x *PBPlayerSystemOffline) Reset() {
	*x = PBPlayerSystemOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerSystemOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerSystemOffline) ProtoMessage() {}

func (x *PBPlayerSystemOffline) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerSystemOffline.ProtoReflect.Descriptor instead.
func (*PBPlayerSystemOffline) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{63}
}

func (x *PBPlayerSystemOffline) GetLoginTime() uint64 {
	if x != nil {
		return x.LoginTime
	}
	return 0
}

func (x *PBPlayerSystemOffline) GetLogoutTime() uint64 {
	if x != nil {
		return x.LogoutTime
	}
	return 0
}

func (x *PBPlayerSystemOffline) GetIncomTime() uint32 {
	if x != nil {
		return x.IncomTime
	}
	return 0
}

func (x *PBPlayerSystemOffline) GetRewards() []*PBAddItemData {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *PBPlayerSystemOffline) GetTotalEquipment() uint32 {
	if x != nil {
		return x.TotalEquipment
	}
	return 0
}

func (x *PBPlayerSystemOffline) GetAddEquipmentBag() uint32 {
	if x != nil {
		return x.AddEquipmentBag
	}
	return 0
}

func (x *PBPlayerSystemOffline) GetSplitEquipmentScore() uint64 {
	if x != nil {
		return x.SplitEquipmentScore
	}
	return 0
}

func (x *PBPlayerSystemOffline) GetMaxIncomTime() uint32 {
	if x != nil {
		return x.MaxIncomTime
	}
	return 0
}

// *************************************************用户系统功能数据结束***************************
// 前端数据存储
type PBClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"` // 类型
	Data string `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"` // 数据
}

func (x *PBClientData) Reset() {
	*x = PBClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBClientData) ProtoMessage() {}

func (x *PBClientData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBClientData.ProtoReflect.Descriptor instead.
func (*PBClientData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{64}
}

func (x *PBClientData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PBClientData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 前端数据存储
type PBPlayerClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientDataList []*PBClientData `protobuf:"bytes,1,rep,name=ClientDataList,proto3" json:"ClientDataList,omitempty"` // 前端数据
}

func (x *PBPlayerClientData) Reset() {
	*x = PBPlayerClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerClientData) ProtoMessage() {}

func (x *PBPlayerClientData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerClientData.ProtoReflect.Descriptor instead.
func (*PBPlayerClientData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{65}
}

func (x *PBPlayerClientData) GetClientDataList() []*PBClientData {
	if x != nil {
		return x.ClientDataList
	}
	return nil
}

// *************************************************邮件数据开始***************************
type PBMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender     string           `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`                        // 发送者玩家ID
	Receiver   uint64           `protobuf:"varint,2,opt,name=Receiver,proto3" json:"Receiver,omitempty"`                   // 接收者玩家ID
	Id         uint32           `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`                               // 编号
	SendTime   uint64           `protobuf:"varint,4,opt,name=SendTime,proto3" json:"SendTime,omitempty"`                   // 发送时间
	ExpireTime uint64           `protobuf:"varint,5,opt,name=ExpireTime,proto3" json:"ExpireTime,omitempty"`               // 过期时间
	AwardTime  uint64           `protobuf:"varint,6,opt,name=AwardTime,proto3" json:"AwardTime,omitempty"`                 // 过期时间
	Title      string           `protobuf:"bytes,7,opt,name=Title,proto3" json:"Title,omitempty"`                          // 标题
	Content    string           `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`                      // 正文
	State      EmMailState      `protobuf:"varint,9,opt,name=State,proto3,enum=common.EmMailState" json:"State,omitempty"` // 已读标记 (0代表未读,其他已读) EmMailType
	Item       []*PBAddItemData `protobuf:"bytes,10,rep,name=Item,proto3" json:"Item,omitempty"`                           // 道具
}

func (x *PBMail) Reset() {
	*x = PBMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBMail) ProtoMessage() {}

func (x *PBMail) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBMail.ProtoReflect.Descriptor instead.
func (*PBMail) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{66}
}

func (x *PBMail) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *PBMail) GetReceiver() uint64 {
	if x != nil {
		return x.Receiver
	}
	return 0
}

func (x *PBMail) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBMail) GetSendTime() uint64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *PBMail) GetExpireTime() uint64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *PBMail) GetAwardTime() uint64 {
	if x != nil {
		return x.AwardTime
	}
	return 0
}

func (x *PBMail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PBMail) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PBMail) GetState() EmMailState {
	if x != nil {
		return x.State
	}
	return EmMailState_NoRead
}

func (x *PBMail) GetItem() []*PBAddItemData {
	if x != nil {
		return x.Item
	}
	return nil
}

// 邮件数据
type PBPlayerMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailList   []*PBMail `protobuf:"bytes,1,rep,name=MailList,proto3" json:"MailList,omitempty"`      // 邮件数据
	OrderId    uint32    `protobuf:"varint,2,opt,name=OrderId,proto3" json:"OrderId,omitempty"`       // 邮件序号
	AllOrderId uint32    `protobuf:"varint,3,opt,name=AllOrderId,proto3" json:"AllOrderId,omitempty"` // 全服邮件领取序号
}

func (x *PBPlayerMail) Reset() {
	*x = PBPlayerMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerMail) ProtoMessage() {}

func (x *PBPlayerMail) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerMail.ProtoReflect.Descriptor instead.
func (*PBPlayerMail) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{67}
}

func (x *PBPlayerMail) GetMailList() []*PBMail {
	if x != nil {
		return x.MailList
	}
	return nil
}

func (x *PBPlayerMail) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *PBPlayerMail) GetAllOrderId() uint32 {
	if x != nil {
		return x.AllOrderId
	}
	return 0
}

// *************************************************背包数据开始***************************
// 物品（装备）
type PBItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`       // 物品ID
	Count int64  `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"` // 物品数量
}

func (x *PBItem) Reset() {
	*x = PBItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBItem) ProtoMessage() {}

func (x *PBItem) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBItem.ProtoReflect.Descriptor instead.
func (*PBItem) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{68}
}

func (x *PBItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 用户背包
type PBPlayerBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemList     []*PBItem   `protobuf:"bytes,1,rep,name=ItemList,proto3" json:"ItemList,omitempty"`         // 道具背包
	DailyBuyItem []*PBU32U32 `protobuf:"bytes,2,rep,name=DailyBuyItem,proto3" json:"DailyBuyItem,omitempty"` // 日购买道具
}

func (x *PBPlayerBag) Reset() {
	*x = PBPlayerBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerBag) ProtoMessage() {}

func (x *PBPlayerBag) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerBag.ProtoReflect.Descriptor instead.
func (*PBPlayerBag) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{69}
}

func (x *PBPlayerBag) GetItemList() []*PBItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *PBPlayerBag) GetDailyBuyItem() []*PBU32U32 {
	if x != nil {
		return x.DailyBuyItem
	}
	return nil
}

// *************************************************装备数据开始***************************
// 装备属性
type PBEquipmentProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropId uint32 `protobuf:"varint,1,opt,name=PropId,proto3" json:"PropId,omitempty"` // 属性ID
	Value  uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`   // 属性值
	Score  uint32 `protobuf:"varint,3,opt,name=Score,proto3" json:"Score,omitempty"`   // 评分 对应装备评分表的区间
}

func (x *PBEquipmentProp) Reset() {
	*x = PBEquipmentProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBEquipmentProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBEquipmentProp) ProtoMessage() {}

func (x *PBEquipmentProp) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBEquipmentProp.ProtoReflect.Descriptor instead.
func (*PBEquipmentProp) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{70}
}

func (x *PBEquipmentProp) GetPropId() uint32 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *PBEquipmentProp) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PBEquipmentProp) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 装备
type PBEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn              uint32             `protobuf:"varint,1,opt,name=Sn,proto3" json:"Sn,omitempty"`                           // 装备唯一
	Id              uint32             `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`                           // 装备ID
	Quality         uint32             `protobuf:"varint,3,opt,name=Quality,proto3" json:"Quality,omitempty"`                 // 品质
	Star            uint32             `protobuf:"varint,4,opt,name=Star,proto3" json:"Star,omitempty"`                       // 星级
	MainProp        *PBEquipmentProp   `protobuf:"bytes,5,opt,name=MainProp,proto3" json:"MainProp,omitempty"`                // 主词条
	MinorPropList   []*PBEquipmentProp `protobuf:"bytes,6,rep,name=MinorPropList,proto3" json:"MinorPropList,omitempty"`      // 次词条
	VicePropList    []*PBEquipmentProp `protobuf:"bytes,7,rep,name=VicePropList,proto3" json:"VicePropList,omitempty"`        // 副词条
	LinkPropList    []*PBEquipmentProp `protobuf:"bytes,8,rep,name=LinkPropList,proto3" json:"LinkPropList,omitempty"`        // 共鸣词条
	EquipProfession uint32             `protobuf:"varint,9,opt,name=EquipProfession,proto3" json:"EquipProfession,omitempty"` // 穿戴职业
	IsLock          bool               `protobuf:"varint,10,opt,name=IsLock,proto3" json:"IsLock,omitempty"`                  // 是否锁定
}

func (x *PBEquipment) Reset() {
	*x = PBEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBEquipment) ProtoMessage() {}

func (x *PBEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBEquipment.ProtoReflect.Descriptor instead.
func (*PBEquipment) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{71}
}

func (x *PBEquipment) GetSn() uint32 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *PBEquipment) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBEquipment) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PBEquipment) GetStar() uint32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *PBEquipment) GetMainProp() *PBEquipmentProp {
	if x != nil {
		return x.MainProp
	}
	return nil
}

func (x *PBEquipment) GetMinorPropList() []*PBEquipmentProp {
	if x != nil {
		return x.MinorPropList
	}
	return nil
}

func (x *PBEquipment) GetVicePropList() []*PBEquipmentProp {
	if x != nil {
		return x.VicePropList
	}
	return nil
}

func (x *PBEquipment) GetLinkPropList() []*PBEquipmentProp {
	if x != nil {
		return x.LinkPropList
	}
	return nil
}

func (x *PBEquipment) GetEquipProfession() uint32 {
	if x != nil {
		return x.EquipProfession
	}
	return 0
}

func (x *PBEquipment) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

// 用户装备
type PBPlayerEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId           uint32         `protobuf:"varint,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`                          // 序列id
	EquipmentList     []*PBEquipment `protobuf:"bytes,2,rep,name=equipmentList,proto3" json:"equipmentList,omitempty"`               // 装备列表
	AutoSplitQuality  []uint32       `protobuf:"varint,3,rep,packed,name=AutoSplitQuality,proto3" json:"AutoSplitQuality,omitempty"` // 自动分解品质
	PosBuyCount       uint32         `protobuf:"varint,4,opt,name=PosBuyCount,proto3" json:"PosBuyCount,omitempty"`                  // 购买格子次数
	SplitScore        uint32         `protobuf:"varint,5,opt,name=SplitScore,proto3" json:"SplitScore,omitempty"`                    // 分解积分
	SplitAddBoxCount  uint32         `protobuf:"varint,6,opt,name=SplitAddBoxCount,proto3" json:"SplitAddBoxCount,omitempty"`        // 分解增加宝箱个数
	HookEquipmentList []*PBEquipment `protobuf:"bytes,7,rep,name=HookEquipmentList,proto3" json:"HookEquipmentList,omitempty"`       // 挂机装备列表
	SplitEquipCount   uint32         `protobuf:"varint,8,opt,name=SplitEquipCount,proto3" json:"SplitEquipCount,omitempty"`          // 分解增加宝箱个数
	TotalSplitScore   uint64         `protobuf:"varint,9,opt,name=TotalSplitScore,proto3" json:"TotalSplitScore,omitempty"`          // 累计积分
}

func (x *PBPlayerEquipment) Reset() {
	*x = PBPlayerEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerEquipment) ProtoMessage() {}

func (x *PBPlayerEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerEquipment.ProtoReflect.Descriptor instead.
func (*PBPlayerEquipment) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{72}
}

func (x *PBPlayerEquipment) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *PBPlayerEquipment) GetEquipmentList() []*PBEquipment {
	if x != nil {
		return x.EquipmentList
	}
	return nil
}

func (x *PBPlayerEquipment) GetAutoSplitQuality() []uint32 {
	if x != nil {
		return x.AutoSplitQuality
	}
	return nil
}

func (x *PBPlayerEquipment) GetPosBuyCount() uint32 {
	if x != nil {
		return x.PosBuyCount
	}
	return 0
}

func (x *PBPlayerEquipment) GetSplitScore() uint32 {
	if x != nil {
		return x.SplitScore
	}
	return 0
}

func (x *PBPlayerEquipment) GetSplitAddBoxCount() uint32 {
	if x != nil {
		return x.SplitAddBoxCount
	}
	return 0
}

func (x *PBPlayerEquipment) GetHookEquipmentList() []*PBEquipment {
	if x != nil {
		return x.HookEquipmentList
	}
	return nil
}

func (x *PBPlayerEquipment) GetSplitEquipCount() uint32 {
	if x != nil {
		return x.SplitEquipCount
	}
	return 0
}

func (x *PBPlayerEquipment) GetTotalSplitScore() uint64 {
	if x != nil {
		return x.TotalSplitScore
	}
	return 0
}

// *************************************************英雄数据结束***************************
// 英雄基础信息
type PBHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn          uint32 `protobuf:"varint,1,opt,name=Sn,proto3" json:"Sn,omitempty"`                   // 英雄唯一
	Id          uint32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`                   // 英雄id
	Star        uint32 `protobuf:"varint,3,opt,name=Star,proto3" json:"Star,omitempty"`               // 英雄星级
	AwakenLevel uint32 `protobuf:"varint,4,opt,name=AwakenLevel,proto3" json:"AwakenLevel,omitempty"` // 英雄技能觉醒等级
	BattleStar  uint32 `protobuf:"varint,5,opt,name=BattleStar,proto3" json:"BattleStar,omitempty"`   // 上阵星星数量
}

func (x *PBHero) Reset() {
	*x = PBHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBHero) ProtoMessage() {}

func (x *PBHero) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBHero.ProtoReflect.Descriptor instead.
func (*PBHero) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{73}
}

func (x *PBHero) GetSn() uint32 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *PBHero) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBHero) GetStar() uint32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *PBHero) GetAwakenLevel() uint32 {
	if x != nil {
		return x.AwakenLevel
	}
	return 0
}

func (x *PBHero) GetBattleStar() uint32 {
	if x != nil {
		return x.BattleStar
	}
	return 0
}

// 英雄图鉴信息
type PBHeroBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`           // 英雄id
	Star    uint32 `protobuf:"varint,2,opt,name=Star,proto3" json:"Star,omitempty"`       // 星级 0表示需要激活
	MaxStar uint32 `protobuf:"varint,3,opt,name=MaxStar,proto3" json:"MaxStar,omitempty"` // 最大星级
}

func (x *PBHeroBook) Reset() {
	*x = PBHeroBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBHeroBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBHeroBook) ProtoMessage() {}

func (x *PBHeroBook) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBHeroBook.ProtoReflect.Descriptor instead.
func (*PBHeroBook) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{74}
}

func (x *PBHeroBook) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBHeroBook) GetStar() uint32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *PBHeroBook) GetMaxStar() uint32 {
	if x != nil {
		return x.MaxStar
	}
	return 0
}

// 上阵列表
type PBHeroTeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamType uint32   `protobuf:"varint,1,opt,name=TeamType,proto3" json:"TeamType,omitempty"`    // 编队类型
	HeroSn   []uint32 `protobuf:"varint,2,rep,packed,name=HeroSn,proto3" json:"HeroSn,omitempty"` // 英雄ID
}

func (x *PBHeroTeamList) Reset() {
	*x = PBHeroTeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBHeroTeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBHeroTeamList) ProtoMessage() {}

func (x *PBHeroTeamList) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBHeroTeamList.ProtoReflect.Descriptor instead.
func (*PBHeroTeamList) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{75}
}

func (x *PBHeroTeamList) GetTeamType() uint32 {
	if x != nil {
		return x.TeamType
	}
	return 0
}

func (x *PBHeroTeamList) GetHeroSn() []uint32 {
	if x != nil {
		return x.HeroSn
	}
	return nil
}

// 英雄系统
type PBPlayerHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId              uint32            `protobuf:"varint,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`                           // 自增ID
	HeroList             []*PBHero         `protobuf:"bytes,2,rep,name=HeroList,proto3" json:"HeroList,omitempty"`                          // 英雄列表
	TeamList             []*PBHeroTeamList `protobuf:"bytes,3,rep,name=TeamList,proto3" json:"TeamList,omitempty"`                          // 编队列表
	FightPower           uint32            `protobuf:"varint,4,opt,name=FightPower,proto3" json:"FightPower,omitempty"`                     // 战斗力
	UpStarCount          []*PBU32U32       `protobuf:"bytes,5,rep,name=UpStarCount,proto3" json:"UpStarCount,omitempty"`                    // 升星次数
	HeroBookList         []*PBHeroBook     `protobuf:"bytes,6,rep,name=HeroBookList,proto3" json:"HeroBookList,omitempty"`                  // 英雄图鉴列表
	MaxHistoryFightPower uint32            `protobuf:"varint,7,opt,name=MaxHistoryFightPower,proto3" json:"MaxHistoryFightPower,omitempty"` // 历史最大战斗力
}

func (x *PBPlayerHero) Reset() {
	*x = PBPlayerHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerHero) ProtoMessage() {}

func (x *PBPlayerHero) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerHero.ProtoReflect.Descriptor instead.
func (*PBPlayerHero) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{76}
}

func (x *PBPlayerHero) GetOrderId() uint32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *PBPlayerHero) GetHeroList() []*PBHero {
	if x != nil {
		return x.HeroList
	}
	return nil
}

func (x *PBPlayerHero) GetTeamList() []*PBHeroTeamList {
	if x != nil {
		return x.TeamList
	}
	return nil
}

func (x *PBPlayerHero) GetFightPower() uint32 {
	if x != nil {
		return x.FightPower
	}
	return 0
}

func (x *PBPlayerHero) GetUpStarCount() []*PBU32U32 {
	if x != nil {
		return x.UpStarCount
	}
	return nil
}

func (x *PBPlayerHero) GetHeroBookList() []*PBHeroBook {
	if x != nil {
		return x.HeroBookList
	}
	return nil
}

func (x *PBPlayerHero) GetMaxHistoryFightPower() uint32 {
	if x != nil {
		return x.MaxHistoryFightPower
	}
	return 0
}

// *************************************************离线数据开始***************************
// 离线数据
type PBAddItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      uint32       `protobuf:"varint,1,opt,name=Kind,proto3" json:"Kind,omitempty"`                                   // 类型
	Id        uint32       `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`                                       // 物品ID
	Count     int64        `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`                                 // 物品数量
	DoingType EmDoingType  `protobuf:"varint,4,opt,name=DoingType,proto3,enum=common.EmDoingType" json:"DoingType,omitempty"` // 操作类型
	Params    []uint32     `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`                        // 物品参数
	Equipment *PBEquipment `protobuf:"bytes,6,opt,name=Equipment,proto3" json:"Equipment,omitempty"`                          // 装备数据
}

func (x *PBAddItemData) Reset() {
	*x = PBAddItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAddItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAddItemData) ProtoMessage() {}

func (x *PBAddItemData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAddItemData.ProtoReflect.Descriptor instead.
func (*PBAddItemData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{77}
}

func (x *PBAddItemData) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *PBAddItemData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBAddItemData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PBAddItemData) GetDoingType() EmDoingType {
	if x != nil {
		return x.DoingType
	}
	return EmDoingType_EDT_Gm
}

func (x *PBAddItemData) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PBAddItemData) GetEquipment() *PBEquipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

// 离线数据
type PBOfflineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfflineType EmPlayerOfflineType `protobuf:"varint,1,opt,name=OfflineType,proto3,enum=common.EmPlayerOfflineType" json:"OfflineType,omitempty"` // 离线数据类型
	Mail        *PBMail             `protobuf:"bytes,2,opt,name=Mail,proto3" json:"Mail,omitempty"`                                                // 邮件
	Item        []*PBAddItemData    `protobuf:"bytes,3,rep,name=Item,proto3" json:"Item,omitempty"`                                                // 道具
	DoingType   EmDoingType         `protobuf:"varint,4,opt,name=DoingType,proto3,enum=common.EmDoingType" json:"DoingType,omitempty"`             // 发放原因
	Notify      bool                `protobuf:"varint,5,opt,name=Notify,proto3" json:"Notify,omitempty"`                                           // 是否发送恭喜获得
}

func (x *PBOfflineData) Reset() {
	*x = PBOfflineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBOfflineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBOfflineData) ProtoMessage() {}

func (x *PBOfflineData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBOfflineData.ProtoReflect.Descriptor instead.
func (*PBOfflineData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{78}
}

func (x *PBOfflineData) GetOfflineType() EmPlayerOfflineType {
	if x != nil {
		return x.OfflineType
	}
	return EmPlayerOfflineType_EPOT_Mail
}

func (x *PBOfflineData) GetMail() *PBMail {
	if x != nil {
		return x.Mail
	}
	return nil
}

func (x *PBOfflineData) GetItem() []*PBAddItemData {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PBOfflineData) GetDoingType() EmDoingType {
	if x != nil {
		return x.DoingType
	}
	return EmDoingType_EDT_Gm
}

func (x *PBOfflineData) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

// 用户信息
type PBPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *PBPlayerBase       `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`           // 角色基础数据
	System    *PBPlayerSystem     `protobuf:"bytes,2,opt,name=System,proto3" json:"System,omitempty"`       // 角色功能数据
	Bag       *PBPlayerBag        `protobuf:"bytes,3,opt,name=Bag,proto3" json:"Bag,omitempty"`             // 玩家背包
	Equipment *PBPlayerEquipment  `protobuf:"bytes,4,opt,name=Equipment,proto3" json:"Equipment,omitempty"` // 玩家装备
	Client    *PBPlayerClientData `protobuf:"bytes,5,opt,name=Client,proto3" json:"Client,omitempty"`       // 角色前端数据
	Hero      *PBPlayerHero       `protobuf:"bytes,6,opt,name=Hero,proto3" json:"Hero,omitempty"`           // 伙伴数据
	Mail      *PBPlayerMail       `protobuf:"bytes,7,opt,name=Mail,proto3" json:"Mail,omitempty"`           // 邮件数据
	Crystal   *PBPlayerCrystal    `protobuf:"bytes,8,opt,name=Crystal,proto3" json:"Crystal,omitempty"`     // 晶核系统
}

func (x *PBPlayerData) Reset() {
	*x = PBPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerData) ProtoMessage() {}

func (x *PBPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerData.ProtoReflect.Descriptor instead.
func (*PBPlayerData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{79}
}

func (x *PBPlayerData) GetBase() *PBPlayerBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *PBPlayerData) GetSystem() *PBPlayerSystem {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *PBPlayerData) GetBag() *PBPlayerBag {
	if x != nil {
		return x.Bag
	}
	return nil
}

func (x *PBPlayerData) GetEquipment() *PBPlayerEquipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *PBPlayerData) GetClient() *PBPlayerClientData {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *PBPlayerData) GetHero() *PBPlayerHero {
	if x != nil {
		return x.Hero
	}
	return nil
}

func (x *PBPlayerData) GetMail() *PBPlayerMail {
	if x != nil {
		return x.Mail
	}
	return nil
}

func (x *PBPlayerData) GetCrystal() *PBPlayerCrystal {
	if x != nil {
		return x.Crystal
	}
	return nil
}

// 单条聊天信息
type PBChatMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64               `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`    // 消息序号
	Display *PBPlayerBaseDisplay `protobuf:"bytes,2,opt,name=Display,proto3" json:"Display,omitempty"` // 发送者数据
	Msg     string               `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`         // 发送的消息
	Time    uint64               `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`      // 发送的时间
}

func (x *PBChatMsgInfo) Reset() {
	*x = PBChatMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBChatMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBChatMsgInfo) ProtoMessage() {}

func (x *PBChatMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBChatMsgInfo.ProtoReflect.Descriptor instead.
func (*PBChatMsgInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{80}
}

func (x *PBChatMsgInfo) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PBChatMsgInfo) GetDisplay() *PBPlayerBaseDisplay {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *PBChatMsgInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PBChatMsgInfo) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 所有聊天数据
type PBAllChatMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg []*PBChatMsgInfo `protobuf:"bytes,1,rep,name=Msg,proto3" json:"Msg,omitempty"` // 单条聊天信息
}

func (x *PBAllChatMsgInfo) Reset() {
	*x = PBAllChatMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAllChatMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAllChatMsgInfo) ProtoMessage() {}

func (x *PBAllChatMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAllChatMsgInfo.ProtoReflect.Descriptor instead.
func (*PBAllChatMsgInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{81}
}

func (x *PBAllChatMsgInfo) GetMsg() []*PBChatMsgInfo {
	if x != nil {
		return x.Msg
	}
	return nil
}

// 排行榜数据
type RankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank    uint32               `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`      // 名次 1开始
	Display *PBPlayerBaseDisplay `protobuf:"bytes,2,opt,name=Display,proto3" json:"Display,omitempty"` // 基本数据
	Value   uint64               `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`    // 数据 通关进度：useTime:4位 rate：5位 stageid:3位 mapid:3位
}

func (x *RankInfo) Reset() {
	*x = RankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfo) ProtoMessage() {}

func (x *RankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfo.ProtoReflect.Descriptor instead.
func (*RankInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{82}
}

func (x *RankInfo) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankInfo) GetDisplay() *PBPlayerBaseDisplay {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *RankInfo) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 增加道具信息
type PBAddItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   uint32   `protobuf:"varint,1,opt,name=Kind,proto3" json:"Kind,omitempty"`            // 道具类型 EItemKindType
	Id     uint32   `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`                // 道具ID
	Count  int64    `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`          // 数量
	Params []uint32 `protobuf:"varint,4,rep,packed,name=Params,proto3" json:"Params,omitempty"` // 参数 英雄:星级  装备：品质，星级，sn
}

func (x *PBAddItem) Reset() {
	*x = PBAddItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBAddItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBAddItem) ProtoMessage() {}

func (x *PBAddItem) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBAddItem.ProtoReflect.Descriptor instead.
func (*PBAddItem) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{83}
}

func (x *PBAddItem) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *PBAddItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBAddItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PBAddItem) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

// *************************************************reids数据开始***************************
// 通关数据
type PBPlayerBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Display    *PBPlayerBaseDisplay `protobuf:"bytes,1,opt,name=Display,proto3" json:"Display,omitempty"`        // 基本数据
	HeroList   []*PBHero            `protobuf:"bytes,2,rep,name=HeroList,proto3" json:"HeroList,omitempty"`      // 英雄列表
	Time       uint64               `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`             // 通关时间戳
	UseTime    uint32               `protobuf:"varint,4,opt,name=UseTime,proto3" json:"UseTime,omitempty"`       // 使用时间
	FightPower uint32               `protobuf:"varint,5,opt,name=FightPower,proto3" json:"FightPower,omitempty"` // 战斗力
	ClientData *PBBattleClientData  `protobuf:"bytes,6,opt,name=ClientData,proto3" json:"ClientData,omitempty"`  // 战场内部数据
}

func (x *PBPlayerBattleData) Reset() {
	*x = PBPlayerBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerBattleData) ProtoMessage() {}

func (x *PBPlayerBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerBattleData.ProtoReflect.Descriptor instead.
func (*PBPlayerBattleData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{84}
}

func (x *PBPlayerBattleData) GetDisplay() *PBPlayerBaseDisplay {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *PBPlayerBattleData) GetHeroList() []*PBHero {
	if x != nil {
		return x.HeroList
	}
	return nil
}

func (x *PBPlayerBattleData) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PBPlayerBattleData) GetUseTime() uint32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *PBPlayerBattleData) GetFightPower() uint32 {
	if x != nil {
		return x.FightPower
	}
	return 0
}

func (x *PBPlayerBattleData) GetClientData() *PBBattleClientData {
	if x != nil {
		return x.ClientData
	}
	return nil
}

// 公告数据
type PBNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`               // 公告ID 越大越优先
	Title     string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`          // 标题
	Content   string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`      // 正文
	BeginTime uint64 `protobuf:"varint,4,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"` // 开始时间戳
	EndTime   uint64 `protobuf:"varint,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 结束时间戳
	Sender    string `protobuf:"bytes,6,opt,name=Sender,proto3" json:"Sender,omitempty"`        // 发件人
}

func (x *PBNotice) Reset() {
	*x = PBNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBNotice) ProtoMessage() {}

func (x *PBNotice) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBNotice.ProtoReflect.Descriptor instead.
func (*PBNotice) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{85}
}

func (x *PBNotice) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PBNotice) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PBNotice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PBNotice) GetBeginTime() uint64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PBNotice) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PBNotice) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

// 通用属性结构
type PBPropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropId uint32 `protobuf:"varint,1,opt,name=PropId,proto3" json:"PropId,omitempty"` // 属性ID
	Value  uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`   // 属性值
}

func (x *PBPropInfo) Reset() {
	*x = PBPropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPropInfo) ProtoMessage() {}

func (x *PBPropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPropInfo.ProtoReflect.Descriptor instead.
func (*PBPropInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{86}
}

func (x *PBPropInfo) GetPropId() uint32 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *PBPropInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// json数据
type PBJsonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonName string `protobuf:"bytes,1,opt,name=JsonName,proto3" json:"JsonName,omitempty"` // json名称
	JsonData string `protobuf:"bytes,2,opt,name=JsonData,proto3" json:"JsonData,omitempty"` // json数据
}

func (x *PBJsonInfo) Reset() {
	*x = PBJsonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBJsonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBJsonInfo) ProtoMessage() {}

func (x *PBJsonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBJsonInfo.ProtoReflect.Descriptor instead.
func (*PBJsonInfo) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{87}
}

func (x *PBJsonInfo) GetJsonName() string {
	if x != nil {
		return x.JsonName
	}
	return ""
}

func (x *PBJsonInfo) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

// *************************************************圣遗物数据开始***************************
type PBCrystalProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`     // 主键
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"` // 值
}

func (x *PBCrystalProp) Reset() {
	*x = PBCrystalProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBCrystalProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBCrystalProp) ProtoMessage() {}

func (x *PBCrystalProp) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBCrystalProp.ProtoReflect.Descriptor instead.
func (*PBCrystalProp) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{88}
}

func (x *PBCrystalProp) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *PBCrystalProp) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// 机器人协议
type PBCrystalRobot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotID          uint32   `protobuf:"varint,1,opt,name=RobotID,proto3" json:"RobotID,omitempty"`                      // 机器人ID
	Stage            uint32   `protobuf:"varint,2,opt,name=Stage,proto3" json:"Stage,omitempty"`                          // 当前等级
	FinishStage      uint32   `protobuf:"varint,3,opt,name=FinishStage,proto3" json:"FinishStage,omitempty"`              // 完成等级
	RoleSkillID      uint32   `protobuf:"varint,4,opt,name=RoleSkillID,proto3" json:"RoleSkillID,omitempty"`              // 机器人的共鸣技能ID
	RoleSkillPercent uint32   `protobuf:"varint,5,opt,name=RoleSkillPercent,proto3" json:"RoleSkillPercent,omitempty"`    // 技能参数提升百分比
	UnlockLinkages   []uint32 `protobuf:"varint,6,rep,packed,name=UnlockLinkages,proto3" json:"UnlockLinkages,omitempty"` // 已经解锁的共鸣技能
	Crystals         []uint32 `protobuf:"varint,7,rep,packed,name=Crystals,proto3" json:"Crystals,omitempty"`             // 装备的晶核
}

func (x *PBCrystalRobot) Reset() {
	*x = PBCrystalRobot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBCrystalRobot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBCrystalRobot) ProtoMessage() {}

func (x *PBCrystalRobot) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBCrystalRobot.ProtoReflect.Descriptor instead.
func (*PBCrystalRobot) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{89}
}

func (x *PBCrystalRobot) GetRobotID() uint32 {
	if x != nil {
		return x.RobotID
	}
	return 0
}

func (x *PBCrystalRobot) GetStage() uint32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *PBCrystalRobot) GetFinishStage() uint32 {
	if x != nil {
		return x.FinishStage
	}
	return 0
}

func (x *PBCrystalRobot) GetRoleSkillID() uint32 {
	if x != nil {
		return x.RoleSkillID
	}
	return 0
}

func (x *PBCrystalRobot) GetRoleSkillPercent() uint32 {
	if x != nil {
		return x.RoleSkillPercent
	}
	return 0
}

func (x *PBCrystalRobot) GetUnlockLinkages() []uint32 {
	if x != nil {
		return x.UnlockLinkages
	}
	return nil
}

func (x *PBCrystalRobot) GetCrystals() []uint32 {
	if x != nil {
		return x.Crystals
	}
	return nil
}

// 晶核协议
type PBCrystal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrystalID       uint32   `protobuf:"varint,1,opt,name=CrystalID,proto3" json:"CrystalID,omitempty"`                    // 晶核ID
	Element         uint32   `protobuf:"varint,2,opt,name=Element,proto3" json:"Element,omitempty"`                        // 元素属性
	Quality         uint32   `protobuf:"varint,3,opt,name=Quality,proto3" json:"Quality,omitempty"`                        // 品质属性
	Star            uint32   `protobuf:"varint,4,opt,name=Star,proto3" json:"Star,omitempty"`                              // 星星数量
	RewardCoinTimes uint32   `protobuf:"varint,5,opt,name=RewardCoinTimes,proto3" json:"RewardCoinTimes,omitempty"`        // 升星对应的领奖次数(每一次升星，对应一次领取奖励，例如收藏币)
	PassiveSkillIds []uint32 `protobuf:"varint,6,rep,packed,name=PassiveSkillIds,proto3" json:"PassiveSkillIds,omitempty"` // 解锁被动技能ID
	Level           uint32   `protobuf:"varint,7,opt,name=Level,proto3" json:"Level,omitempty"`                            // 晶核等级
}

func (x *PBCrystal) Reset() {
	*x = PBCrystal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBCrystal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBCrystal) ProtoMessage() {}

func (x *PBCrystal) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBCrystal.ProtoReflect.Descriptor instead.
func (*PBCrystal) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{90}
}

func (x *PBCrystal) GetCrystalID() uint32 {
	if x != nil {
		return x.CrystalID
	}
	return 0
}

func (x *PBCrystal) GetElement() uint32 {
	if x != nil {
		return x.Element
	}
	return 0
}

func (x *PBCrystal) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PBCrystal) GetStar() uint32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *PBCrystal) GetRewardCoinTimes() uint32 {
	if x != nil {
		return x.RewardCoinTimes
	}
	return 0
}

func (x *PBCrystal) GetPassiveSkillIds() []uint32 {
	if x != nil {
		return x.PassiveSkillIds
	}
	return nil
}

func (x *PBCrystal) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// 图鉴系统
type PBCrystalBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin          uint32 `protobuf:"varint,1,opt,name=Coin,proto3" json:"Coin,omitempty"`                   // 总收藏币数量
	Stage         uint32 `protobuf:"varint,2,opt,name=Stage,proto3" json:"Stage,omitempty"`                 // 当前图鉴系统等级
	FinishedStage uint32 `protobuf:"varint,3,opt,name=FinishedStage,proto3" json:"FinishedStage,omitempty"` // 已经领取的等级
}

func (x *PBCrystalBook) Reset() {
	*x = PBCrystalBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBCrystalBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBCrystalBook) ProtoMessage() {}

func (x *PBCrystalBook) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBCrystalBook.ProtoReflect.Descriptor instead.
func (*PBCrystalBook) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{91}
}

func (x *PBCrystalBook) GetCoin() uint32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *PBCrystalBook) GetStage() uint32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *PBCrystalBook) GetFinishedStage() uint32 {
	if x != nil {
		return x.FinishedStage
	}
	return 0
}

// 词条条件
type EntryCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgID      uint32 `protobuf:"varint,1,opt,name=CfgID,proto3" json:"CfgID,omitempty"`           // 配置id
	Process    uint32 `protobuf:"varint,2,opt,name=Process,proto3" json:"Process,omitempty"`       // 条件完成进度
	Times      uint32 `protobuf:"varint,3,opt,name=Times,proto3" json:"Times,omitempty"`           // 触发次数
	UpdateTime uint64 `protobuf:"varint,4,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"` // 刷新时间
}

func (x *EntryCondition) Reset() {
	*x = EntryCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryCondition) ProtoMessage() {}

func (x *EntryCondition) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryCondition.ProtoReflect.Descriptor instead.
func (*EntryCondition) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{92}
}

func (x *EntryCondition) GetCfgID() uint32 {
	if x != nil {
		return x.CfgID
	}
	return 0
}

func (x *EntryCondition) GetProcess() uint32 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *EntryCondition) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *EntryCondition) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 单个效果参数
type EntryEffectValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []uint32 `protobuf:"varint,1,rep,packed,name=List,proto3" json:"List,omitempty"` // 参数
}

func (x *EntryEffectValue) Reset() {
	*x = EntryEffectValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryEffectValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryEffectValue) ProtoMessage() {}

func (x *EntryEffectValue) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryEffectValue.ProtoReflect.Descriptor instead.
func (*EntryEffectValue) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{93}
}

func (x *EntryEffectValue) GetList() []uint32 {
	if x != nil {
		return x.List
	}
	return nil
}

// 系列参数
type EntryEffectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object uint32              `protobuf:"varint,1,opt,name=Object,proto3" json:"Object,omitempty"` // 生效对象
	Values []*EntryEffectValue `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`  // 效果参数
}

func (x *EntryEffectData) Reset() {
	*x = EntryEffectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryEffectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryEffectData) ProtoMessage() {}

func (x *EntryEffectData) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryEffectData.ProtoReflect.Descriptor instead.
func (*EntryEffectData) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{94}
}

func (x *EntryEffectData) GetObject() uint32 {
	if x != nil {
		return x.Object
	}
	return 0
}

func (x *EntryEffectData) GetValues() []*EntryEffectValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// 词条效果
type EntryEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamsType uint32             `protobuf:"varint,1,opt,name=ParamsType,proto3" json:"ParamsType,omitempty"` // 参数类型
	Type       uint32             `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`             // 效果类型
	List       []*EntryEffectData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`              // 效果参数
}

func (x *EntryEffect) Reset() {
	*x = EntryEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryEffect) ProtoMessage() {}

func (x *EntryEffect) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryEffect.ProtoReflect.Descriptor instead.
func (*EntryEffect) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{95}
}

func (x *EntryEffect) GetParamsType() uint32 {
	if x != nil {
		return x.ParamsType
	}
	return 0
}

func (x *EntryEffect) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EntryEffect) GetList() []*EntryEffectData {
	if x != nil {
		return x.List
	}
	return nil
}

type PBPlayerCrystal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book       *PBCrystalBook    `protobuf:"bytes,1,opt,name=Book,proto3" json:"Book,omitempty"`             // 图鉴系统
	Robots     []*PBCrystalRobot `protobuf:"bytes,2,rep,name=Robots,proto3" json:"Robots,omitempty"`         // 已经解锁的机器人
	Crystals   []*PBCrystal      `protobuf:"bytes,3,rep,name=Crystals,proto3" json:"Crystals,omitempty"`     // 获取的晶核
	Conditions []*EntryCondition `protobuf:"bytes,4,rep,name=Conditions,proto3" json:"Conditions,omitempty"` // 词条条件
	Effects    []*EntryEffect    `protobuf:"bytes,5,rep,name=Effects,proto3" json:"Effects,omitempty"`       // 效果数据
}

func (x *PBPlayerCrystal) Reset() {
	*x = PBPlayerCrystal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playerStruct_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlayerCrystal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlayerCrystal) ProtoMessage() {}

func (x *PBPlayerCrystal) ProtoReflect() protoreflect.Message {
	mi := &file_playerStruct_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlayerCrystal.ProtoReflect.Descriptor instead.
func (*PBPlayerCrystal) Descriptor() ([]byte, []int) {
	return file_playerStruct_proto_rawDescGZIP(), []int{96}
}

func (x *PBPlayerCrystal) GetBook() *PBCrystalBook {
	if x != nil {
		return x.Book
	}
	return nil
}

func (x *PBPlayerCrystal) GetRobots() []*PBCrystalRobot {
	if x != nil {
		return x.Robots
	}
	return nil
}

func (x *PBPlayerCrystal) GetCrystals() []*PBCrystal {
	if x != nil {
		return x.Crystals
	}
	return nil
}

func (x *PBPlayerCrystal) GetConditions() []*EntryCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *PBPlayerCrystal) GetEffects() []*EntryEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

var File_playerStruct_proto protoreflect.FileDescriptor

var file_playerStruct_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x32, 0x0a, 0x08, 0x50, 0x42, 0x55, 0x33, 0x32, 0x55, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x08, 0x50, 0x42, 0x55, 0x33, 0x32, 0x55, 0x36, 0x34,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x50, 0x42, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x52, 0x0a, 0x0e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdf, 0x03, 0x0a, 0x0c, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x06, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50,
	0x6c, 0x61, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x50, 0x42, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x08, 0x50,
	0x42, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x50, 0x42, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x50, 0x42, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x14, 0x50,
	0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x47, 0x69, 0x66, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x47, 0x69, 0x66, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x07, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x42, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0c,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0a, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x0d,
	0x50, 0x42, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a,
	0x0b, 0x50, 0x42, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x12, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x37, 0x0a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x1a, 0x50, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x50, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x75, 0x70, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x75,
	0x70, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x16, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x65, 0x61, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x50, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x22, 0x5c, 0x0a,
	0x18, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x15, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xed, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0xef, 0x01, 0x0a, 0x0f, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x65, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x65, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x62, 0x69, 0x72, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x62, 0x69, 0x72, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x10, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x62, 0x69, 0x72, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x62, 0x69, 0x72, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4b, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xde, 0x01, 0x0a,
	0x12, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x55, 0x33,
	0x32, 0x55, 0x33, 0x32, 0x52, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x43, 0x72, 0x79, 0x73, 0x63,
	0x61, 0x6c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x72, 0x6f,
	0x70, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xef, 0x01,
	0x0a, 0x10, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x75, 0x72, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43,
	0x75, 0x72, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x6f, 0x4d,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x61,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x6f, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4c,
	0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb1, 0x01, 0x0a, 0x12, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x0e, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x64, 0x76, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x41, 0x64, 0x76, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x98, 0x02, 0x0a, 0x14, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x3e,
	0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x44,
	0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x52, 0x06, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x41, 0x0a, 0x09, 0x50, 0x42,
	0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xa4, 0x01,
	0x0a, 0x11, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x6f, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x42, 0x6f, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x42, 0x6f, 0x78, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x42, 0x6f, 0x78, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0e, 0x50, 0x42, 0x53, 0x68, 0x6f, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x46, 0x72,
	0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xc7, 0x01, 0x0a, 0x11, 0x50, 0x42, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42,
	0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x72,
	0x65, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x65,
	0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x46, 0x72,
	0x65, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x0b, 0x50,
	0x42, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x53,
	0x68, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf7, 0x02, 0x0a, 0x0d,
	0x50, 0x42, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x66, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x42, 0x75, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x4e,
	0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x41,
	0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x35, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x42, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x50, 0x42, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x4e, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x55, 0x33, 0x32, 0x55, 0x33,
	0x32, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x50, 0x42, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x12,
	0x37, 0x0a, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x09, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e,
	0x0a, 0x0f, 0x50, 0x42, 0x44, 0x72, 0x61, 0x77, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x41, 0x64, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa0,
	0x02, 0x0a, 0x0a, 0x50, 0x42, 0x44, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x72, 0x61, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44,
	0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x75, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x47, 0x75, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x75, 0x61, 0x72, 0x32, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x47, 0x75, 0x61, 0x72, 0x32, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x75, 0x61, 0x72, 0x33, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x47, 0x75, 0x61, 0x72, 0x33, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x22, 0x4a, 0x0a, 0x12, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x12, 0x34, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x44, 0x72, 0x61, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x71, 0x0a,
	0x0d, 0x50, 0x42, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x61, 0x79,
	0x22, 0xaa, 0x01, 0x0a, 0x08, 0x50, 0x42, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x57,
	0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0xcd, 0x01,
	0x0a, 0x0d, 0x50, 0x42, 0x42, 0x50, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x72, 0x61, 0x6d, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4e, 0x6f, 0x72, 0x61, 0x6d, 0x6c,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x08, 0x50, 0x42, 0x42, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x42, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x50, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x0c, 0x50, 0x42, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x52, 0x0f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x42, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x42, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x42, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x50,
	0x42, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x75, 0x61, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x50, 0x0a, 0x0a, 0x50, 0x42, 0x48, 0x6f, 0x6f, 0x6b, 0x54,
	0x65, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x16, 0x50, 0x42, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x63,
	0x68, 0x12, 0x3c, 0x0a, 0x0c, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x63,
	0x68, 0x52, 0x0c, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x7e, 0x0a, 0x0f, 0x50, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xfd, 0x01, 0x0a, 0x0e, 0x50, 0x42, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x47,
	0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x55,
	0x33, 0x32, 0x55, 0x33, 0x32, 0x52, 0x08, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x5a, 0x0a, 0x16, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x65, 0x76,
	0x65, 0x6e, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x42, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53,
	0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x03, 0x0a, 0x1a,
	0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x48, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x33,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xcb, 0x02, 0x0a, 0x17, 0x50, 0x42, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x50, 0x42, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x50, 0x42, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x55, 0x33, 0x32, 0x55, 0x33, 0x32, 0x52, 0x07, 0x42, 0x75,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x50, 0x42, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x14,
	0x50, 0x42, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x55, 0x33, 0x32, 0x55, 0x33, 0x32, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x50,
	0x42, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x42, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x4e, 0x65, 0x78,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8b, 0x03, 0x0a, 0x16, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x47, 0x72, 0x6f, 0x77, 0x52, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08,
	0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x52, 0x08, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x42, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x07,
	0x0a, 0x0e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x3a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x3a, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x50, 0x72, 0x6f, 0x66, 0x12, 0x3a,
	0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x42, 0x6f,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x78, 0x52, 0x03, 0x42, 0x6f, 0x78, 0x12, 0x34, 0x0a,
	0x04, 0x53, 0x68, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x04, 0x53,
	0x68, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x72, 0x61, 0x77, 0x52, 0x04, 0x44, 0x72, 0x61, 0x77, 0x12, 0x3a, 0x0a, 0x06, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x06, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x47, 0x65, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x65, 0x6e, 0x65, 0x52, 0x04, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x48, 0x6f,
	0x6f, 0x6b, 0x54, 0x65, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65,
	0x63, 0x68, 0x52, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x76, 0x65,
	0x6e, 0x44, 0x61, 0x79, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x43,
	0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x42,
	0x6f, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x40, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x22, 0x37, 0x0a, 0x09, 0x50, 0x42, 0x47, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x61, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x0b,
	0x50, 0x42, 0x47, 0x65, 0x6e, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x42, 0x47, 0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x0c, 0x50, 0x42, 0x47, 0x65, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x47,
	0x65, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x47, 0x65,
	0x6e, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x06, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x22,
	0x66, 0x0a, 0x12, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49,
	0x44, 0x12, 0x34, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x47, 0x65, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x07,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x15, 0x50, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x4d, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0c,
	0x50, 0x42, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x12, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb2,
	0x02, 0x0a, 0x06, 0x50, 0x42, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x7a, 0x0a, 0x0c, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x4d, 0x61, 0x69,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2e, 0x0a, 0x06, 0x50, 0x42, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x7b, 0x0a, 0x0b, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x67, 0x12, 0x30,
	0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x55, 0x33, 0x32, 0x55, 0x33, 0x32, 0x52, 0x0c,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x55, 0x0a, 0x0f,
	0x50, 0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x0b, 0x50, 0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x53, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x74, 0x61,
	0x72, 0x12, 0x39, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x43, 0x0a, 0x0d,
	0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x50, 0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0c, 0x56, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x0c, 0x56, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x50,
	0x72, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0xa5, 0x03, 0x0a, 0x11, 0x50, 0x42,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x42, 0x75, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x6f, 0x73,
	0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x48, 0x6f, 0x6f, 0x6b,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x7e, 0x0a, 0x06, 0x50, 0x42, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x53,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x53, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x74, 0x61, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x42, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53,
	0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x22, 0x44, 0x0a,
	0x0e, 0x50, 0x42, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x65, 0x72, 0x6f, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x72,
	0x6f, 0x53, 0x6e, 0x22, 0xe0, 0x02, 0x0a, 0x0c, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x65, 0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x55, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x42, 0x55, 0x33, 0x32, 0x55, 0x33, 0x32, 0x52, 0x0b, 0x55, 0x70, 0x53, 0x74, 0x61, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x6f, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x48, 0x65, 0x72, 0x6f,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x0c, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x4d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x50, 0x42, 0x41, 0x64, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x44, 0x6f, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x50, 0x42, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x42, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x44, 0x6f, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0xb3, 0x03,
	0x0a, 0x0c, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x03, 0x42, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x67, 0x52, 0x03, 0x42, 0x61,
	0x67, 0x12, 0x3d, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x48, 0x65,
	0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x65, 0x72, 0x6f, 0x52, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x4d, 0x61,
	0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x07, 0x43, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x07, 0x43, 0x72, 0x79, 0x73,
	0x74, 0x61, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x50, 0x42, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x07, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x41,
	0x0a, 0x10, 0x50, 0x42, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x42, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x22, 0x71, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x09, 0x50, 0x42, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x12, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x07, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x07,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x48, 0x65, 0x72, 0x6f, 0x52,
	0x08, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x50, 0x42,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x42, 0x50, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x50, 0x42, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x0d, 0x50, 0x42, 0x43, 0x72,
	0x79, 0x73, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x50, 0x42, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x6f, 0x6c,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x09, 0x50, 0x42, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x74, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x5f, 0x0a, 0x0d, 0x50, 0x42, 0x43, 0x72, 0x79, 0x73,
	0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x26, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x0b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x50, 0x42, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x52, 0x06, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x42, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x08, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x73,
	0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33,
	0x0a, 0x07, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_playerStruct_proto_rawDescOnce sync.Once
	file_playerStruct_proto_rawDescData = file_playerStruct_proto_rawDesc
)

func file_playerStruct_proto_rawDescGZIP() []byte {
	file_playerStruct_proto_rawDescOnce.Do(func() {
		file_playerStruct_proto_rawDescData = protoimpl.X.CompressGZIP(file_playerStruct_proto_rawDescData)
	})
	return file_playerStruct_proto_rawDescData
}

var file_playerStruct_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var file_playerStruct_proto_goTypes = []interface{}{
	(*PBU32U32)(nil),                   // 0: playerStruct.PBU32U32
	(*PBU32U64)(nil),                   // 1: playerStruct.PBU32U64
	(*PBStringInt64)(nil),              // 2: playerStruct.PBStringInt64
	(*PBPlayerExpend)(nil),             // 3: playerStruct.PBPlayerExpend
	(*PBPlayerBaseDisplay)(nil),        // 4: playerStruct.PBPlayerBaseDisplay
	(*PBPlayerBase)(nil),               // 5: playerStruct.PBPlayerBase
	(*PBPlayerGiftCode)(nil),           // 6: playerStruct.PBPlayerGiftCode
	(*PBAvatar)(nil),                   // 7: playerStruct.PBAvatar
	(*PBAvatarFrame)(nil),              // 8: playerStruct.PBAvatarFrame
	(*PBAdvertInfo)(nil),               // 9: playerStruct.PBAdvertInfo
	(*PBPlayerSystemCommon)(nil),       // 10: playerStruct.PBPlayerSystemCommon
	(*PBAchieveInfo)(nil),              // 11: playerStruct.PBAchieveInfo
	(*PBDailyTask)(nil),                // 12: playerStruct.PBDailyTask
	(*PBPlayerSystemTask)(nil),         // 13: playerStruct.PBPlayerSystemTask
	(*PBPlayerSystemProfPartInfo)(nil), // 14: playerStruct.PBPlayerSystemProfPartInfo
	(*PBPlayerSystemProfInfo)(nil),     // 15: playerStruct.PBPlayerSystemProfInfo
	(*PBPlayerSystemProfession)(nil),   // 16: playerStruct.PBPlayerSystemProfession
	(*BattleKillMonsterInfo)(nil),      // 17: playerStruct.BattleKillMonsterInfo
	(*BattleInfo)(nil),                 // 18: playerStruct.BattleInfo
	(*PBBattleMapInfo)(nil),            // 19: playerStruct.PBBattleMapInfo
	(*PBBattleSchedule)(nil),           // 20: playerStruct.PBBattleSchedule
	(*PBBattleClientData)(nil),         // 21: playerStruct.PBBattleClientData
	(*PBBattleHookInfo)(nil),           // 22: playerStruct.PBBattleHookInfo
	(*PBBattleNormalInfo)(nil),         // 23: playerStruct.PBBattleNormalInfo
	(*PBBattleRelive)(nil),             // 24: playerStruct.PBBattleRelive
	(*PBPlayerSystemBattle)(nil),       // 25: playerStruct.PBPlayerSystemBattle
	(*PBBoxInfo)(nil),                  // 26: playerStruct.PBBoxInfo
	(*PBPlayerSystemBox)(nil),          // 27: playerStruct.PBPlayerSystemBox
	(*PBShopGoodInfo)(nil),             // 28: playerStruct.PBShopGoodInfo
	(*PBShopRefreshInfo)(nil),          // 29: playerStruct.PBShopRefreshInfo
	(*PBBlackShop)(nil),                // 30: playerStruct.PBBlackShop
	(*PBShopGoodCfg)(nil),              // 31: playerStruct.PBShopGoodCfg
	(*PBShopInfo)(nil),                 // 32: playerStruct.PBShopInfo
	(*PBPlayerSystemShop)(nil),         // 33: playerStruct.PBPlayerSystemShop
	(*PBDrawPrizeInfo)(nil),            // 34: playerStruct.PBDrawPrizeInfo
	(*PBDrawInfo)(nil),                 // 35: playerStruct.PBDrawInfo
	(*PBPlayerSystemDraw)(nil),         // 36: playerStruct.PBPlayerSystemDraw
	(*PBFirstCharge)(nil),              // 37: playerStruct.PBFirstCharge
	(*PBCharge)(nil),                   // 38: playerStruct.PBCharge
	(*PBBPStageInfo)(nil),              // 39: playerStruct.PBBPStageInfo
	(*PBBPInfo)(nil),                   // 40: playerStruct.PBBPInfo
	(*PBChargeCard)(nil),               // 41: playerStruct.PBChargeCard
	(*PBPlayerSystemCharge)(nil),       // 42: playerStruct.PBPlayerSystemCharge
	(*PBChargeBingchuanOrder)(nil),     // 43: playerStruct.PBChargeBingchuanOrder
	(*PBHookTech)(nil),                 // 44: playerStruct.PBHookTech
	(*PBPlayerSystemHookTech)(nil),     // 45: playerStruct.PBPlayerSystemHookTech
	(*PBTaskStageInfo)(nil),            // 46: playerStruct.PBTaskStageInfo
	(*PBSevenDayInfo)(nil),             // 47: playerStruct.PBSevenDayInfo
	(*PBPlayerSystemSevenDay)(nil),     // 48: playerStruct.PBPlayerSystemSevenDay
	(*PBPlayerSystemChampionship)(nil), // 49: playerStruct.PBPlayerSystemChampionship
	(*PBPlayerSystemWorldBoss)(nil),    // 50: playerStruct.PBPlayerSystemWorldBoss
	(*PBPlayerActivityInfo)(nil),       // 51: playerStruct.PBPlayerActivityInfo
	(*PBActivityGrowRoadInfo)(nil),     // 52: playerStruct.PBActivityGrowRoadInfo
	(*PBActivityChargeGift)(nil),       // 53: playerStruct.PBActivityChargeGift
	(*PBActivityAdventure)(nil),        // 54: playerStruct.PBActivityAdventure
	(*PBOpenServerGiftInfo)(nil),       // 55: playerStruct.PBOpenServerGiftInfo
	(*PBActivityOpenServerGift)(nil),   // 56: playerStruct.PBActivityOpenServerGift
	(*PBPlayerSystemActivity)(nil),     // 57: playerStruct.PBPlayerSystemActivity
	(*PBPlayerSystem)(nil),             // 58: playerStruct.PBPlayerSystem
	(*PBGeneTag)(nil),                  // 59: playerStruct.PBGeneTag
	(*PBGeneRobot)(nil),                // 60: playerStruct.PBGeneRobot
	(*PBGeneScheme)(nil),               // 61: playerStruct.PBGeneScheme
	(*PBPlayerSystemGene)(nil),         // 62: playerStruct.PBPlayerSystemGene
	(*PBPlayerSystemOffline)(nil),      // 63: playerStruct.PBPlayerSystemOffline
	(*PBClientData)(nil),               // 64: playerStruct.PBClientData
	(*PBPlayerClientData)(nil),         // 65: playerStruct.PBPlayerClientData
	(*PBMail)(nil),                     // 66: playerStruct.PBMail
	(*PBPlayerMail)(nil),               // 67: playerStruct.PBPlayerMail
	(*PBItem)(nil),                     // 68: playerStruct.PBItem
	(*PBPlayerBag)(nil),                // 69: playerStruct.PBPlayerBag
	(*PBEquipmentProp)(nil),            // 70: playerStruct.PBEquipmentProp
	(*PBEquipment)(nil),                // 71: playerStruct.PBEquipment
	(*PBPlayerEquipment)(nil),          // 72: playerStruct.PBPlayerEquipment
	(*PBHero)(nil),                     // 73: playerStruct.PBHero
	(*PBHeroBook)(nil),                 // 74: playerStruct.PBHeroBook
	(*PBHeroTeamList)(nil),             // 75: playerStruct.PBHeroTeamList
	(*PBPlayerHero)(nil),               // 76: playerStruct.PBPlayerHero
	(*PBAddItemData)(nil),              // 77: playerStruct.PBAddItemData
	(*PBOfflineData)(nil),              // 78: playerStruct.PBOfflineData
	(*PBPlayerData)(nil),               // 79: playerStruct.PBPlayerData
	(*PBChatMsgInfo)(nil),              // 80: playerStruct.PBChatMsgInfo
	(*PBAllChatMsgInfo)(nil),           // 81: playerStruct.PBAllChatMsgInfo
	(*RankInfo)(nil),                   // 82: playerStruct.RankInfo
	(*PBAddItem)(nil),                  // 83: playerStruct.PBAddItem
	(*PBPlayerBattleData)(nil),         // 84: playerStruct.PBPlayerBattleData
	(*PBNotice)(nil),                   // 85: playerStruct.PBNotice
	(*PBPropInfo)(nil),                 // 86: playerStruct.PBPropInfo
	(*PBJsonInfo)(nil),                 // 87: playerStruct.PBJsonInfo
	(*PBCrystalProp)(nil),              // 88: playerStruct.PBCrystalProp
	(*PBCrystalRobot)(nil),             // 89: playerStruct.PBCrystalRobot
	(*PBCrystal)(nil),                  // 90: playerStruct.PBCrystal
	(*PBCrystalBook)(nil),              // 91: playerStruct.PBCrystalBook
	(*EntryCondition)(nil),             // 92: playerStruct.EntryCondition
	(*EntryEffectValue)(nil),           // 93: playerStruct.EntryEffectValue
	(*EntryEffectData)(nil),            // 94: playerStruct.EntryEffectData
	(*EntryEffect)(nil),                // 95: playerStruct.EntryEffect
	(*PBPlayerCrystal)(nil),            // 96: playerStruct.PBPlayerCrystal
	(LoginState)(0),                    // 97: common.LoginState
	(EmBattleType)(0),                  // 98: common.EmBattleType
	(EmTaskState)(0),                   // 99: common.EmTaskState
	(EmMailState)(0),                   // 100: common.EmMailState
	(EmDoingType)(0),                   // 101: common.EmDoingType
	(EmPlayerOfflineType)(0),           // 102: common.EmPlayerOfflineType
}
var file_playerStruct_proto_depIdxs = []int32{
	4,   // 0: playerStruct.PBPlayerBase.Display:type_name -> playerStruct.PBPlayerBaseDisplay
	97,  // 1: playerStruct.PBPlayerBase.LoginState:type_name -> common.LoginState
	3,   // 2: playerStruct.PBPlayerBase.Expend:type_name -> playerStruct.PBPlayerExpend
	6,   // 3: playerStruct.PBPlayerSystemCommon.GiftCode:type_name -> playerStruct.PBPlayerGiftCode
	7,   // 4: playerStruct.PBPlayerSystemCommon.Avatars:type_name -> playerStruct.PBAvatar
	8,   // 5: playerStruct.PBPlayerSystemCommon.AvatarFrames:type_name -> playerStruct.PBAvatarFrame
	9,   // 6: playerStruct.PBPlayerSystemCommon.AdvertList:type_name -> playerStruct.PBAdvertInfo
	46,  // 7: playerStruct.PBDailyTask.TaskList:type_name -> playerStruct.PBTaskStageInfo
	46,  // 8: playerStruct.PBPlayerSystemTask.MainTask:type_name -> playerStruct.PBTaskStageInfo
	12,  // 9: playerStruct.PBPlayerSystemTask.DailyTask:type_name -> playerStruct.PBDailyTask
	11,  // 10: playerStruct.PBPlayerSystemTask.AchieveList:type_name -> playerStruct.PBAchieveInfo
	14,  // 11: playerStruct.PBPlayerSystemProfInfo.PartList:type_name -> playerStruct.PBPlayerSystemProfPartInfo
	15,  // 12: playerStruct.PBPlayerSystemProfession.ProfList:type_name -> playerStruct.PBPlayerSystemProfInfo
	98,  // 13: playerStruct.BattleInfo.BattleType:type_name -> common.EmBattleType
	17,  // 14: playerStruct.BattleInfo.MonsterInfo:type_name -> playerStruct.BattleKillMonsterInfo
	21,  // 15: playerStruct.BattleInfo.ClientData:type_name -> playerStruct.PBBattleClientData
	21,  // 16: playerStruct.PBBattleSchedule.ClientData:type_name -> playerStruct.PBBattleClientData
	17,  // 17: playerStruct.PBBattleSchedule.MonsterInfo:type_name -> playerStruct.BattleKillMonsterInfo
	0,   // 18: playerStruct.PBBattleClientData.HeroBattleLevel:type_name -> playerStruct.PBU32U32
	19,  // 19: playerStruct.PBBattleHookInfo.MapInfo:type_name -> playerStruct.PBBattleMapInfo
	19,  // 20: playerStruct.PBBattleNormalInfo.MapInfo:type_name -> playerStruct.PBBattleMapInfo
	23,  // 21: playerStruct.PBPlayerSystemBattle.BattleNormal:type_name -> playerStruct.PBBattleNormalInfo
	22,  // 22: playerStruct.PBPlayerSystemBattle.BattleHook:type_name -> playerStruct.PBBattleHookInfo
	20,  // 23: playerStruct.PBPlayerSystemBattle.Battlechedule:type_name -> playerStruct.PBBattleSchedule
	24,  // 24: playerStruct.PBPlayerSystemBattle.Relive:type_name -> playerStruct.PBBattleRelive
	26,  // 25: playerStruct.PBPlayerSystemBox.Boxs:type_name -> playerStruct.PBBoxInfo
	71,  // 26: playerStruct.PBShopGoodInfo.Equipment:type_name -> playerStruct.PBEquipment
	28,  // 27: playerStruct.PBBlackShop.Items:type_name -> playerStruct.PBShopGoodInfo
	29,  // 28: playerStruct.PBBlackShop.RefreshInfo:type_name -> playerStruct.PBShopRefreshInfo
	83,  // 29: playerStruct.PBShopGoodCfg.NeedItem:type_name -> playerStruct.PBAddItem
	77,  // 30: playerStruct.PBShopGoodCfg.AddItem:type_name -> playerStruct.PBAddItemData
	0,   // 31: playerStruct.PBShopInfo.Items:type_name -> playerStruct.PBU32U32
	30,  // 32: playerStruct.PBPlayerSystemShop.BlackShop:type_name -> playerStruct.PBBlackShop
	32,  // 33: playerStruct.PBPlayerSystemShop.ShopList:type_name -> playerStruct.PBShopInfo
	83,  // 34: playerStruct.PBDrawPrizeInfo.ItemList:type_name -> playerStruct.PBAddItem
	35,  // 35: playerStruct.PBPlayerSystemDraw.DrawList:type_name -> playerStruct.PBDrawInfo
	39,  // 36: playerStruct.PBBPInfo.StageList:type_name -> playerStruct.PBBPStageInfo
	38,  // 37: playerStruct.PBPlayerSystemCharge.Charge:type_name -> playerStruct.PBCharge
	37,  // 38: playerStruct.PBPlayerSystemCharge.FirstChargeList:type_name -> playerStruct.PBFirstCharge
	40,  // 39: playerStruct.PBPlayerSystemCharge.BPList:type_name -> playerStruct.PBBPInfo
	41,  // 40: playerStruct.PBPlayerSystemCharge.CardList:type_name -> playerStruct.PBChargeCard
	44,  // 41: playerStruct.PBPlayerSystemHookTech.HookTechList:type_name -> playerStruct.PBHookTech
	99,  // 42: playerStruct.PBTaskStageInfo.State:type_name -> common.EmTaskState
	46,  // 43: playerStruct.PBSevenDayInfo.TaskList:type_name -> playerStruct.PBTaskStageInfo
	0,   // 44: playerStruct.PBSevenDayInfo.GiftList:type_name -> playerStruct.PBU32U32
	47,  // 45: playerStruct.PBPlayerSystemSevenDay.SevenDayList:type_name -> playerStruct.PBSevenDayInfo
	46,  // 46: playerStruct.PBPlayerSystemChampionship.Level:type_name -> playerStruct.PBTaskStageInfo
	46,  // 47: playerStruct.PBPlayerSystemChampionship.Battle:type_name -> playerStruct.PBTaskStageInfo
	46,  // 48: playerStruct.PBPlayerSystemChampionship.Damage:type_name -> playerStruct.PBTaskStageInfo
	46,  // 49: playerStruct.PBPlayerSystemChampionship.Power:type_name -> playerStruct.PBTaskStageInfo
	46,  // 50: playerStruct.PBActivityGrowRoadInfo.TaskList:type_name -> playerStruct.PBTaskStageInfo
	0,   // 51: playerStruct.PBActivityChargeGift.BuyList:type_name -> playerStruct.PBU32U32
	0,   // 52: playerStruct.PBOpenServerGiftInfo.StageList:type_name -> playerStruct.PBU32U32
	55,  // 53: playerStruct.PBActivityOpenServerGift.GiftList:type_name -> playerStruct.PBOpenServerGiftInfo
	51,  // 54: playerStruct.PBPlayerSystemActivity.ActivityList:type_name -> playerStruct.PBPlayerActivityInfo
	52,  // 55: playerStruct.PBPlayerSystemActivity.GrowRoadList:type_name -> playerStruct.PBActivityGrowRoadInfo
	53,  // 56: playerStruct.PBPlayerSystemActivity.GiftList:type_name -> playerStruct.PBActivityChargeGift
	54,  // 57: playerStruct.PBPlayerSystemActivity.AdventureList:type_name -> playerStruct.PBActivityAdventure
	56,  // 58: playerStruct.PBPlayerSystemActivity.OpenServerGiftList:type_name -> playerStruct.PBActivityOpenServerGift
	10,  // 59: playerStruct.PBPlayerSystem.Common:type_name -> playerStruct.PBPlayerSystemCommon
	13,  // 60: playerStruct.PBPlayerSystem.Task:type_name -> playerStruct.PBPlayerSystemTask
	16,  // 61: playerStruct.PBPlayerSystem.Prof:type_name -> playerStruct.PBPlayerSystemProfession
	25,  // 62: playerStruct.PBPlayerSystem.Battle:type_name -> playerStruct.PBPlayerSystemBattle
	27,  // 63: playerStruct.PBPlayerSystem.Box:type_name -> playerStruct.PBPlayerSystemBox
	33,  // 64: playerStruct.PBPlayerSystem.Shop:type_name -> playerStruct.PBPlayerSystemShop
	36,  // 65: playerStruct.PBPlayerSystem.Draw:type_name -> playerStruct.PBPlayerSystemDraw
	42,  // 66: playerStruct.PBPlayerSystem.Charge:type_name -> playerStruct.PBPlayerSystemCharge
	62,  // 67: playerStruct.PBPlayerSystem.Gene:type_name -> playerStruct.PBPlayerSystemGene
	63,  // 68: playerStruct.PBPlayerSystem.Offline:type_name -> playerStruct.PBPlayerSystemOffline
	45,  // 69: playerStruct.PBPlayerSystem.HookTech:type_name -> playerStruct.PBPlayerSystemHookTech
	48,  // 70: playerStruct.PBPlayerSystem.SevenDay:type_name -> playerStruct.PBPlayerSystemSevenDay
	50,  // 71: playerStruct.PBPlayerSystem.WorldBoss:type_name -> playerStruct.PBPlayerSystemWorldBoss
	49,  // 72: playerStruct.PBPlayerSystem.Championship:type_name -> playerStruct.PBPlayerSystemChampionship
	57,  // 73: playerStruct.PBPlayerSystem.Activity:type_name -> playerStruct.PBPlayerSystemActivity
	59,  // 74: playerStruct.PBGeneRobot.Tags:type_name -> playerStruct.PBGeneTag
	59,  // 75: playerStruct.PBGeneScheme.Tags:type_name -> playerStruct.PBGeneTag
	60,  // 76: playerStruct.PBGeneScheme.Robots:type_name -> playerStruct.PBGeneRobot
	61,  // 77: playerStruct.PBPlayerSystemGene.Schemes:type_name -> playerStruct.PBGeneScheme
	77,  // 78: playerStruct.PBPlayerSystemOffline.Rewards:type_name -> playerStruct.PBAddItemData
	64,  // 79: playerStruct.PBPlayerClientData.ClientDataList:type_name -> playerStruct.PBClientData
	100, // 80: playerStruct.PBMail.State:type_name -> common.EmMailState
	77,  // 81: playerStruct.PBMail.Item:type_name -> playerStruct.PBAddItemData
	66,  // 82: playerStruct.PBPlayerMail.MailList:type_name -> playerStruct.PBMail
	68,  // 83: playerStruct.PBPlayerBag.ItemList:type_name -> playerStruct.PBItem
	0,   // 84: playerStruct.PBPlayerBag.DailyBuyItem:type_name -> playerStruct.PBU32U32
	70,  // 85: playerStruct.PBEquipment.MainProp:type_name -> playerStruct.PBEquipmentProp
	70,  // 86: playerStruct.PBEquipment.MinorPropList:type_name -> playerStruct.PBEquipmentProp
	70,  // 87: playerStruct.PBEquipment.VicePropList:type_name -> playerStruct.PBEquipmentProp
	70,  // 88: playerStruct.PBEquipment.LinkPropList:type_name -> playerStruct.PBEquipmentProp
	71,  // 89: playerStruct.PBPlayerEquipment.equipmentList:type_name -> playerStruct.PBEquipment
	71,  // 90: playerStruct.PBPlayerEquipment.HookEquipmentList:type_name -> playerStruct.PBEquipment
	73,  // 91: playerStruct.PBPlayerHero.HeroList:type_name -> playerStruct.PBHero
	75,  // 92: playerStruct.PBPlayerHero.TeamList:type_name -> playerStruct.PBHeroTeamList
	0,   // 93: playerStruct.PBPlayerHero.UpStarCount:type_name -> playerStruct.PBU32U32
	74,  // 94: playerStruct.PBPlayerHero.HeroBookList:type_name -> playerStruct.PBHeroBook
	101, // 95: playerStruct.PBAddItemData.DoingType:type_name -> common.EmDoingType
	71,  // 96: playerStruct.PBAddItemData.Equipment:type_name -> playerStruct.PBEquipment
	102, // 97: playerStruct.PBOfflineData.OfflineType:type_name -> common.EmPlayerOfflineType
	66,  // 98: playerStruct.PBOfflineData.Mail:type_name -> playerStruct.PBMail
	77,  // 99: playerStruct.PBOfflineData.Item:type_name -> playerStruct.PBAddItemData
	101, // 100: playerStruct.PBOfflineData.DoingType:type_name -> common.EmDoingType
	5,   // 101: playerStruct.PBPlayerData.Base:type_name -> playerStruct.PBPlayerBase
	58,  // 102: playerStruct.PBPlayerData.System:type_name -> playerStruct.PBPlayerSystem
	69,  // 103: playerStruct.PBPlayerData.Bag:type_name -> playerStruct.PBPlayerBag
	72,  // 104: playerStruct.PBPlayerData.Equipment:type_name -> playerStruct.PBPlayerEquipment
	65,  // 105: playerStruct.PBPlayerData.Client:type_name -> playerStruct.PBPlayerClientData
	76,  // 106: playerStruct.PBPlayerData.Hero:type_name -> playerStruct.PBPlayerHero
	67,  // 107: playerStruct.PBPlayerData.Mail:type_name -> playerStruct.PBPlayerMail
	96,  // 108: playerStruct.PBPlayerData.Crystal:type_name -> playerStruct.PBPlayerCrystal
	4,   // 109: playerStruct.PBChatMsgInfo.Display:type_name -> playerStruct.PBPlayerBaseDisplay
	80,  // 110: playerStruct.PBAllChatMsgInfo.Msg:type_name -> playerStruct.PBChatMsgInfo
	4,   // 111: playerStruct.RankInfo.Display:type_name -> playerStruct.PBPlayerBaseDisplay
	4,   // 112: playerStruct.PBPlayerBattleData.Display:type_name -> playerStruct.PBPlayerBaseDisplay
	73,  // 113: playerStruct.PBPlayerBattleData.HeroList:type_name -> playerStruct.PBHero
	21,  // 114: playerStruct.PBPlayerBattleData.ClientData:type_name -> playerStruct.PBBattleClientData
	93,  // 115: playerStruct.EntryEffectData.Values:type_name -> playerStruct.EntryEffectValue
	94,  // 116: playerStruct.EntryEffect.List:type_name -> playerStruct.EntryEffectData
	91,  // 117: playerStruct.PBPlayerCrystal.Book:type_name -> playerStruct.PBCrystalBook
	89,  // 118: playerStruct.PBPlayerCrystal.Robots:type_name -> playerStruct.PBCrystalRobot
	90,  // 119: playerStruct.PBPlayerCrystal.Crystals:type_name -> playerStruct.PBCrystal
	92,  // 120: playerStruct.PBPlayerCrystal.Conditions:type_name -> playerStruct.EntryCondition
	95,  // 121: playerStruct.PBPlayerCrystal.Effects:type_name -> playerStruct.EntryEffect
	122, // [122:122] is the sub-list for method output_type
	122, // [122:122] is the sub-list for method input_type
	122, // [122:122] is the sub-list for extension type_name
	122, // [122:122] is the sub-list for extension extendee
	0,   // [0:122] is the sub-list for field type_name
}

func init() { file_playerStruct_proto_init() }
func file_playerStruct_proto_init() {
	if File_playerStruct_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_playerStruct_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBU32U32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBU32U64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBStringInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerExpend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerBaseDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerGiftCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAvatarFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAdvertInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAchieveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBDailyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemProfPartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemProfInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemProfession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleKillMonsterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBattleMapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBattleSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBattleClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBattleHookInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBattleNormalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBattleRelive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBoxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBShopGoodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBShopRefreshInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBlackShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBShopGoodCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBShopInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBDrawPrizeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBDrawInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBFirstCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBPStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBBPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBChargeCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBChargeBingchuanOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBHookTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemHookTech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBTaskStageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBSevenDayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemSevenDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemChampionship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemWorldBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBActivityGrowRoadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBActivityChargeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBActivityAdventure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBOpenServerGiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBActivityOpenServerGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBGeneTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBGeneRobot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBGeneScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemGene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerSystemOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBEquipmentProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBHeroBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBHeroTeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAddItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBOfflineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBChatMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAllChatMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBAddItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBJsonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBCrystalProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBCrystalRobot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBCrystal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBCrystalBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryEffectValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryEffectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playerStruct_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlayerCrystal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_playerStruct_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_playerStruct_proto_goTypes,
		DependencyIndexes: file_playerStruct_proto_depIdxs,
		MessageInfos:      file_playerStruct_proto_msgTypes,
	}.Build()
	File_playerStruct_proto = out.File
	file_playerStruct_proto_rawDesc = nil
	file_playerStruct_proto_goTypes = nil
	file_playerStruct_proto_depIdxs = nil
}
