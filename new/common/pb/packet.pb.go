// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: packet.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -------框架核心协议，请勿修改-------
// 节点类型
type NodeType int32

const (
	NodeType_Begin NodeType = 0 // 节点类型-Begin
	NodeType_Gate  NodeType = 1 // 节点类型-Gate
	NodeType_Room  NodeType = 2 // 节点类型-Room
	NodeType_Match NodeType = 3 // 节点类型-Match
	NodeType_End   NodeType = 4 // 节点类型-End
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "Begin",
		1: "Gate",
		2: "Room",
		3: "Match",
		4: "End",
	}
	NodeType_value = map[string]int32{
		"Begin": 0,
		"Gate":  1,
		"Room":  2,
		"Match": 3,
		"End":   4,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_packet_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{0}
}

// 发送类型
type SendType int32

const (
	SendType_POINT     SendType = 0 // 发送类型-点对点
	SendType_BROADCAST SendType = 1 // 发送类型-广播
	SendType_RPC       SendType = 2 // 发送类型-RPC
)

// Enum value maps for SendType.
var (
	SendType_name = map[int32]string{
		0: "POINT",
		1: "BROADCAST",
		2: "RPC",
	}
	SendType_value = map[string]int32{
		"POINT":     0,
		"BROADCAST": 1,
		"RPC":       2,
	}
)

func (x SendType) Enum() *SendType {
	p := new(SendType)
	*p = x
	return p
}

func (x SendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendType) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_proto_enumTypes[1].Descriptor()
}

func (SendType) Type() protoreflect.EnumType {
	return &file_packet_proto_enumTypes[1]
}

func (x SendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendType.Descriptor instead.
func (SendType) EnumDescriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{1}
}

// id类型
type IdType int32

const (
	IdType_UID     IdType = 0
	IdType_ROOM_ID IdType = 1
)

// Enum value maps for IdType.
var (
	IdType_name = map[int32]string{
		0: "UID",
		1: "ROOM_ID",
	}
	IdType_value = map[string]int32{
		"UID":     0,
		"ROOM_ID": 1,
	}
)

func (x IdType) Enum() *IdType {
	p := new(IdType)
	*p = x
	return p
}

func (x IdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdType) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_proto_enumTypes[2].Descriptor()
}

func (IdType) Type() protoreflect.EnumType {
	return &file_packet_proto_enumTypes[2]
}

func (x IdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdType.Descriptor instead.
func (IdType) EnumDescriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{2}
}

// 节点信息
type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                      // 节点名称
	Addr          string                 `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`                      // 节点地址
	Type          NodeType               `protobuf:"varint,3,opt,name=Type,proto3,enum=poker.NodeType" json:"Type,omitempty"` // 节点类型
	Id            int32                  `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`                         // 节点ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_packet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Node) GetType() NodeType {
	if x != nil {
		return x.Type
	}
	return NodeType_Begin
}

func (x *Node) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 内网包协议
type Packet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *Head                  `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`     // 协议头
	Router        *Router                `protobuf:"bytes,2,opt,name=Router,proto3" json:"Router,omitempty"` // 路由信息
	Body          []byte                 `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`     // 消息体
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_packet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{1}
}

func (x *Packet) GetHead() *Head {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *Packet) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *Packet) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// 协议头
type Head struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SendType      SendType               `protobuf:"varint,1,opt,name=SendType,proto3,enum=poker.SendType" json:"SendType,omitempty"`       // 消息发送类型
	SrcNodeType   NodeType               `protobuf:"varint,2,opt,name=SrcNodeType,proto3,enum=poker.NodeType" json:"SrcNodeType,omitempty"` // 消息来源节点类型
	SrcNodeId     int32                  `protobuf:"varint,3,opt,name=SrcNodeId,proto3" json:"SrcNodeId,omitempty"`                         // 消息来源节点ID
	DstNodeType   NodeType               `protobuf:"varint,4,opt,name=DstNodeType,proto3,enum=poker.NodeType" json:"DstNodeType,omitempty"` // 消息目的节点类型
	DstNodeId     int32                  `protobuf:"varint,5,opt,name=DstNodeId,proto3" json:"DstNodeId,omitempty"`                         // 消息目的节点ID
	IdType        IdType                 `protobuf:"varint,6,opt,name=IdType,proto3,enum=poker.IdType" json:"IdType,omitempty"`             // id类型
	Id            uint64                 `protobuf:"varint,7,opt,name=Id,proto3" json:"Id,omitempty"`                                       // 消息ID
	RouteId       uint64                 `protobuf:"varint,8,opt,name=RouteId,proto3" json:"RouteId,omitempty"`                             // 路由ID
	Seq           uint32                 `protobuf:"varint,9,opt,name=Seq,proto3" json:"Seq,omitempty"`                                     // 消息序列号
	Cmd           uint32                 `protobuf:"varint,10,opt,name=Cmd,proto3" json:"Cmd,omitempty"`                                    // 消息命令
	ActorName     string                 `protobuf:"bytes,11,opt,name=ActorName,proto3" json:"ActorName,omitempty"`                         // 消息来源Actor名称
	FuncName      string                 `protobuf:"bytes,12,opt,name=FuncName,proto3" json:"FuncName,omitempty"`                           // 消息来源Actor函数名称
	Reply         string                 `protobuf:"bytes,13,opt,name=Reply,proto3" json:"Reply,omitempty"`                                 // 消息回复Actor名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Head) Reset() {
	*x = Head{}
	mi := &file_packet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{2}
}

func (x *Head) GetSendType() SendType {
	if x != nil {
		return x.SendType
	}
	return SendType_POINT
}

func (x *Head) GetSrcNodeType() NodeType {
	if x != nil {
		return x.SrcNodeType
	}
	return NodeType_Begin
}

func (x *Head) GetSrcNodeId() int32 {
	if x != nil {
		return x.SrcNodeId
	}
	return 0
}

func (x *Head) GetDstNodeType() NodeType {
	if x != nil {
		return x.DstNodeType
	}
	return NodeType_Begin
}

func (x *Head) GetDstNodeId() int32 {
	if x != nil {
		return x.DstNodeId
	}
	return 0
}

func (x *Head) GetIdType() IdType {
	if x != nil {
		return x.IdType
	}
	return IdType_UID
}

func (x *Head) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Head) GetRouteId() uint64 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *Head) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Head) GetCmd() uint32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *Head) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *Head) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *Head) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

// 玩家路由信息
type Router struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gate          int32                  `protobuf:"varint,1,opt,name=Gate,proto3" json:"Gate,omitempty"`   // 网关服务
	Room          int32                  `protobuf:"varint,2,opt,name=Room,proto3" json:"Room,omitempty"`   // 房间服务
	Match         int32                  `protobuf:"varint,3,opt,name=Match,proto3" json:"Match,omitempty"` // 匹配服务
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Router) Reset() {
	*x = Router{}
	mi := &file_packet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{3}
}

func (x *Router) GetGate() int32 {
	if x != nil {
		return x.Gate
	}
	return 0
}

func (x *Router) GetRoom() int32 {
	if x != nil {
		return x.Room
	}
	return 0
}

func (x *Router) GetMatch() int32 {
	if x != nil {
		return x.Match
	}
	return 0
}

// 应答协议头
type RspHead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"` // 错误码
	Msg           string                 `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`    // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RspHead) Reset() {
	*x = RspHead{}
	mi := &file_packet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RspHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspHead) ProtoMessage() {}

func (x *RspHead) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspHead.ProtoReflect.Descriptor instead.
func (*RspHead) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{4}
}

func (x *RspHead) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RspHead) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 登录协议
type GateLoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=SessionId,proto3" json:"SessionId,omitempty"` // 会话ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GateLoginRequest) Reset() {
	*x = GateLoginRequest{}
	mi := &file_packet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GateLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateLoginRequest) ProtoMessage() {}

func (x *GateLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateLoginRequest.ProtoReflect.Descriptor instead.
func (*GateLoginRequest) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5}
}

func (x *GateLoginRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GateLoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"` // 协议头
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GateLoginResponse) Reset() {
	*x = GateLoginResponse{}
	mi := &file_packet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GateLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateLoginResponse) ProtoMessage() {}

func (x *GateLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateLoginResponse.ProtoReflect.Descriptor instead.
func (*GateLoginResponse) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{6}
}

func (x *GateLoginResponse) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

type GateHeartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Utc           int64                  `protobuf:"varint,1,opt,name=Utc,proto3" json:"Utc,omitempty"`             // UTC时区
	BeginTime     int64                  `protobuf:"varint,2,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"` // 请求时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GateHeartRequest) Reset() {
	*x = GateHeartRequest{}
	mi := &file_packet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GateHeartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateHeartRequest) ProtoMessage() {}

func (x *GateHeartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateHeartRequest.ProtoReflect.Descriptor instead.
func (*GateHeartRequest) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{7}
}

func (x *GateHeartRequest) GetUtc() int64 {
	if x != nil {
		return x.Utc
	}
	return 0
}

func (x *GateHeartRequest) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

type GateHeartResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`            // 协议头
	Utc           int64                  `protobuf:"varint,2,opt,name=Utc,proto3" json:"Utc,omitempty"`             // UTC时区
	BeginTime     int64                  `protobuf:"varint,3,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"` // 请求时间
	EndTime       int64                  `protobuf:"varint,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`     // 响应时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GateHeartResponse) Reset() {
	*x = GateHeartResponse{}
	mi := &file_packet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GateHeartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateHeartResponse) ProtoMessage() {}

func (x *GateHeartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateHeartResponse.ProtoReflect.Descriptor instead.
func (*GateHeartResponse) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{8}
}

func (x *GateHeartResponse) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *GateHeartResponse) GetUtc() int64 {
	if x != nil {
		return x.Utc
	}
	return 0
}

func (x *GateHeartResponse) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *GateHeartResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

var File_packet_proto protoreflect.FileDescriptor

var file_packet_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x06, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x9a, 0x03, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x72,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x72, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x72,
	0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x44, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x44,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x71,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x53, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x43,
	0x6d, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43, 0x6d, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x46, 0x0a,
	0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x47, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52,
	0x6f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x2f, 0x0a, 0x07, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x30, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x48, 0x65, 0x61,
	0x64, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x55, 0x74, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x55, 0x74,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x3d, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x6f,
	0x6f, 0x6d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x2a, 0x2d, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x50, 0x43, 0x10, 0x02, 0x2a, 0x1e, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_packet_proto_rawDescOnce sync.Once
	file_packet_proto_rawDescData []byte
)

func file_packet_proto_rawDescGZIP() []byte {
	file_packet_proto_rawDescOnce.Do(func() {
		file_packet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packet_proto_rawDesc), len(file_packet_proto_rawDesc)))
	})
	return file_packet_proto_rawDescData
}

var file_packet_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_packet_proto_goTypes = []any{
	(NodeType)(0),             // 0: poker.NodeType
	(SendType)(0),             // 1: poker.SendType
	(IdType)(0),               // 2: poker.IdType
	(*Node)(nil),              // 3: poker.Node
	(*Packet)(nil),            // 4: poker.Packet
	(*Head)(nil),              // 5: poker.Head
	(*Router)(nil),            // 6: poker.Router
	(*RspHead)(nil),           // 7: poker.RspHead
	(*GateLoginRequest)(nil),  // 8: poker.GateLoginRequest
	(*GateLoginResponse)(nil), // 9: poker.GateLoginResponse
	(*GateHeartRequest)(nil),  // 10: poker.GateHeartRequest
	(*GateHeartResponse)(nil), // 11: poker.GateHeartResponse
}
var file_packet_proto_depIdxs = []int32{
	0, // 0: poker.Node.Type:type_name -> poker.NodeType
	5, // 1: poker.Packet.Head:type_name -> poker.Head
	6, // 2: poker.Packet.Router:type_name -> poker.Router
	1, // 3: poker.Head.SendType:type_name -> poker.SendType
	0, // 4: poker.Head.SrcNodeType:type_name -> poker.NodeType
	0, // 5: poker.Head.DstNodeType:type_name -> poker.NodeType
	2, // 6: poker.Head.IdType:type_name -> poker.IdType
	7, // 7: poker.GateLoginResponse.Head:type_name -> poker.RspHead
	7, // 8: poker.GateHeartResponse.Head:type_name -> poker.RspHead
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_packet_proto_init() }
func file_packet_proto_init() {
	if File_packet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packet_proto_rawDesc), len(file_packet_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packet_proto_goTypes,
		DependencyIndexes: file_packet_proto_depIdxs,
		EnumInfos:         file_packet_proto_enumTypes,
		MessageInfos:      file_packet_proto_msgTypes,
	}.Build()
	File_packet_proto = out.File
	file_packet_proto_goTypes = nil
	file_packet_proto_depIdxs = nil
}
