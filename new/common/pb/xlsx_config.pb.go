//
// 本代码由xlsx工具生成，请勿手动修改

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: xlsx_config.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MachineConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	GameId          int32                  `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`                   // 游戏id
	StartDuration   int64                  `protobuf:"varint,2,opt,name=StartDuration,proto3" json:"StartDuration,omitempty"`     // 开始时长(秒)
	PreFlopDuration int64                  `protobuf:"varint,3,opt,name=PreFlopDuration,proto3" json:"PreFlopDuration,omitempty"` // 翻牌前时长
	FlopDuration    int64                  `protobuf:"varint,4,opt,name=FlopDuration,proto3" json:"FlopDuration,omitempty"`       // 翻牌下注轮时长
	TurnDuration    int64                  `protobuf:"varint,5,opt,name=TurnDuration,proto3" json:"TurnDuration,omitempty"`       // 转牌下注轮时长
	RiverDuration   int64                  `protobuf:"varint,6,opt,name=RiverDuration,proto3" json:"RiverDuration,omitempty"`     // 河牌下注轮时长
	EndDuration     int64                  `protobuf:"varint,7,opt,name=EndDuration,proto3" json:"EndDuration,omitempty"`         // 结算时长
	DefaultDuration int64                  `protobuf:"varint,8,opt,name=DefaultDuration,proto3" json:"DefaultDuration,omitempty"` // 默认时长
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MachineConfig) Reset() {
	*x = MachineConfig{}
	mi := &file_xlsx_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfig) ProtoMessage() {}

func (x *MachineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfig.ProtoReflect.Descriptor instead.
func (*MachineConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{0}
}

func (x *MachineConfig) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MachineConfig) GetStartDuration() int64 {
	if x != nil {
		return x.StartDuration
	}
	return 0
}

func (x *MachineConfig) GetPreFlopDuration() int64 {
	if x != nil {
		return x.PreFlopDuration
	}
	return 0
}

func (x *MachineConfig) GetFlopDuration() int64 {
	if x != nil {
		return x.FlopDuration
	}
	return 0
}

func (x *MachineConfig) GetTurnDuration() int64 {
	if x != nil {
		return x.TurnDuration
	}
	return 0
}

func (x *MachineConfig) GetRiverDuration() int64 {
	if x != nil {
		return x.RiverDuration
	}
	return 0
}

func (x *MachineConfig) GetEndDuration() int64 {
	if x != nil {
		return x.EndDuration
	}
	return 0
}

func (x *MachineConfig) GetDefaultDuration() int64 {
	if x != nil {
		return x.DefaultDuration
	}
	return 0
}

type MachineConfigAry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ary           []*MachineConfig       `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineConfigAry) Reset() {
	*x = MachineConfigAry{}
	mi := &file_xlsx_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfigAry) ProtoMessage() {}

func (x *MachineConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfigAry.ProtoReflect.Descriptor instead.
func (*MachineConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{1}
}

func (x *MachineConfigAry) GetAry() []*MachineConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type TexasConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoomStage      int32                  `protobuf:"varint,1,opt,name=RoomStage,proto3" json:"RoomStage,omitempty"`             // 房间类型
	CoinType       int32                  `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`               // 货币类型
	RoomKeepLive   int64                  `protobuf:"varint,3,opt,name=RoomKeepLive,proto3" json:"RoomKeepLive,omitempty"`       // 房间存在时长(分钟)
	SmallBlind     int64                  `protobuf:"varint,4,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`           // 小盲注
	BigBlind       int64                  `protobuf:"varint,5,opt,name=BigBlind,proto3" json:"BigBlind,omitempty"`               // 大盲注
	MinBuyIn       int32                  `protobuf:"varint,6,opt,name=MinBuyIn,proto3" json:"MinBuyIn,omitempty"`               // 最小买入筹码
	MaxBuyIn       int32                  `protobuf:"varint,7,opt,name=MaxBuyIn,proto3" json:"MaxBuyIn,omitempty"`               // 最大买入筹码
	RakeRate       int64                  `protobuf:"varint,8,opt,name=RakeRate,proto3" json:"RakeRate,omitempty"`               // 每局抽水万分比
	MaxPlayerCount uint32                 `protobuf:"varint,9,opt,name=MaxPlayerCount,proto3" json:"MaxPlayerCount,omitempty"`   // 最大玩家人数
	RakeUpLimit    []int64                `protobuf:"varint,10,rep,packed,name=RakeUpLimit,proto3" json:"RakeUpLimit,omitempty"` // 每局多少人的抽水上限，2人，3人等抽水
	MaxRoomCount   uint32                 `protobuf:"varint,11,opt,name=MaxRoomCount,proto3" json:"MaxRoomCount,omitempty"`      // 最大房间人数
	IsNoFlopNoDrop bool                   `protobuf:"varint,12,opt,name=IsNoFlopNoDrop,proto3" json:"IsNoFlopNoDrop,omitempty"`  // 是否开启
	IsTest         bool                   `protobuf:"varint,13,opt,name=IsTest,proto3" json:"IsTest,omitempty"`                  // 是否为测试
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TexasConfig) Reset() {
	*x = TexasConfig{}
	mi := &file_xlsx_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasConfig) ProtoMessage() {}

func (x *TexasConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasConfig.ProtoReflect.Descriptor instead.
func (*TexasConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{2}
}

func (x *TexasConfig) GetRoomStage() int32 {
	if x != nil {
		return x.RoomStage
	}
	return 0
}

func (x *TexasConfig) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *TexasConfig) GetRoomKeepLive() int64 {
	if x != nil {
		return x.RoomKeepLive
	}
	return 0
}

func (x *TexasConfig) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *TexasConfig) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *TexasConfig) GetMinBuyIn() int32 {
	if x != nil {
		return x.MinBuyIn
	}
	return 0
}

func (x *TexasConfig) GetMaxBuyIn() int32 {
	if x != nil {
		return x.MaxBuyIn
	}
	return 0
}

func (x *TexasConfig) GetRakeRate() int64 {
	if x != nil {
		return x.RakeRate
	}
	return 0
}

func (x *TexasConfig) GetMaxPlayerCount() uint32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

func (x *TexasConfig) GetRakeUpLimit() []int64 {
	if x != nil {
		return x.RakeUpLimit
	}
	return nil
}

func (x *TexasConfig) GetMaxRoomCount() uint32 {
	if x != nil {
		return x.MaxRoomCount
	}
	return 0
}

func (x *TexasConfig) GetIsNoFlopNoDrop() bool {
	if x != nil {
		return x.IsNoFlopNoDrop
	}
	return false
}

func (x *TexasConfig) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

type TexasConfigAry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ary           []*TexasConfig         `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasConfigAry) Reset() {
	*x = TexasConfigAry{}
	mi := &file_xlsx_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasConfigAry) ProtoMessage() {}

func (x *TexasConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasConfigAry.ProtoReflect.Descriptor instead.
func (*TexasConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{3}
}

func (x *TexasConfigAry) GetAry() []*TexasConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type TexasTestConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Round         uint32                 `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`     // 第几轮牌局
	Publics       []string               `protobuf:"bytes,2,rep,name=Publics,proto3" json:"Publics,omitempty"`  // 公共牌
	Chair1        string                 `protobuf:"bytes,3,opt,name=Chair1,proto3" json:"Chair1,omitempty"`    // 玩家手牌
	Chair2        string                 `protobuf:"bytes,4,opt,name=Chair2,proto3" json:"Chair2,omitempty"`    // 玩家手牌
	Chair3        string                 `protobuf:"bytes,5,opt,name=Chair3,proto3" json:"Chair3,omitempty"`    // 玩家手牌
	Chair4        string                 `protobuf:"bytes,6,opt,name=Chair4,proto3" json:"Chair4,omitempty"`    // 玩家手牌
	Chair5        string                 `protobuf:"bytes,7,opt,name=Chair5,proto3" json:"Chair5,omitempty"`    // 玩家手牌
	Chair6        string                 `protobuf:"bytes,8,opt,name=Chair6,proto3" json:"Chair6,omitempty"`    // 玩家手牌
	Chair7        string                 `protobuf:"bytes,9,opt,name=Chair7,proto3" json:"Chair7,omitempty"`    // 玩家手牌
	Chair8        string                 `protobuf:"bytes,10,opt,name=Chair8,proto3" json:"Chair8,omitempty"`   // 玩家手牌
	Chair9        string                 `protobuf:"bytes,11,opt,name=Chair9,proto3" json:"Chair9,omitempty"`   // 玩家手牌
	Chair10       string                 `protobuf:"bytes,12,opt,name=Chair10,proto3" json:"Chair10,omitempty"` // 玩家手牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasTestConfig) Reset() {
	*x = TexasTestConfig{}
	mi := &file_xlsx_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasTestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTestConfig) ProtoMessage() {}

func (x *TexasTestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTestConfig.ProtoReflect.Descriptor instead.
func (*TexasTestConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{4}
}

func (x *TexasTestConfig) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasTestConfig) GetPublics() []string {
	if x != nil {
		return x.Publics
	}
	return nil
}

func (x *TexasTestConfig) GetChair1() string {
	if x != nil {
		return x.Chair1
	}
	return ""
}

func (x *TexasTestConfig) GetChair2() string {
	if x != nil {
		return x.Chair2
	}
	return ""
}

func (x *TexasTestConfig) GetChair3() string {
	if x != nil {
		return x.Chair3
	}
	return ""
}

func (x *TexasTestConfig) GetChair4() string {
	if x != nil {
		return x.Chair4
	}
	return ""
}

func (x *TexasTestConfig) GetChair5() string {
	if x != nil {
		return x.Chair5
	}
	return ""
}

func (x *TexasTestConfig) GetChair6() string {
	if x != nil {
		return x.Chair6
	}
	return ""
}

func (x *TexasTestConfig) GetChair7() string {
	if x != nil {
		return x.Chair7
	}
	return ""
}

func (x *TexasTestConfig) GetChair8() string {
	if x != nil {
		return x.Chair8
	}
	return ""
}

func (x *TexasTestConfig) GetChair9() string {
	if x != nil {
		return x.Chair9
	}
	return ""
}

func (x *TexasTestConfig) GetChair10() string {
	if x != nil {
		return x.Chair10
	}
	return ""
}

type TexasTestConfigAry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ary           []*TexasTestConfig     `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasTestConfigAry) Reset() {
	*x = TexasTestConfigAry{}
	mi := &file_xlsx_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasTestConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTestConfigAry) ProtoMessage() {}

func (x *TexasTestConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTestConfigAry.ProtoReflect.Descriptor instead.
func (*TexasTestConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{5}
}

func (x *TexasTestConfigAry) GetAry() []*TexasTestConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

var File_xlsx_config_proto protoreflect.FileDescriptor

var file_xlsx_config_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x78, 0x6c, 0x73, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72,
	0x65, 0x46, 0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x6c, 0x6f, 0x70,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x75, 0x72, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x54, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x69, 0x76, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x69, 0x76, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
	0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0xa9, 0x03, 0x0a, 0x0b, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x65, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x6f, 0x6f, 0x6d,
	0x4b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x67, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x69, 0x67, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x49, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x49, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x4e, 0x6f, 0x46, 0x6c,
	0x6f, 0x70, 0x4e, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x49, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x70, 0x4e, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x0e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0xb3,
	0x02, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x33, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x35, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x37, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x37, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x39, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x39, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x31, 0x30, 0x22, 0x3e, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x03, 0x41, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x41, 0x72, 0x79, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_xlsx_config_proto_rawDescOnce sync.Once
	file_xlsx_config_proto_rawDescData []byte
)

func file_xlsx_config_proto_rawDescGZIP() []byte {
	file_xlsx_config_proto_rawDescOnce.Do(func() {
		file_xlsx_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_xlsx_config_proto_rawDesc), len(file_xlsx_config_proto_rawDesc)))
	})
	return file_xlsx_config_proto_rawDescData
}

var file_xlsx_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_xlsx_config_proto_goTypes = []any{
	(*MachineConfig)(nil),      // 0: poker.MachineConfig
	(*MachineConfigAry)(nil),   // 1: poker.MachineConfigAry
	(*TexasConfig)(nil),        // 2: poker.TexasConfig
	(*TexasConfigAry)(nil),     // 3: poker.TexasConfigAry
	(*TexasTestConfig)(nil),    // 4: poker.TexasTestConfig
	(*TexasTestConfigAry)(nil), // 5: poker.TexasTestConfigAry
}
var file_xlsx_config_proto_depIdxs = []int32{
	0, // 0: poker.MachineConfigAry.Ary:type_name -> poker.MachineConfig
	2, // 1: poker.TexasConfigAry.Ary:type_name -> poker.TexasConfig
	4, // 2: poker.TexasTestConfigAry.Ary:type_name -> poker.TexasTestConfig
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_xlsx_config_proto_init() }
func file_xlsx_config_proto_init() {
	if File_xlsx_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_xlsx_config_proto_rawDesc), len(file_xlsx_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xlsx_config_proto_goTypes,
		DependencyIndexes: file_xlsx_config_proto_depIdxs,
		MessageInfos:      file_xlsx_config_proto_msgTypes,
	}.Build()
	File_xlsx_config_proto = out.File
	file_xlsx_config_proto_goTypes = nil
	file_xlsx_config_proto_depIdxs = nil
}
