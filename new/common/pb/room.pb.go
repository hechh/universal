// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: room.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 花色定义
type TexasColor int32

const (
	TexasColor_TC_NONE    TexasColor = 0 // 无花色
	TexasColor_TC_DIAMOND TexasColor = 1 // 1
	TexasColor_TC_CLUB    TexasColor = 2 // 2
	TexasColor_TC_HEART   TexasColor = 4 // 4
	TexasColor_TC_SPADE   TexasColor = 8 // 8
)

// Enum value maps for TexasColor.
var (
	TexasColor_name = map[int32]string{
		0: "TC_NONE",
		1: "TC_DIAMOND",
		2: "TC_CLUB",
		4: "TC_HEART",
		8: "TC_SPADE",
	}
	TexasColor_value = map[string]int32{
		"TC_NONE":    0,
		"TC_DIAMOND": 1,
		"TC_CLUB":    2,
		"TC_HEART":   4,
		"TC_SPADE":   8,
	}
)

func (x TexasColor) Enum() *TexasColor {
	p := new(TexasColor)
	*p = x
	return p
}

func (x TexasColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasColor) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[0].Descriptor()
}

func (TexasColor) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[0]
}

func (x TexasColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasColor.Descriptor instead.
func (TexasColor) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{0}
}

// 点数
type TexasRank int32

const (
	TexasRank_TR_0  TexasRank = 0 // 无点数
	TexasRank_TR_1  TexasRank = 1 // A座位1的时候
	TexasRank_TR_2  TexasRank = 2
	TexasRank_TR_3  TexasRank = 3
	TexasRank_TR_4  TexasRank = 4
	TexasRank_TR_5  TexasRank = 5
	TexasRank_TR_6  TexasRank = 6
	TexasRank_TR_7  TexasRank = 7
	TexasRank_TR_8  TexasRank = 8
	TexasRank_TR_9  TexasRank = 9
	TexasRank_TR_10 TexasRank = 10
	TexasRank_TR_J  TexasRank = 11
	TexasRank_TR_Q  TexasRank = 12
	TexasRank_TR_K  TexasRank = 13
	TexasRank_TR_A  TexasRank = 14
)

// Enum value maps for TexasRank.
var (
	TexasRank_name = map[int32]string{
		0:  "TR_0",
		1:  "TR_1",
		2:  "TR_2",
		3:  "TR_3",
		4:  "TR_4",
		5:  "TR_5",
		6:  "TR_6",
		7:  "TR_7",
		8:  "TR_8",
		9:  "TR_9",
		10: "TR_10",
		11: "TR_J",
		12: "TR_Q",
		13: "TR_K",
		14: "TR_A",
	}
	TexasRank_value = map[string]int32{
		"TR_0":  0,
		"TR_1":  1,
		"TR_2":  2,
		"TR_3":  3,
		"TR_4":  4,
		"TR_5":  5,
		"TR_6":  6,
		"TR_7":  7,
		"TR_8":  8,
		"TR_9":  9,
		"TR_10": 10,
		"TR_J":  11,
		"TR_Q":  12,
		"TR_K":  13,
		"TR_A":  14,
	}
)

func (x TexasRank) Enum() *TexasRank {
	p := new(TexasRank)
	*p = x
	return p
}

func (x TexasRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasRank) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[1].Descriptor()
}

func (TexasRank) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[1]
}

func (x TexasRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasRank.Descriptor instead.
func (TexasRank) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{1}
}

type TexasGameState int32

const (
	TexasGameState_TGS_INIT        TexasGameState = 0 // 初始化状态
	TexasGameState_TGS_START       TexasGameState = 1 // 游戏开始阶段（包含底注和发底牌）
	TexasGameState_TGS_PRE_FLOP    TexasGameState = 2 // 底牌前下注轮（Pre-Flop）
	TexasGameState_TGS_FLOP_ROUND  TexasGameState = 3 // 翻牌圈（三张公共牌）
	TexasGameState_TGS_TURN_ROUND  TexasGameState = 4 // 转牌圈（第四张公共牌）
	TexasGameState_TGS_RIVER_ROUND TexasGameState = 5 // 河牌圈（第五张公共牌）
	TexasGameState_TGS_END         TexasGameState = 6 // 结算阶段
)

// Enum value maps for TexasGameState.
var (
	TexasGameState_name = map[int32]string{
		0: "TGS_INIT",
		1: "TGS_START",
		2: "TGS_PRE_FLOP",
		3: "TGS_FLOP_ROUND",
		4: "TGS_TURN_ROUND",
		5: "TGS_RIVER_ROUND",
		6: "TGS_END",
	}
	TexasGameState_value = map[string]int32{
		"TGS_INIT":        0,
		"TGS_START":       1,
		"TGS_PRE_FLOP":    2,
		"TGS_FLOP_ROUND":  3,
		"TGS_TURN_ROUND":  4,
		"TGS_RIVER_ROUND": 5,
		"TGS_END":         6,
	}
)

func (x TexasGameState) Enum() *TexasGameState {
	p := new(TexasGameState)
	*p = x
	return p
}

func (x TexasGameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasGameState) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[2].Descriptor()
}

func (TexasGameState) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[2]
}

func (x TexasGameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasGameState.Descriptor instead.
func (TexasGameState) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{2}
}

type TexasRoomState int32

const (
	TexasRoomState_TRS_WAITSTART TexasRoomState = 0 // 等待开始
	TexasRoomState_TRS_PLAYING   TexasRoomState = 1 // 比赛中
	TexasRoomState_TRS_END       TexasRoomState = 2 // 已结束
	TexasRoomState_TRS_PAUSE     TexasRoomState = 3 //房间状态暂停
)

// Enum value maps for TexasRoomState.
var (
	TexasRoomState_name = map[int32]string{
		0: "TRS_WAITSTART",
		1: "TRS_PLAYING",
		2: "TRS_END",
		3: "TRS_PAUSE",
	}
	TexasRoomState_value = map[string]int32{
		"TRS_WAITSTART": 0,
		"TRS_PLAYING":   1,
		"TRS_END":       2,
		"TRS_PAUSE":     3,
	}
)

func (x TexasRoomState) Enum() *TexasRoomState {
	p := new(TexasRoomState)
	*p = x
	return p
}

func (x TexasRoomState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasRoomState) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[3].Descriptor()
}

func (TexasRoomState) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[3]
}

func (x TexasRoomState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasRoomState.Descriptor instead.
func (TexasRoomState) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{3}
}

type TexasOperateType int32

const (
	TexasOperateType_TOT_NONE            TexasOperateType = 0 // 无效操作
	TexasOperateType_TOT_BET             TexasOperateType = 1 // 下注
	TexasOperateType_TOT_CALL            TexasOperateType = 2 // 跟注
	TexasOperateType_TOT_RAISE           TexasOperateType = 3 // 加注
	TexasOperateType_TOT_CHECK           TexasOperateType = 4 // 看牌
	TexasOperateType_TOT_FOLD            TexasOperateType = 5 // 弃牌
	TexasOperateType_TOT_ALL_IN          TexasOperateType = 6 // 全下
	TexasOperateType_TOT_BET_BIG_BLIND   TexasOperateType = 7 // 下大盲
	TexasOperateType_TOT_BET_SMALL_BLIND TexasOperateType = 8 // 下小盲
	TexasOperateType_TOT_BET_ANTE        TexasOperateType = 9 // 下前注
)

// Enum value maps for TexasOperateType.
var (
	TexasOperateType_name = map[int32]string{
		0: "TOT_NONE",
		1: "TOT_BET",
		2: "TOT_CALL",
		3: "TOT_RAISE",
		4: "TOT_CHECK",
		5: "TOT_FOLD",
		6: "TOT_ALL_IN",
		7: "TOT_BET_BIG_BLIND",
		8: "TOT_BET_SMALL_BLIND",
		9: "TOT_BET_ANTE",
	}
	TexasOperateType_value = map[string]int32{
		"TOT_NONE":            0,
		"TOT_BET":             1,
		"TOT_CALL":            2,
		"TOT_RAISE":           3,
		"TOT_CHECK":           4,
		"TOT_FOLD":            5,
		"TOT_ALL_IN":          6,
		"TOT_BET_BIG_BLIND":   7,
		"TOT_BET_SMALL_BLIND": 8,
		"TOT_BET_ANTE":        9,
	}
)

func (x TexasOperateType) Enum() *TexasOperateType {
	p := new(TexasOperateType)
	*p = x
	return p
}

func (x TexasOperateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasOperateType) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[4].Descriptor()
}

func (TexasOperateType) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[4]
}

func (x TexasOperateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasOperateType.Descriptor instead.
func (TexasOperateType) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{4}
}

type TexasPlayerState int32

const (
	TexasPlayerState_TPS_NONE       TexasPlayerState = 0
	TexasPlayerState_TPS_JOIN_ROOM  TexasPlayerState = 1 // 加入房间
	TexasPlayerState_TPS_JOIN_TABLE TexasPlayerState = 2 // 加入牌桌
	TexasPlayerState_TPS_QUIT_TABLE TexasPlayerState = 3 // 退出牌桌(不在加入下一轮游戏)
	TexasPlayerState_TPS_QUIT_ROOM  TexasPlayerState = 4 // 结算完成
)

// Enum value maps for TexasPlayerState.
var (
	TexasPlayerState_name = map[int32]string{
		0: "TPS_NONE",
		1: "TPS_JOIN_ROOM",
		2: "TPS_JOIN_TABLE",
		3: "TPS_QUIT_TABLE",
		4: "TPS_QUIT_ROOM",
	}
	TexasPlayerState_value = map[string]int32{
		"TPS_NONE":       0,
		"TPS_JOIN_ROOM":  1,
		"TPS_JOIN_TABLE": 2,
		"TPS_QUIT_TABLE": 3,
		"TPS_QUIT_ROOM":  4,
	}
)

func (x TexasPlayerState) Enum() *TexasPlayerState {
	p := new(TexasPlayerState)
	*p = x
	return p
}

func (x TexasPlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasPlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[5].Descriptor()
}

func (TexasPlayerState) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[5]
}

func (x TexasPlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasPlayerState.Descriptor instead.
func (TexasPlayerState) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{5}
}

type TexasCardType int32

const (
	TexasCardType_TCT_NONE            TexasCardType = 0  // 无效牌型
	TexasCardType_TCT_HIGH_CARD       TexasCardType = 1  // 高牌
	TexasCardType_TCT_ONE_PAIR        TexasCardType = 2  // 一对
	TexasCardType_TCT_TWO_PAIR        TexasCardType = 3  // 两对
	TexasCardType_TCT_THREE_OF_A_KIND TexasCardType = 4  // 三条
	TexasCardType_TCT_STRAIGHT        TexasCardType = 5  // 顺子
	TexasCardType_TCT_FLUSH           TexasCardType = 6  // 同花
	TexasCardType_TCT_FULL_HOUSE      TexasCardType = 7  // 葫芦
	TexasCardType_TCT_FOUR_OF_A_KIND  TexasCardType = 8  // 四条
	TexasCardType_TCT_STRAIGHT_FLUSH  TexasCardType = 9  // 同花顺
	TexasCardType_TCT_ROYAL_FLUSH     TexasCardType = 10 // 皇家同花顺
	TexasCardType_TCT_STRAIGHT_MASK   TexasCardType = 31 // 顺子掩码
)

// Enum value maps for TexasCardType.
var (
	TexasCardType_name = map[int32]string{
		0:  "TCT_NONE",
		1:  "TCT_HIGH_CARD",
		2:  "TCT_ONE_PAIR",
		3:  "TCT_TWO_PAIR",
		4:  "TCT_THREE_OF_A_KIND",
		5:  "TCT_STRAIGHT",
		6:  "TCT_FLUSH",
		7:  "TCT_FULL_HOUSE",
		8:  "TCT_FOUR_OF_A_KIND",
		9:  "TCT_STRAIGHT_FLUSH",
		10: "TCT_ROYAL_FLUSH",
		31: "TCT_STRAIGHT_MASK",
	}
	TexasCardType_value = map[string]int32{
		"TCT_NONE":            0,
		"TCT_HIGH_CARD":       1,
		"TCT_ONE_PAIR":        2,
		"TCT_TWO_PAIR":        3,
		"TCT_THREE_OF_A_KIND": 4,
		"TCT_STRAIGHT":        5,
		"TCT_FLUSH":           6,
		"TCT_FULL_HOUSE":      7,
		"TCT_FOUR_OF_A_KIND":  8,
		"TCT_STRAIGHT_FLUSH":  9,
		"TCT_ROYAL_FLUSH":     10,
		"TCT_STRAIGHT_MASK":   31,
	}
)

func (x TexasCardType) Enum() *TexasCardType {
	p := new(TexasCardType)
	*p = x
	return p
}

func (x TexasCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[6].Descriptor()
}

func (TexasCardType) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[6]
}

func (x TexasCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasCardType.Descriptor instead.
func (TexasCardType) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{6}
}

type TexasRoomStage int32

const (
	TexasRoomStage_TRL_Free   TexasRoomStage = 0 // 免费模式，体验模式
	TexasRoomStage_TRL_LOW    TexasRoomStage = 1 // 初级
	TexasRoomStage_TRL_MIDDLE TexasRoomStage = 2 // 中级
	TexasRoomStage_TRL_HIGH   TexasRoomStage = 3 // 高级
)

// Enum value maps for TexasRoomStage.
var (
	TexasRoomStage_name = map[int32]string{
		0: "TRL_Free",
		1: "TRL_LOW",
		2: "TRL_MIDDLE",
		3: "TRL_HIGH",
	}
	TexasRoomStage_value = map[string]int32{
		"TRL_Free":   0,
		"TRL_LOW":    1,
		"TRL_MIDDLE": 2,
		"TRL_HIGH":   3,
	}
)

func (x TexasRoomStage) Enum() *TexasRoomStage {
	p := new(TexasRoomStage)
	*p = x
	return p
}

func (x TexasRoomStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasRoomStage) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[7].Descriptor()
}

func (TexasRoomStage) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[7]
}

func (x TexasRoomStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasRoomStage.Descriptor instead.
func (TexasRoomStage) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{7}
}

type TexasCoinType int32

const (
	TexasCoinType_TCT_COIN_NONE  TexasCoinType = 0 // 无效币种
	TexasCoinType_TCT_COIN_GOLD  TexasCoinType = 1 // 金币
	TexasCoinType_TCT_COIN_ACE   TexasCoinType = 2 // Ace coin
	TexasCoinType_TCT_COIN_SCORE TexasCoinType = 3 // 积分
)

// Enum value maps for TexasCoinType.
var (
	TexasCoinType_name = map[int32]string{
		0: "TCT_COIN_NONE",
		1: "TCT_COIN_GOLD",
		2: "TCT_COIN_ACE",
		3: "TCT_COIN_SCORE",
	}
	TexasCoinType_value = map[string]int32{
		"TCT_COIN_NONE":  0,
		"TCT_COIN_GOLD":  1,
		"TCT_COIN_ACE":   2,
		"TCT_COIN_SCORE": 3,
	}
)

func (x TexasCoinType) Enum() *TexasCoinType {
	p := new(TexasCoinType)
	*p = x
	return p
}

func (x TexasCoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasCoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[8].Descriptor()
}

func (TexasCoinType) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[8]
}

func (x TexasCoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasCoinType.Descriptor instead.
func (TexasCoinType) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{8}
}

// 发牌类型
type TexasDealType int32

const (
	TexasDealType_TDT_NONE  TexasDealType = 0 // 无效发牌
	TexasDealType_TDT_HAND  TexasDealType = 1 // 发手牌
	TexasDealType_TDT_FLOP  TexasDealType = 2 // 发翻牌
	TexasDealType_TDT_TURN  TexasDealType = 3 // 发转牌
	TexasDealType_TDT_RIVER TexasDealType = 4 // 发河牌
)

// Enum value maps for TexasDealType.
var (
	TexasDealType_name = map[int32]string{
		0: "TDT_NONE",
		1: "TDT_HAND",
		2: "TDT_FLOP",
		3: "TDT_TURN",
		4: "TDT_RIVER",
	}
	TexasDealType_value = map[string]int32{
		"TDT_NONE":  0,
		"TDT_HAND":  1,
		"TDT_FLOP":  2,
		"TDT_TURN":  3,
		"TDT_RIVER": 4,
	}
)

func (x TexasDealType) Enum() *TexasDealType {
	p := new(TexasDealType)
	*p = x
	return p
}

func (x TexasDealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TexasDealType) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[9].Descriptor()
}

func (TexasDealType) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[9]
}

func (x TexasDealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TexasDealType.Descriptor instead.
func (TexasDealType) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{9}
}

type TexasPlayerGameInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      uint32                 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`                                                        // 玩家位置
	GameState     TexasGameState         `protobuf:"varint,2,opt,name=game_state,json=gameState,proto3,enum=poker.TexasGameState" json:"game_state,omitempty"`           // 游戏状态
	Operate       TexasOperateType       `protobuf:"varint,3,opt,name=operate,proto3,enum=poker.TexasOperateType" json:"operate,omitempty"`                              // 玩家操作
	BetChips      int64                  `protobuf:"varint,4,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                                        // 玩家下注
	PreOperate    TexasOperateType       `protobuf:"varint,5,opt,name=pre_operate,json=preOperate,proto3,enum=poker.TexasOperateType" json:"pre_operate,omitempty"`      // 是否预操作
	PreBetChips   int64                  `protobuf:"varint,7,opt,name=pre_bet_chips,json=preBetChips,proto3" json:"pre_bet_chips,omitempty"`                             // 预下注筹码
	BestCardType  TexasCardType          `protobuf:"varint,8,opt,name=best_card_type,json=bestCardType,proto3,enum=poker.TexasCardType" json:"best_card_type,omitempty"` // 玩家最大牌型
	BestCardValue uint32                 `protobuf:"varint,9,opt,name=best_card_value,json=bestCardValue,proto3" json:"best_card_value,omitempty"`                       // 最大牌值
	BestCardList  []uint32               `protobuf:"varint,10,rep,packed,name=best_card_list,json=bestCardList,proto3" json:"best_card_list,omitempty"`                  // 玩家最大牌
	HandCardList  []uint32               `protobuf:"varint,11,rep,packed,name=hand_card_list,json=handCardList,proto3" json:"hand_card_list,omitempty"`                  // 玩家手牌
	HandShowList  []bool                 `protobuf:"varint,12,rep,packed,name=hand_show_list,json=handShowList,proto3" json:"hand_show_list,omitempty"`                  // 是否展示
	InPlaying     bool                   `protobuf:"varint,13,opt,name=in_playing,json=inPlaying,proto3" json:"in_playing,omitempty"`                                    // 是否在游戏中
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasPlayerGameInfo) Reset() {
	*x = TexasPlayerGameInfo{}
	mi := &file_room_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerGameInfo) ProtoMessage() {}

func (x *TexasPlayerGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerGameInfo.ProtoReflect.Descriptor instead.
func (*TexasPlayerGameInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{0}
}

func (x *TexasPlayerGameInfo) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetGameState() TexasGameState {
	if x != nil {
		return x.GameState
	}
	return TexasGameState_TGS_INIT
}

func (x *TexasPlayerGameInfo) GetOperate() TexasOperateType {
	if x != nil {
		return x.Operate
	}
	return TexasOperateType_TOT_NONE
}

func (x *TexasPlayerGameInfo) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetPreOperate() TexasOperateType {
	if x != nil {
		return x.PreOperate
	}
	return TexasOperateType_TOT_NONE
}

func (x *TexasPlayerGameInfo) GetPreBetChips() int64 {
	if x != nil {
		return x.PreBetChips
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetBestCardType() TexasCardType {
	if x != nil {
		return x.BestCardType
	}
	return TexasCardType_TCT_NONE
}

func (x *TexasPlayerGameInfo) GetBestCardValue() uint32 {
	if x != nil {
		return x.BestCardValue
	}
	return 0
}

func (x *TexasPlayerGameInfo) GetBestCardList() []uint32 {
	if x != nil {
		return x.BestCardList
	}
	return nil
}

func (x *TexasPlayerGameInfo) GetHandCardList() []uint32 {
	if x != nil {
		return x.HandCardList
	}
	return nil
}

func (x *TexasPlayerGameInfo) GetHandShowList() []bool {
	if x != nil {
		return x.HandShowList
	}
	return nil
}

func (x *TexasPlayerGameInfo) GetInPlaying() bool {
	if x != nil {
		return x.InPlaying
	}
	return false
}

// 玩家个人texas游戏数据结构
type TexasPlayerData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                    // 玩家id
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`             // 座位号
	Chips         int64                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                // 玩家筹码
	PlayerState   uint32                 `protobuf:"varint,4,opt,name=player_state,json=playerState,proto3" json:"player_state,omitempty"` // 加入房间、加入牌桌、退出牌桌、结算完成
	IsChange      bool                   `protobuf:"varint,5,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`          // 是否变更
	GameInfo      *TexasPlayerGameInfo   `protobuf:"bytes,6,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"`           // 玩家游戏信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasPlayerData) Reset() {
	*x = TexasPlayerData{}
	mi := &file_room_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerData) ProtoMessage() {}

func (x *TexasPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerData.ProtoReflect.Descriptor instead.
func (*TexasPlayerData) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{1}
}

func (x *TexasPlayerData) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasPlayerData) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasPlayerData) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasPlayerData) GetPlayerState() uint32 {
	if x != nil {
		return x.PlayerState
	}
	return 0
}

func (x *TexasPlayerData) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

func (x *TexasPlayerData) GetGameInfo() *TexasPlayerGameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

// 底池结构
type TexasPotData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PotType       uint32                 `protobuf:"varint,1,opt,name=pot_type,json=potType,proto3" json:"pot_type,omitempty"`        // 底池类型：0-主池，1-边池
	Chips         int64                  `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`                           // 总筹码
	UidList       []uint64               `protobuf:"varint,3,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"` // 玩家id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasPotData) Reset() {
	*x = TexasPotData{}
	mi := &file_room_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPotData) ProtoMessage() {}

func (x *TexasPotData) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPotData.ProtoReflect.Descriptor instead.
func (*TexasPotData) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{2}
}

func (x *TexasPotData) GetPotType() uint32 {
	if x != nil {
		return x.PotType
	}
	return 0
}

func (x *TexasPotData) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasPotData) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type TexasPotPoolData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalBetChips int64                  `protobuf:"varint,1,opt,name=total_bet_chips,json=totalBetChips,proto3" json:"total_bet_chips,omitempty"` // 下注总筹码
	BetChips      int64                  `protobuf:"varint,2,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                  // 下注筹码
	PotList       []*TexasPotData        `protobuf:"bytes,3,rep,name=pot_list,json=potList,proto3" json:"pot_list,omitempty"`                      // 底池
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasPotPoolData) Reset() {
	*x = TexasPotPoolData{}
	mi := &file_room_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPotPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPotPoolData) ProtoMessage() {}

func (x *TexasPotPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPotPoolData.ProtoReflect.Descriptor instead.
func (*TexasPotPoolData) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{3}
}

func (x *TexasPotPoolData) GetTotalBetChips() int64 {
	if x != nil {
		return x.TotalBetChips
	}
	return 0
}

func (x *TexasPotPoolData) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *TexasPotPoolData) GetPotList() []*TexasPotData {
	if x != nil {
		return x.PotList
	}
	return nil
}

// 游戏结构
type TexasGameData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GameState      TexasGameState         `protobuf:"varint,1,opt,name=game_state,json=gameState,proto3,enum=poker.TexasGameState" json:"game_state,omitempty"` // 游戏状态
	DealerChairId  uint32                 `protobuf:"varint,2,opt,name=dealer_chair_id,json=dealerChairId,proto3" json:"dealer_chair_id,omitempty"`             // 庄家座位号
	SmallChairId   uint32                 `protobuf:"varint,3,opt,name=small_chair_id,json=smallChairId,proto3" json:"small_chair_id,omitempty"`                // 小盲座位号
	BigChairId     uint32                 `protobuf:"varint,4,opt,name=big_chair_id,json=bigChairId,proto3" json:"big_chair_id,omitempty"`                      // 大盲座位号
	MinRaise       int64                  `protobuf:"varint,5,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`                              // 最小加注
	MaxBetChips    int64                  `protobuf:"varint,6,opt,name=max_bet_chips,json=maxBetChips,proto3" json:"max_bet_chips,omitempty"`                   // 最大下注筹码
	PublicCardList []uint32               `protobuf:"varint,7,rep,packed,name=public_card_list,json=publicCardList,proto3" json:"public_card_list,omitempty"`   // 展示公共牌
	UidCursor      uint32                 `protobuf:"varint,8,opt,name=uid_cursor,json=uidCursor,proto3" json:"uid_cursor,omitempty"`                           // 当前操作玩家
	UidList        []uint64               `protobuf:"varint,9,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`                          // 玩家列表
	PotPool        *TexasPotPoolData      `protobuf:"bytes,10,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                                 // 底池
	IsCompare      bool                   `protobuf:"varint,11,opt,name=is_compare,json=isCompare,proto3" json:"is_compare,omitempty"`                          // 是否出发比牌
	CardCursor     uint32                 `protobuf:"varint,12,opt,name=card_cursor,json=cardCursor,proto3" json:"card_cursor,omitempty"`                       // 牌堆游标位置
	CardList       []uint32               `protobuf:"varint,13,rep,packed,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`                      // 牌堆
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TexasGameData) Reset() {
	*x = TexasGameData{}
	mi := &file_room_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameData) ProtoMessage() {}

func (x *TexasGameData) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameData.ProtoReflect.Descriptor instead.
func (*TexasGameData) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{4}
}

func (x *TexasGameData) GetGameState() TexasGameState {
	if x != nil {
		return x.GameState
	}
	return TexasGameState_TGS_INIT
}

func (x *TexasGameData) GetDealerChairId() uint32 {
	if x != nil {
		return x.DealerChairId
	}
	return 0
}

func (x *TexasGameData) GetSmallChairId() uint32 {
	if x != nil {
		return x.SmallChairId
	}
	return 0
}

func (x *TexasGameData) GetBigChairId() uint32 {
	if x != nil {
		return x.BigChairId
	}
	return 0
}

func (x *TexasGameData) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *TexasGameData) GetMaxBetChips() int64 {
	if x != nil {
		return x.MaxBetChips
	}
	return 0
}

func (x *TexasGameData) GetPublicCardList() []uint32 {
	if x != nil {
		return x.PublicCardList
	}
	return nil
}

func (x *TexasGameData) GetUidCursor() uint32 {
	if x != nil {
		return x.UidCursor
	}
	return 0
}

func (x *TexasGameData) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *TexasGameData) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasGameData) GetIsCompare() bool {
	if x != nil {
		return x.IsCompare
	}
	return false
}

func (x *TexasGameData) GetCardCursor() uint32 {
	if x != nil {
		return x.CardCursor
	}
	return 0
}

func (x *TexasGameData) GetCardList() []uint32 {
	if x != nil {
		return x.CardList
	}
	return nil
}

// 游戏牌桌数据结构
type TexasTableData struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	TableId       uint64                      `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`                                                                                  // 唯一id
	CurState      TexasGameState              `protobuf:"varint,2,opt,name=cur_state,json=curState,proto3,enum=poker.TexasGameState" json:"cur_state,omitempty"`                                                     // 当前阶段
	Round         uint32                      `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`                                                                                                     // 当前游戏轮数
	Players       map[uint64]*TexasPlayerData `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                       // 玩家数据
	ChairInfo     map[uint32]uint64           `protobuf:"bytes,5,rep,name=chair_info,json=chairInfo,proto3" json:"chair_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 玩家座位号和uid的映射关系
	GameData      *TexasGameData              `protobuf:"bytes,6,opt,name=game_data,json=gameData,proto3" json:"game_data,omitempty"`                                                                                // 游戏数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasTableData) Reset() {
	*x = TexasTableData{}
	mi := &file_room_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTableData) ProtoMessage() {}

func (x *TexasTableData) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTableData.ProtoReflect.Descriptor instead.
func (*TexasTableData) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{5}
}

func (x *TexasTableData) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TexasTableData) GetCurState() TexasGameState {
	if x != nil {
		return x.CurState
	}
	return TexasGameState_TGS_INIT
}

func (x *TexasTableData) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasTableData) GetPlayers() map[uint64]*TexasPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TexasTableData) GetChairInfo() map[uint32]uint64 {
	if x != nil {
		return x.ChairInfo
	}
	return nil
}

func (x *TexasTableData) GetGameData() *TexasGameData {
	if x != nil {
		return x.GameData
	}
	return nil
}

type TexasRoomBaseInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoomId         uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                    // 唯一id
	GameType       int32                  `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`                              // 游戏类型
	RoomStage      TexasRoomStage         `protobuf:"varint,3,opt,name=room_stage,json=roomStage,proto3,enum=poker.TexasRoomStage" json:"room_stage,omitempty"` // 房间等级
	CoinType       TexasCoinType          `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=poker.TexasCoinType" json:"coin_type,omitempty"`     // 币种类型
	RoomState      TexasRoomState         `protobuf:"varint,5,opt,name=room_state,json=roomState,proto3,enum=poker.TexasRoomState" json:"room_state,omitempty"` // 房间状态
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                       // 房间名
	Pwd            string                 `protobuf:"bytes,7,opt,name=pwd,proto3" json:"pwd,omitempty"`                                                         // 邀请码 or 密码
	CreateTime     int64                  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                        // 房间创建时间
	FinishTime     int64                  `protobuf:"varint,10,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`                       // 房间结束时间
	MinBuyIn       int32                  `protobuf:"varint,11,opt,name=min_buy_in,json=minBuyIn,proto3" json:"min_buy_in,omitempty"`                           // 最小买入
	MaxBuyIn       int32                  `protobuf:"varint,12,opt,name=max_buy_in,json=maxBuyIn,proto3" json:"max_buy_in,omitempty"`                           // 最大买入
	SmallBlind     int64                  `protobuf:"varint,13,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"`                       // 小盲注
	BigBlind       int64                  `protobuf:"varint,14,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`                             // 大盲注
	MaxPlayerCount int32                  `protobuf:"varint,15,opt,name=max_player_count,json=maxPlayerCount,proto3" json:"max_player_count,omitempty"`         // 最大玩家数量
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TexasRoomBaseInfo) Reset() {
	*x = TexasRoomBaseInfo{}
	mi := &file_room_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomBaseInfo) ProtoMessage() {}

func (x *TexasRoomBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomBaseInfo.ProtoReflect.Descriptor instead.
func (*TexasRoomBaseInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{6}
}

func (x *TexasRoomBaseInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetRoomStage() TexasRoomStage {
	if x != nil {
		return x.RoomStage
	}
	return TexasRoomStage_TRL_Free
}

func (x *TexasRoomBaseInfo) GetCoinType() TexasCoinType {
	if x != nil {
		return x.CoinType
	}
	return TexasCoinType_TCT_COIN_NONE
}

func (x *TexasRoomBaseInfo) GetRoomState() TexasRoomState {
	if x != nil {
		return x.RoomState
	}
	return TexasRoomState_TRS_WAITSTART
}

func (x *TexasRoomBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TexasRoomBaseInfo) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *TexasRoomBaseInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetMinBuyIn() int32 {
	if x != nil {
		return x.MinBuyIn
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetMaxBuyIn() int32 {
	if x != nil {
		return x.MaxBuyIn
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *TexasRoomBaseInfo) GetMaxPlayerCount() int32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

// 房间数据
type TexasRoomData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RoomId            uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                    // 唯一id
	TotalBuyinChips   int64                  `protobuf:"varint,2,opt,name=total_buyin_chips,json=totalBuyinChips,proto3" json:"total_buyin_chips,omitempty"`       // 总买入筹码
	TotalServiceChips int64                  `protobuf:"varint,3,opt,name=total_service_chips,json=totalServiceChips,proto3" json:"total_service_chips,omitempty"` // 总服务费
	TotalRuningWater  int64                  `protobuf:"varint,4,opt,name=total_runing_water,json=totalRuningWater,proto3" json:"total_runing_water,omitempty"`    // 总流水
	TotalJoinCount    int64                  `protobuf:"varint,5,opt,name=total_join_count,json=totalJoinCount,proto3" json:"total_join_count,omitempty"`          // 参与游戏玩家列表
	BaseInfo          *TexasRoomBaseInfo     `protobuf:"bytes,6,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`                               // 房间基本信息
	Table             *TexasTableData        `protobuf:"bytes,10,opt,name=table,proto3" json:"table,omitempty"`                                                    // 牌桌数据
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TexasRoomData) Reset() {
	*x = TexasRoomData{}
	mi := &file_room_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomData) ProtoMessage() {}

func (x *TexasRoomData) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomData.ProtoReflect.Descriptor instead.
func (*TexasRoomData) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{7}
}

func (x *TexasRoomData) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasRoomData) GetTotalBuyinChips() int64 {
	if x != nil {
		return x.TotalBuyinChips
	}
	return 0
}

func (x *TexasRoomData) GetTotalServiceChips() int64 {
	if x != nil {
		return x.TotalServiceChips
	}
	return 0
}

func (x *TexasRoomData) GetTotalRuningWater() int64 {
	if x != nil {
		return x.TotalRuningWater
	}
	return 0
}

func (x *TexasRoomData) GetTotalJoinCount() int64 {
	if x != nil {
		return x.TotalJoinCount
	}
	return 0
}

func (x *TexasRoomData) GetBaseInfo() *TexasRoomBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *TexasRoomData) GetTable() *TexasTableData {
	if x != nil {
		return x.Table
	}
	return nil
}

// =================================================record=================================================
// 游戏房间回合
type TexasGameRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       uint64                 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`                                 // 牌局id(唯一)
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`                                                    // 当前回合
	GameType      int32                  `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`                              // 游戏类型
	RoomStage     TexasRoomStage         `protobuf:"varint,4,opt,name=room_stage,json=roomStage,proto3,enum=poker.TexasRoomStage" json:"room_stage,omitempty"` // 房间阶段
	Blind         string                 `protobuf:"bytes,5,opt,name=blind,proto3" json:"blind,omitempty"`                                                     // 小/大盲注
	BeginTime     int64                  `protobuf:"varint,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`                           // 开始时间
	EndTime       int64                  `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                 // 结束时间
	TotalPot      int64                  `protobuf:"varint,8,opt,name=total_pot,json=totalPot,proto3" json:"total_pot,omitempty"`                              // 底池
	TotalService  int64                  `protobuf:"varint,9,opt,name=total_service,json=totalService,proto3" json:"total_service,omitempty"`                  // 玩家服务费
	Detail        *TexasGameRecordDetail `protobuf:"bytes,10,opt,name=detail,proto3" json:"detail,omitempty"`                                                  // 游戏详细数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGameRecord) Reset() {
	*x = TexasGameRecord{}
	mi := &file_room_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameRecord) ProtoMessage() {}

func (x *TexasGameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameRecord.ProtoReflect.Descriptor instead.
func (*TexasGameRecord) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{8}
}

func (x *TexasGameRecord) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TexasGameRecord) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasGameRecord) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TexasGameRecord) GetRoomStage() TexasRoomStage {
	if x != nil {
		return x.RoomStage
	}
	return TexasRoomStage_TRL_Free
}

func (x *TexasGameRecord) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *TexasGameRecord) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TexasGameRecord) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TexasGameRecord) GetTotalPot() int64 {
	if x != nil {
		return x.TotalPot
	}
	return 0
}

func (x *TexasGameRecord) GetTotalService() int64 {
	if x != nil {
		return x.TotalService
	}
	return 0
}

func (x *TexasGameRecord) GetDetail() *TexasGameRecordDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type TexasGameRecordDetail struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	DealList      []*TexasGamePokerDealRecord `protobuf:"bytes,1,rep,name=deal_list,json=dealList,proto3" json:"deal_list,omitempty"`          // 发牌记录
	PlayerList    []*TexasGamePlayerRecord    `protobuf:"bytes,2,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`    // 玩家列表
	OperateList   []*TexasGameOperateRecord   `protobuf:"bytes,3,rep,name=operate_list,json=operateList,proto3" json:"operate_list,omitempty"` // 玩家操作记录
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGameRecordDetail) Reset() {
	*x = TexasGameRecordDetail{}
	mi := &file_room_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameRecordDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameRecordDetail) ProtoMessage() {}

func (x *TexasGameRecordDetail) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameRecordDetail.ProtoReflect.Descriptor instead.
func (*TexasGameRecordDetail) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{9}
}

func (x *TexasGameRecordDetail) GetDealList() []*TexasGamePokerDealRecord {
	if x != nil {
		return x.DealList
	}
	return nil
}

func (x *TexasGameRecordDetail) GetPlayerList() []*TexasGamePlayerRecord {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

func (x *TexasGameRecordDetail) GetOperateList() []*TexasGameOperateRecord {
	if x != nil {
		return x.OperateList
	}
	return nil
}

type TexasGamePokerDealRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DealType      TexasDealType          `protobuf:"varint,1,opt,name=deal_type,json=dealType,proto3,enum=poker.TexasDealType" json:"deal_type,omitempty"`
	Uid           uint64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Card          uint32                 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Cursor        uint32                 `protobuf:"varint,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGamePokerDealRecord) Reset() {
	*x = TexasGamePokerDealRecord{}
	mi := &file_room_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGamePokerDealRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGamePokerDealRecord) ProtoMessage() {}

func (x *TexasGamePokerDealRecord) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGamePokerDealRecord.ProtoReflect.Descriptor instead.
func (*TexasGamePokerDealRecord) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{10}
}

func (x *TexasGamePokerDealRecord) GetDealType() TexasDealType {
	if x != nil {
		return x.DealType
	}
	return TexasDealType_TDT_NONE
}

func (x *TexasGamePokerDealRecord) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGamePokerDealRecord) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *TexasGamePokerDealRecord) GetCursor() uint32 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type TexasGamePlayerRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`                             // 玩家座位号
	Chips         int64                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                                // 玩家筹码
	WinChips      int64                  `protobuf:"varint,4,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty"`                          // 玩家赢得筹码
	CardType      TexasCardType          `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,enum=poker.TexasCardType" json:"card_type,omitempty"` // 玩家牌型
	HandCardList  []uint32               `protobuf:"varint,6,rep,packed,name=hand_card_list,json=handCardList,proto3" json:"hand_card_list,omitempty"`     // 玩家手牌
	BestCardList  []uint32               `protobuf:"varint,7,rep,packed,name=best_card_list,json=bestCardList,proto3" json:"best_card_list,omitempty"`     // 玩家最大牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGamePlayerRecord) Reset() {
	*x = TexasGamePlayerRecord{}
	mi := &file_room_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGamePlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGamePlayerRecord) ProtoMessage() {}

func (x *TexasGamePlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGamePlayerRecord.ProtoReflect.Descriptor instead.
func (*TexasGamePlayerRecord) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{11}
}

func (x *TexasGamePlayerRecord) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetCardType() TexasCardType {
	if x != nil {
		return x.CardType
	}
	return TexasCardType_TCT_NONE
}

func (x *TexasGamePlayerRecord) GetHandCardList() []uint32 {
	if x != nil {
		return x.HandCardList
	}
	return nil
}

func (x *TexasGamePlayerRecord) GetBestCardList() []uint32 {
	if x != nil {
		return x.BestCardList
	}
	return nil
}

type TexasGameOperateRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameState     TexasGameState         `protobuf:"varint,1,opt,name=game_state,json=gameState,proto3,enum=poker.TexasGameState" json:"game_state,omitempty"` // 游戏状态
	Uid           uint64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`                                                        // 玩家id
	Operate       TexasOperateType       `protobuf:"varint,3,opt,name=operate,proto3,enum=poker.TexasOperateType" json:"operate,omitempty"`                    // 玩家操作
	BetChips      int64                  `protobuf:"varint,4,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                              // 玩家下注筹码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGameOperateRecord) Reset() {
	*x = TexasGameOperateRecord{}
	mi := &file_room_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameOperateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameOperateRecord) ProtoMessage() {}

func (x *TexasGameOperateRecord) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameOperateRecord.ProtoReflect.Descriptor instead.
func (*TexasGameOperateRecord) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{12}
}

func (x *TexasGameOperateRecord) GetGameState() TexasGameState {
	if x != nil {
		return x.GameState
	}
	return TexasGameState_TGS_INIT
}

func (x *TexasGameOperateRecord) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGameOperateRecord) GetOperate() TexasOperateType {
	if x != nil {
		return x.Operate
	}
	return TexasOperateType_TOT_NONE
}

func (x *TexasGameOperateRecord) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

// 游戏牌桌数据
type TexasGameFinishRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       uint64                 `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Round         uint32                 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	GameType      int32                  `protobuf:"varint,5,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	RoomId        uint64                 `protobuf:"varint,6,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName      string                 `protobuf:"bytes,7,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	RoomStage     TexasRoomStage         `protobuf:"varint,8,opt,name=room_stage,json=roomStage,proto3,enum=poker.TexasRoomStage" json:"room_stage,omitempty"`
	Blind         string                 `protobuf:"bytes,9,opt,name=blind,proto3" json:"blind,omitempty"`
	BeginTime     int64                  `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TotalPot      int64                  `protobuf:"varint,12,opt,name=total_pot,json=totalPot,proto3" json:"total_pot,omitempty"`
	TotalService  int64                  `protobuf:"varint,13,opt,name=total_service,json=totalService,proto3" json:"total_service,omitempty"`
	GameDetail    []byte                 `protobuf:"bytes,14,opt,name=game_detail,json=gameDetail,proto3" json:"game_detail,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGameFinishRecord) Reset() {
	*x = TexasGameFinishRecord{}
	mi := &file_room_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameFinishRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameFinishRecord) ProtoMessage() {}

func (x *TexasGameFinishRecord) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameFinishRecord.ProtoReflect.Descriptor instead.
func (*TexasGameFinishRecord) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{13}
}

func (x *TexasGameFinishRecord) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TexasGameFinishRecord) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasGameFinishRecord) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TexasGameFinishRecord) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasGameFinishRecord) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *TexasGameFinishRecord) GetRoomStage() TexasRoomStage {
	if x != nil {
		return x.RoomStage
	}
	return TexasRoomStage_TRL_Free
}

func (x *TexasGameFinishRecord) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *TexasGameFinishRecord) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TexasGameFinishRecord) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TexasGameFinishRecord) GetTotalPot() int64 {
	if x != nil {
		return x.TotalPot
	}
	return 0
}

func (x *TexasGameFinishRecord) GetTotalService() int64 {
	if x != nil {
		return x.TotalService
	}
	return 0
}

func (x *TexasGameFinishRecord) GetGameDetail() []byte {
	if x != nil {
		return x.GameDetail
	}
	return nil
}

func (x *TexasGameFinishRecord) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 玩家游戏记录
type TexasPlayerRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	TableId       uint64                 `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Round         uint32                 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	TotalPlayers  uint32                 `protobuf:"varint,5,opt,name=total_players,json=totalPlayers,proto3" json:"total_players,omitempty"`
	GameType      int32                  `protobuf:"varint,6,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	RoomId        uint64                 `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName      string                 `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	RoomStage     TexasRoomStage         `protobuf:"varint,9,opt,name=room_stage,json=roomStage,proto3,enum=poker.TexasRoomStage" json:"room_stage,omitempty"`
	BeginTime     int64                  `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Chips         int64                  `protobuf:"varint,12,opt,name=chips,proto3" json:"chips,omitempty"`
	ServiceChips  int64                  `protobuf:"varint,13,opt,name=service_chips,json=serviceChips,proto3" json:"service_chips,omitempty"`
	WinChips      int64                  `protobuf:"varint,14,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasPlayerRecord) Reset() {
	*x = TexasPlayerRecord{}
	mi := &file_room_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerRecord) ProtoMessage() {}

func (x *TexasPlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerRecord.ProtoReflect.Descriptor instead.
func (*TexasPlayerRecord) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{14}
}

func (x *TexasPlayerRecord) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasPlayerRecord) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TexasPlayerRecord) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasPlayerRecord) GetTotalPlayers() uint32 {
	if x != nil {
		return x.TotalPlayers
	}
	return 0
}

func (x *TexasPlayerRecord) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TexasPlayerRecord) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasPlayerRecord) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *TexasPlayerRecord) GetRoomStage() TexasRoomStage {
	if x != nil {
		return x.RoomStage
	}
	return TexasRoomStage_TRL_Free
}

func (x *TexasPlayerRecord) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TexasPlayerRecord) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TexasPlayerRecord) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasPlayerRecord) GetServiceChips() int64 {
	if x != nil {
		return x.ServiceChips
	}
	return 0
}

func (x *TexasPlayerRecord) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *TexasPlayerRecord) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type TexasRoomRecord struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UniqueId          uint64                 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"` // 唯一id
	RoomId            uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomName          string                 `protobuf:"bytes,3,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	GameType          int32                  `protobuf:"varint,4,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	RoomStage         TexasRoomStage         `protobuf:"varint,5,opt,name=room_stage,json=roomStage,proto3,enum=poker.TexasRoomStage" json:"room_stage,omitempty"`
	Blind             string                 `protobuf:"bytes,6,opt,name=blind,proto3" json:"blind,omitempty"`
	CreateTime        int64                  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	FinishTime        int64                  `protobuf:"varint,8,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	TableId           uint64                 `protobuf:"varint,9,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TotalRound        uint32                 `protobuf:"varint,10,opt,name=total_round,json=totalRound,proto3" json:"total_round,omitempty"`
	TotalBuyinChips   int64                  `protobuf:"varint,11,opt,name=total_buyin_chips,json=totalBuyinChips,proto3" json:"total_buyin_chips,omitempty"`
	TotalJoinCount    uint32                 `protobuf:"varint,12,opt,name=total_join_count,json=totalJoinCount,proto3" json:"total_join_count,omitempty"`
	TotalServiceChips int64                  `protobuf:"varint,13,opt,name=total_service_chips,json=totalServiceChips,proto3" json:"total_service_chips,omitempty"`
	TotalRuningWater  int64                  `protobuf:"varint,14,opt,name=total_runing_water,json=totalRuningWater,proto3" json:"total_runing_water,omitempty"`
	UpdateTime        int64                  `protobuf:"varint,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TexasRoomRecord) Reset() {
	*x = TexasRoomRecord{}
	mi := &file_room_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomRecord) ProtoMessage() {}

func (x *TexasRoomRecord) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomRecord.ProtoReflect.Descriptor instead.
func (*TexasRoomRecord) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{15}
}

func (x *TexasRoomRecord) GetUniqueId() uint64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *TexasRoomRecord) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasRoomRecord) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *TexasRoomRecord) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TexasRoomRecord) GetRoomStage() TexasRoomStage {
	if x != nil {
		return x.RoomStage
	}
	return TexasRoomStage_TRL_Free
}

func (x *TexasRoomRecord) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *TexasRoomRecord) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TexasRoomRecord) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *TexasRoomRecord) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TexasRoomRecord) GetTotalRound() uint32 {
	if x != nil {
		return x.TotalRound
	}
	return 0
}

func (x *TexasRoomRecord) GetTotalBuyinChips() int64 {
	if x != nil {
		return x.TotalBuyinChips
	}
	return 0
}

func (x *TexasRoomRecord) GetTotalJoinCount() uint32 {
	if x != nil {
		return x.TotalJoinCount
	}
	return 0
}

func (x *TexasRoomRecord) GetTotalServiceChips() int64 {
	if x != nil {
		return x.TotalServiceChips
	}
	return 0
}

func (x *TexasRoomRecord) GetTotalRuningWater() int64 {
	if x != nil {
		return x.TotalRuningWater
	}
	return 0
}

func (x *TexasRoomRecord) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

var File_room_proto protoreflect.FileDescriptor

var file_room_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x22, 0x8a, 0x04, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x62,
	0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x62,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x5a, 0x0a, 0x0c, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a,
	0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65,
	0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70,
	0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xeb, 0x03, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x69, 0x64,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75,
	0x69, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xbd, 0x03, 0x0a, 0x0e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x52, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x03, 0x0a, 0x11, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x62,
	0x75, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x75,
	0x79, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc0, 0x02, 0x0a, 0x0d,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x75, 0x79, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xdd,
	0x02, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd6,
	0x01, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x64, 0x65,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xf6, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x31, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb0,
	0x01, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x22, 0xa5, 0x03, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x11, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xa0, 0x04, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x69, 0x6e,
	0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x52, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x43, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x43, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x43, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x10, 0x08, 0x2a, 0xa2, 0x01, 0x0a, 0x09, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x30,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x52, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x33, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52,
	0x5f, 0x35, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x52, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x38,
	0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x52, 0x5f, 0x31, 0x30, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x4a, 0x10,
	0x0b, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x51, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x52, 0x5f, 0x4b, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x5f, 0x41, 0x10, 0x0e, 0x2a,
	0x89, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x47, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x47, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x47, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x47, 0x53, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x47, 0x53, 0x5f, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x47, 0x53,
	0x5f, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x47, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x2a, 0x50, 0x0a, 0x0e, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x52, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x52, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x03, 0x2a, 0xb9, 0x01,
	0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x4f, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f,
	0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x54, 0x5f, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x54, 0x5f, 0x42,
	0x45, 0x54, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f,
	0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x54, 0x5f, 0x42,
	0x45, 0x54, 0x5f, 0x41, 0x4e, 0x54, 0x45, 0x10, 0x09, 0x2a, 0x6e, 0x0a, 0x10, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x50, 0x53, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x50, 0x53, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x50, 0x53, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x50, 0x53, 0x5f, 0x51, 0x55,
	0x49, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0xfe, 0x01, 0x0a, 0x0d, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x54,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x43, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x43, 0x54, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x43, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x43, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x43,
	0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x07, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x09, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x53,
	0x48, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x1f, 0x2a, 0x49, 0x0a, 0x0e, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x52, 0x4c, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52,
	0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x4c, 0x5f, 0x4d,
	0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x4c, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x54, 0x5f, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x43, 0x54,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45,
	0x10, 0x03, 0x2a, 0x56, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x44, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x44, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x44, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x44, 0x54, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x44, 0x54, 0x5f, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x04, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_room_proto_rawDescOnce sync.Once
	file_room_proto_rawDescData []byte
)

func file_room_proto_rawDescGZIP() []byte {
	file_room_proto_rawDescOnce.Do(func() {
		file_room_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_room_proto_rawDesc), len(file_room_proto_rawDesc)))
	})
	return file_room_proto_rawDescData
}

var file_room_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_room_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_room_proto_goTypes = []any{
	(TexasColor)(0),                  // 0: poker.TexasColor
	(TexasRank)(0),                   // 1: poker.TexasRank
	(TexasGameState)(0),              // 2: poker.TexasGameState
	(TexasRoomState)(0),              // 3: poker.TexasRoomState
	(TexasOperateType)(0),            // 4: poker.TexasOperateType
	(TexasPlayerState)(0),            // 5: poker.TexasPlayerState
	(TexasCardType)(0),               // 6: poker.TexasCardType
	(TexasRoomStage)(0),              // 7: poker.TexasRoomStage
	(TexasCoinType)(0),               // 8: poker.TexasCoinType
	(TexasDealType)(0),               // 9: poker.TexasDealType
	(*TexasPlayerGameInfo)(nil),      // 10: poker.TexasPlayerGameInfo
	(*TexasPlayerData)(nil),          // 11: poker.TexasPlayerData
	(*TexasPotData)(nil),             // 12: poker.TexasPotData
	(*TexasPotPoolData)(nil),         // 13: poker.TexasPotPoolData
	(*TexasGameData)(nil),            // 14: poker.TexasGameData
	(*TexasTableData)(nil),           // 15: poker.TexasTableData
	(*TexasRoomBaseInfo)(nil),        // 16: poker.TexasRoomBaseInfo
	(*TexasRoomData)(nil),            // 17: poker.TexasRoomData
	(*TexasGameRecord)(nil),          // 18: poker.TexasGameRecord
	(*TexasGameRecordDetail)(nil),    // 19: poker.TexasGameRecordDetail
	(*TexasGamePokerDealRecord)(nil), // 20: poker.TexasGamePokerDealRecord
	(*TexasGamePlayerRecord)(nil),    // 21: poker.TexasGamePlayerRecord
	(*TexasGameOperateRecord)(nil),   // 22: poker.TexasGameOperateRecord
	(*TexasGameFinishRecord)(nil),    // 23: poker.TexasGameFinishRecord
	(*TexasPlayerRecord)(nil),        // 24: poker.TexasPlayerRecord
	(*TexasRoomRecord)(nil),          // 25: poker.TexasRoomRecord
	nil,                              // 26: poker.TexasTableData.PlayersEntry
	nil,                              // 27: poker.TexasTableData.ChairInfoEntry
}
var file_room_proto_depIdxs = []int32{
	2,  // 0: poker.TexasPlayerGameInfo.game_state:type_name -> poker.TexasGameState
	4,  // 1: poker.TexasPlayerGameInfo.operate:type_name -> poker.TexasOperateType
	4,  // 2: poker.TexasPlayerGameInfo.pre_operate:type_name -> poker.TexasOperateType
	6,  // 3: poker.TexasPlayerGameInfo.best_card_type:type_name -> poker.TexasCardType
	10, // 4: poker.TexasPlayerData.game_info:type_name -> poker.TexasPlayerGameInfo
	12, // 5: poker.TexasPotPoolData.pot_list:type_name -> poker.TexasPotData
	2,  // 6: poker.TexasGameData.game_state:type_name -> poker.TexasGameState
	13, // 7: poker.TexasGameData.pot_pool:type_name -> poker.TexasPotPoolData
	2,  // 8: poker.TexasTableData.cur_state:type_name -> poker.TexasGameState
	26, // 9: poker.TexasTableData.players:type_name -> poker.TexasTableData.PlayersEntry
	27, // 10: poker.TexasTableData.chair_info:type_name -> poker.TexasTableData.ChairInfoEntry
	14, // 11: poker.TexasTableData.game_data:type_name -> poker.TexasGameData
	7,  // 12: poker.TexasRoomBaseInfo.room_stage:type_name -> poker.TexasRoomStage
	8,  // 13: poker.TexasRoomBaseInfo.coin_type:type_name -> poker.TexasCoinType
	3,  // 14: poker.TexasRoomBaseInfo.room_state:type_name -> poker.TexasRoomState
	16, // 15: poker.TexasRoomData.base_info:type_name -> poker.TexasRoomBaseInfo
	15, // 16: poker.TexasRoomData.table:type_name -> poker.TexasTableData
	7,  // 17: poker.TexasGameRecord.room_stage:type_name -> poker.TexasRoomStage
	19, // 18: poker.TexasGameRecord.detail:type_name -> poker.TexasGameRecordDetail
	20, // 19: poker.TexasGameRecordDetail.deal_list:type_name -> poker.TexasGamePokerDealRecord
	21, // 20: poker.TexasGameRecordDetail.player_list:type_name -> poker.TexasGamePlayerRecord
	22, // 21: poker.TexasGameRecordDetail.operate_list:type_name -> poker.TexasGameOperateRecord
	9,  // 22: poker.TexasGamePokerDealRecord.deal_type:type_name -> poker.TexasDealType
	6,  // 23: poker.TexasGamePlayerRecord.card_type:type_name -> poker.TexasCardType
	2,  // 24: poker.TexasGameOperateRecord.game_state:type_name -> poker.TexasGameState
	4,  // 25: poker.TexasGameOperateRecord.operate:type_name -> poker.TexasOperateType
	7,  // 26: poker.TexasGameFinishRecord.room_stage:type_name -> poker.TexasRoomStage
	7,  // 27: poker.TexasPlayerRecord.room_stage:type_name -> poker.TexasRoomStage
	7,  // 28: poker.TexasRoomRecord.room_stage:type_name -> poker.TexasRoomStage
	11, // 29: poker.TexasTableData.PlayersEntry.value:type_name -> poker.TexasPlayerData
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_room_proto_init() }
func file_room_proto_init() {
	if File_room_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_room_proto_rawDesc), len(file_room_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_room_proto_goTypes,
		DependencyIndexes: file_room_proto_depIdxs,
		EnumInfos:         file_room_proto_enumTypes,
		MessageInfos:      file_room_proto_msgTypes,
	}.Build()
	File_room_proto = out.File
	file_room_proto_goTypes = nil
	file_room_proto_depIdxs = nil
}
