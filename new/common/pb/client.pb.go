// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: client.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通知消息
type TexasEventNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         TexasEventType         `protobuf:"varint,1,opt,name=Event,proto3,enum=poker.TexasEventType" json:"Event,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasEventNotify) Reset() {
	*x = TexasEventNotify{}
	mi := &file_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasEventNotify) ProtoMessage() {}

func (x *TexasEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasEventNotify.ProtoReflect.Descriptor instead.
func (*TexasEventNotify) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{0}
}

func (x *TexasEventNotify) GetEvent() TexasEventType {
	if x != nil {
		return x.Event
	}
	return TexasEventType_EVENT_NONE
}

func (x *TexasEventNotify) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// -------------- 游戏事件通知结构 -----------
// EVENT_GAME_END, EVENT_GAME_START
type TexasGameEventNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                          // 房间id
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`                                          // 当前回合
	DealerChair   uint32                 `protobuf:"varint,3,opt,name=dealer_chair,json=dealerChair,proto3" json:"dealer_chair,omitempty"`           // 庄家座位号
	SmallChair    uint32                 `protobuf:"varint,4,opt,name=small_chair,json=smallChair,proto3" json:"small_chair,omitempty"`              // 小盲座位号
	BigChair      uint32                 `protobuf:"varint,5,opt,name=big_chair,json=bigChair,proto3" json:"big_chair,omitempty"`                    // 大盲座位号
	SmallChip     uint32                 `protobuf:"varint,6,opt,name=small_chip,json=smallChip,proto3" json:"small_chip,omitempty"`                 // 小盲位筹码
	BigChip       uint32                 `protobuf:"varint,7,opt,name=big_chip,json=bigChip,proto3" json:"big_chip,omitempty"`                       // 大盲位筹码
	CurBetChairId uint32                 `protobuf:"varint,8,opt,name=cur_bet_chair_id,json=curBetChairId,proto3" json:"cur_bet_chair_id,omitempty"` // 当前下注玩家座位
	PotPool       *TexasPotPoolData      `protobuf:"bytes,9,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                        // 筹码池
	EndInfo       []*TexasGameEndInfo    `protobuf:"bytes,10,rep,name=end_info,json=endInfo,proto3" json:"end_info,omitempty"`
	Duration      int64                  `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"` // 时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGameEventNotify) Reset() {
	*x = TexasGameEventNotify{}
	mi := &file_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameEventNotify) ProtoMessage() {}

func (x *TexasGameEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameEventNotify.ProtoReflect.Descriptor instead.
func (*TexasGameEventNotify) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{1}
}

func (x *TexasGameEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasGameEventNotify) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasGameEventNotify) GetDealerChair() uint32 {
	if x != nil {
		return x.DealerChair
	}
	return 0
}

func (x *TexasGameEventNotify) GetSmallChair() uint32 {
	if x != nil {
		return x.SmallChair
	}
	return 0
}

func (x *TexasGameEventNotify) GetBigChair() uint32 {
	if x != nil {
		return x.BigChair
	}
	return 0
}

func (x *TexasGameEventNotify) GetSmallChip() uint32 {
	if x != nil {
		return x.SmallChip
	}
	return 0
}

func (x *TexasGameEventNotify) GetBigChip() uint32 {
	if x != nil {
		return x.BigChip
	}
	return 0
}

func (x *TexasGameEventNotify) GetCurBetChairId() uint32 {
	if x != nil {
		return x.CurBetChairId
	}
	return 0
}

func (x *TexasGameEventNotify) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasGameEventNotify) GetEndInfo() []*TexasGameEndInfo {
	if x != nil {
		return x.EndInfo
	}
	return nil
}

func (x *TexasGameEventNotify) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TexasGameEndInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	Chips         int64                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	WinChips      int64                  `protobuf:"varint,4,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty"`
	CardType      int32                  `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"` // 牌型
	Hands         []uint32               `protobuf:"varint,6,rep,packed,name=hands,proto3" json:"hands,omitempty"`
	Bests         []uint32               `protobuf:"varint,7,rep,packed,name=bests,proto3" json:"bests,omitempty"` // 最大牌型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasGameEndInfo) Reset() {
	*x = TexasGameEndInfo{}
	mi := &file_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasGameEndInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameEndInfo) ProtoMessage() {}

func (x *TexasGameEndInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameEndInfo.ProtoReflect.Descriptor instead.
func (*TexasGameEndInfo) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{2}
}

func (x *TexasGameEndInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGameEndInfo) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasGameEndInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasGameEndInfo) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *TexasGameEndInfo) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *TexasGameEndInfo) GetHands() []uint32 {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *TexasGameEndInfo) GetBests() []uint32 {
	if x != nil {
		return x.Bests
	}
	return nil
}

// -----------------手牌通知-------------------
// EVENT_FLOP_CARD, EVENT_DEAL, EVENT_FLOP_CARD, EVENT_FLOP_CARD
type TexasDealEventNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                          // 房间id
	GameState     int32                  `protobuf:"varint,2,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"`                 // 游戏状态
	HandsCard     []uint32               `protobuf:"varint,3,rep,packed,name=hands_card,json=handsCard,proto3" json:"hands_card,omitempty"`          // 手牌 or 公共牌
	CurBetChairId uint32                 `protobuf:"varint,4,opt,name=cur_bet_chair_id,json=curBetChairId,proto3" json:"cur_bet_chair_id,omitempty"` // 当前下注玩家座位
	PotPool       *TexasPotPoolData      `protobuf:"bytes,5,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                        // 筹码池
	Duration      int64                  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`                                    // 时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasDealEventNotify) Reset() {
	*x = TexasDealEventNotify{}
	mi := &file_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasDealEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasDealEventNotify) ProtoMessage() {}

func (x *TexasDealEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasDealEventNotify.ProtoReflect.Descriptor instead.
func (*TexasDealEventNotify) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3}
}

func (x *TexasDealEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasDealEventNotify) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *TexasDealEventNotify) GetHandsCard() []uint32 {
	if x != nil {
		return x.HandsCard
	}
	return nil
}

func (x *TexasDealEventNotify) GetCurBetChairId() uint32 {
	if x != nil {
		return x.CurBetChairId
	}
	return 0
}

func (x *TexasDealEventNotify) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasDealEventNotify) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// -----------------游戏下注通知--------------------
// EVENT_BET
type TexasBetEventNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                  // 房间id
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`               // 下注玩家
	Chips         int64                  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                  // 玩家手里筹码
	NextChairId   uint32                 `protobuf:"varint,4,opt,name=next_chair_id,json=nextChairId,proto3" json:"next_chair_id,omitempty"` // 下一个下注玩家
	OperateType   int32                  `protobuf:"varint,5,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"`   // 玩家操作类型
	BetChips      int64                  `protobuf:"varint,6,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`            // 玩家下注金额,看牌&弃牌为0
	PotPool       *TexasPotPoolData      `protobuf:"bytes,7,opt,name=pot_pool,json=potPool,proto3" json:"pot_pool,omitempty"`                // 筹码池
	MinRaise      int64                  `protobuf:"varint,8,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`            // 最小加注
	MaxBetChips   int64                  `protobuf:"varint,9,opt,name=max_bet_chips,json=maxBetChips,proto3" json:"max_bet_chips,omitempty"` // 最大下注筹码
	Duration      int64                  `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`                           // 时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasBetEventNotify) Reset() {
	*x = TexasBetEventNotify{}
	mi := &file_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasBetEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasBetEventNotify) ProtoMessage() {}

func (x *TexasBetEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasBetEventNotify.ProtoReflect.Descriptor instead.
func (*TexasBetEventNotify) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{4}
}

func (x *TexasBetEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasBetEventNotify) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasBetEventNotify) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasBetEventNotify) GetNextChairId() uint32 {
	if x != nil {
		return x.NextChairId
	}
	return 0
}

func (x *TexasBetEventNotify) GetOperateType() int32 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

func (x *TexasBetEventNotify) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *TexasBetEventNotify) GetPotPool() *TexasPotPoolData {
	if x != nil {
		return x.PotPool
	}
	return nil
}

func (x *TexasBetEventNotify) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *TexasBetEventNotify) GetMaxBetChips() int64 {
	if x != nil {
		return x.MaxBetChips
	}
	return 0
}

func (x *TexasBetEventNotify) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// -----------------------站起通知----------------------
// EVENT_STAND_UP, EVENT_SIT_DOWN, EVENT_STAND_UP
type TexasPlayerEventNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`    // 房间id
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"` // 下注玩家
	Player        *TexasPlayerData       `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`                   // 玩家数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasPlayerEventNotify) Reset() {
	*x = TexasPlayerEventNotify{}
	mi := &file_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasPlayerEventNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasPlayerEventNotify) ProtoMessage() {}

func (x *TexasPlayerEventNotify) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasPlayerEventNotify.ProtoReflect.Descriptor instead.
func (*TexasPlayerEventNotify) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{5}
}

func (x *TexasPlayerEventNotify) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasPlayerEventNotify) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasPlayerEventNotify) GetPlayer() *TexasPlayerData {
	if x != nil {
		return x.Player
	}
	return nil
}

// ---------------------------------进入房间请求------------------------------------------
type TexasJoinRoomReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasJoinRoomReq) Reset() {
	*x = TexasJoinRoomReq{}
	mi := &file_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasJoinRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasJoinRoomReq) ProtoMessage() {}

func (x *TexasJoinRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasJoinRoomReq.ProtoReflect.Descriptor instead.
func (*TexasJoinRoomReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{6}
}

func (x *TexasJoinRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type TexasJoinRoomRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomInfo      *TexasRoomBaseInfo     `protobuf:"bytes,2,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
	TableInfo     *TexasTableData        `protobuf:"bytes,3,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"` // PrivateData一定为空
	Duration      int64                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                   // 时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasJoinRoomRsp) Reset() {
	*x = TexasJoinRoomRsp{}
	mi := &file_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasJoinRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasJoinRoomRsp) ProtoMessage() {}

func (x *TexasJoinRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasJoinRoomRsp.ProtoReflect.Descriptor instead.
func (*TexasJoinRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{7}
}

func (x *TexasJoinRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasJoinRoomRsp) GetRoomInfo() *TexasRoomBaseInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *TexasJoinRoomRsp) GetTableInfo() *TexasTableData {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *TexasJoinRoomRsp) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// --------------------买入请求---------------------
type TexasBuyInReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`       // 房间ID
	Chip          int64                  `protobuf:"varint,2,opt,name=chip,proto3" json:"chip,omitempty"`                         // 增加筹码
	CoinType      int32                  `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"` // 币种类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasBuyInReq) Reset() {
	*x = TexasBuyInReq{}
	mi := &file_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasBuyInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasBuyInReq) ProtoMessage() {}

func (x *TexasBuyInReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasBuyInReq.ProtoReflect.Descriptor instead.
func (*TexasBuyInReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{8}
}

func (x *TexasBuyInReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasBuyInReq) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasBuyInReq) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

type TexasBuyInRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Chip          int64                  `protobuf:"varint,4,opt,name=chip,proto3" json:"chip,omitempty"`
	CoinType      int32                  `protobuf:"varint,5,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"` // 币种类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasBuyInRsp) Reset() {
	*x = TexasBuyInRsp{}
	mi := &file_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasBuyInRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasBuyInRsp) ProtoMessage() {}

func (x *TexasBuyInRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasBuyInRsp.ProtoReflect.Descriptor instead.
func (*TexasBuyInRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{9}
}

func (x *TexasBuyInRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasBuyInRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasBuyInRsp) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasBuyInRsp) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

// -------------------坐下请求----------------
type TexasSitDownReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	BuyinChips    uint32                 `protobuf:"varint,3,opt,name=buyin_chips,json=buyinChips,proto3" json:"buyin_chips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasSitDownReq) Reset() {
	*x = TexasSitDownReq{}
	mi := &file_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasSitDownReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasSitDownReq) ProtoMessage() {}

func (x *TexasSitDownReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasSitDownReq.ProtoReflect.Descriptor instead.
func (*TexasSitDownReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{10}
}

func (x *TexasSitDownReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasSitDownReq) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasSitDownReq) GetBuyinChips() uint32 {
	if x != nil {
		return x.BuyinChips
	}
	return 0
}

type TexasSitDownRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasSitDownRsp) Reset() {
	*x = TexasSitDownRsp{}
	mi := &file_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasSitDownRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasSitDownRsp) ProtoMessage() {}

func (x *TexasSitDownRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasSitDownRsp.ProtoReflect.Descriptor instead.
func (*TexasSitDownRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{11}
}

func (x *TexasSitDownRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasSitDownRsp) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasSitDownRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// --------------------站起请求---------------------------
type TexasStandUpReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasStandUpReq) Reset() {
	*x = TexasStandUpReq{}
	mi := &file_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasStandUpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasStandUpReq) ProtoMessage() {}

func (x *TexasStandUpReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasStandUpReq.ProtoReflect.Descriptor instead.
func (*TexasStandUpReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{12}
}

func (x *TexasStandUpReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasStandUpReq) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

type TexasStandUpRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasStandUpRsp) Reset() {
	*x = TexasStandUpRsp{}
	mi := &file_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasStandUpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasStandUpRsp) ProtoMessage() {}

func (x *TexasStandUpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasStandUpRsp.ProtoReflect.Descriptor instead.
func (*TexasStandUpRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{13}
}

func (x *TexasStandUpRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasStandUpRsp) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasStandUpRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// ---------------------下注请求----------------------
type TexasDoBetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chip          int64                  `protobuf:"varint,1,opt,name=chip,proto3" json:"chip,omitempty"` // 0为 check看牌
	ChairId       uint32                 `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	RoomId        uint64                 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	OperateType   int32                  `protobuf:"varint,4,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"` // 操作类型 enum OperateType
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasDoBetReq) Reset() {
	*x = TexasDoBetReq{}
	mi := &file_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasDoBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasDoBetReq) ProtoMessage() {}

func (x *TexasDoBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasDoBetReq.ProtoReflect.Descriptor instead.
func (*TexasDoBetReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{14}
}

func (x *TexasDoBetReq) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasDoBetReq) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasDoBetReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasDoBetReq) GetOperateType() int32 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

type TexasDoBetRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	ChairId       uint32                 `protobuf:"varint,3,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`    // 操作者椅子 id
	OpType        int32                  `protobuf:"varint,4,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`       // 操作类型 enum OperateType
	Chip          int64                  `protobuf:"varint,5,opt,name=chip,proto3" json:"chip,omitempty"`                         // 下注金额
	BankRoll      int64                  `protobuf:"varint,6,opt,name=bank_roll,json=bankRoll,proto3" json:"bank_roll,omitempty"` // 当前剩余金额
	TotalBet      int64                  `protobuf:"varint,7,opt,name=total_bet,json=totalBet,proto3" json:"total_bet,omitempty"` // 此局游戏总下注
	RoomId        uint64                 `protobuf:"varint,8,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasDoBetRsp) Reset() {
	*x = TexasDoBetRsp{}
	mi := &file_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasDoBetRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasDoBetRsp) ProtoMessage() {}

func (x *TexasDoBetRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasDoBetRsp.ProtoReflect.Descriptor instead.
func (*TexasDoBetRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{15}
}

func (x *TexasDoBetRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasDoBetRsp) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasDoBetRsp) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasDoBetRsp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *TexasDoBetRsp) GetChip() int64 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *TexasDoBetRsp) GetBankRoll() int64 {
	if x != nil {
		return x.BankRoll
	}
	return 0
}

func (x *TexasDoBetRsp) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *TexasDoBetRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// --------------------查询房间信息------------------
type TexasRoomInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasRoomInfoReq) Reset() {
	*x = TexasRoomInfoReq{}
	mi := &file_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomInfoReq) ProtoMessage() {}

func (x *TexasRoomInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomInfoReq.ProtoReflect.Descriptor instead.
func (*TexasRoomInfoReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{16}
}

func (x *TexasRoomInfoReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type TexasRoomInfoRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Base          *TexasRoomBaseInfo     `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	TableInfo     *TexasTableData        `protobuf:"bytes,3,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasRoomInfoRsp) Reset() {
	*x = TexasRoomInfoRsp{}
	mi := &file_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasRoomInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomInfoRsp) ProtoMessage() {}

func (x *TexasRoomInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomInfoRsp.ProtoReflect.Descriptor instead.
func (*TexasRoomInfoRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{17}
}

func (x *TexasRoomInfoRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasRoomInfoRsp) GetBase() *TexasRoomBaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TexasRoomInfoRsp) GetTableInfo() *TexasTableData {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// -------------创建房间请求-----------
type TexasCreateRoomReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	GameType      int32                  `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`    // 房间类型
	RoomStage     int32                  `protobuf:"varint,3,opt,name=room_stage,json=roomStage,proto3" json:"room_stage,omitempty"` // 房间模式
	CoinType      int32                  `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`    // 房间规则
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasCreateRoomReq) Reset() {
	*x = TexasCreateRoomReq{}
	mi := &file_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasCreateRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasCreateRoomReq) ProtoMessage() {}

func (x *TexasCreateRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasCreateRoomReq.ProtoReflect.Descriptor instead.
func (*TexasCreateRoomReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{18}
}

func (x *TexasCreateRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *TexasCreateRoomReq) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *TexasCreateRoomReq) GetRoomStage() int32 {
	if x != nil {
		return x.RoomStage
	}
	return 0
}

func (x *TexasCreateRoomReq) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

type TexasCreateRoomRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Base          *TexasRoomBaseInfo     `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	TableInfo     *TexasTableData        `protobuf:"bytes,3,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasCreateRoomRsp) Reset() {
	*x = TexasCreateRoomRsp{}
	mi := &file_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasCreateRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasCreateRoomRsp) ProtoMessage() {}

func (x *TexasCreateRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasCreateRoomRsp.ProtoReflect.Descriptor instead.
func (*TexasCreateRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{19}
}

func (x *TexasCreateRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasCreateRoomRsp) GetBase() *TexasRoomBaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TexasCreateRoomRsp) GetTableInfo() *TexasTableData {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

// ----------------离开游戏请求-----------------
type TexasQuitRoomReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint64                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasQuitRoomReq) Reset() {
	*x = TexasQuitRoomReq{}
	mi := &file_client_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasQuitRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasQuitRoomReq) ProtoMessage() {}

func (x *TexasQuitRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasQuitRoomReq.ProtoReflect.Descriptor instead.
func (*TexasQuitRoomReq) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{20}
}

func (x *TexasQuitRoomReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type TexasQuitRoomRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Head          *RspHead               `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	RoomId        uint64                 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TexasQuitRoomRsp) Reset() {
	*x = TexasQuitRoomRsp{}
	mi := &file_client_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TexasQuitRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasQuitRoomRsp) ProtoMessage() {}

func (x *TexasQuitRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasQuitRoomRsp.ProtoReflect.Descriptor instead.
func (*TexasQuitRoomRsp) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{21}
}

func (x *TexasQuitRoomRsp) GetHead() *RspHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *TexasQuitRoomRsp) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

var File_client_proto protoreflect.FileDescriptor

var file_client_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x10,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x03, 0x0a, 0x14, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x69, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x69, 0x67, 0x43, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x78, 0x61, 0x73, 0x44,
	0x65, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64,
	0x73, 0x43, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6f,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4,
	0x02, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x61, 0x73, 0x42, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x70, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0xbf, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x42, 0x75, 0x79, 0x49, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a,
	0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x22,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66, 0x0a, 0x0f,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x43,
	0x68, 0x69, 0x70, 0x73, 0x22, 0x69, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x53, 0x69, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x22, 0x7a, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x44, 0x6f, 0x42, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x01,
	0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x44, 0x6f, 0x42, 0x65, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x68, 0x69,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x86,
	0x01, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x51,
	0x75, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x61, 0x73, 0x51, 0x75, 0x69, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x73,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_client_proto_rawDescOnce sync.Once
	file_client_proto_rawDescData []byte
)

func file_client_proto_rawDescGZIP() []byte {
	file_client_proto_rawDescOnce.Do(func() {
		file_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_proto_rawDesc), len(file_client_proto_rawDesc)))
	})
	return file_client_proto_rawDescData
}

var file_client_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_client_proto_goTypes = []any{
	(*TexasEventNotify)(nil),       // 0: poker.TexasEventNotify
	(*TexasGameEventNotify)(nil),   // 1: poker.TexasGameEventNotify
	(*TexasGameEndInfo)(nil),       // 2: poker.TexasGameEndInfo
	(*TexasDealEventNotify)(nil),   // 3: poker.TexasDealEventNotify
	(*TexasBetEventNotify)(nil),    // 4: poker.TexasBetEventNotify
	(*TexasPlayerEventNotify)(nil), // 5: poker.TexasPlayerEventNotify
	(*TexasJoinRoomReq)(nil),       // 6: poker.TexasJoinRoomReq
	(*TexasJoinRoomRsp)(nil),       // 7: poker.TexasJoinRoomRsp
	(*TexasBuyInReq)(nil),          // 8: poker.TexasBuyInReq
	(*TexasBuyInRsp)(nil),          // 9: poker.TexasBuyInRsp
	(*TexasSitDownReq)(nil),        // 10: poker.TexasSitDownReq
	(*TexasSitDownRsp)(nil),        // 11: poker.TexasSitDownRsp
	(*TexasStandUpReq)(nil),        // 12: poker.TexasStandUpReq
	(*TexasStandUpRsp)(nil),        // 13: poker.TexasStandUpRsp
	(*TexasDoBetReq)(nil),          // 14: poker.TexasDoBetReq
	(*TexasDoBetRsp)(nil),          // 15: poker.TexasDoBetRsp
	(*TexasRoomInfoReq)(nil),       // 16: poker.TexasRoomInfoReq
	(*TexasRoomInfoRsp)(nil),       // 17: poker.TexasRoomInfoRsp
	(*TexasCreateRoomReq)(nil),     // 18: poker.TexasCreateRoomReq
	(*TexasCreateRoomRsp)(nil),     // 19: poker.TexasCreateRoomRsp
	(*TexasQuitRoomReq)(nil),       // 20: poker.TexasQuitRoomReq
	(*TexasQuitRoomRsp)(nil),       // 21: poker.TexasQuitRoomRsp
	(TexasEventType)(0),            // 22: poker.TexasEventType
	(*TexasPotPoolData)(nil),       // 23: poker.TexasPotPoolData
	(*TexasPlayerData)(nil),        // 24: poker.TexasPlayerData
	(*RspHead)(nil),                // 25: poker.RspHead
	(*TexasRoomBaseInfo)(nil),      // 26: poker.TexasRoomBaseInfo
	(*TexasTableData)(nil),         // 27: poker.TexasTableData
}
var file_client_proto_depIdxs = []int32{
	22, // 0: poker.TexasEventNotify.Event:type_name -> poker.TexasEventType
	23, // 1: poker.TexasGameEventNotify.pot_pool:type_name -> poker.TexasPotPoolData
	2,  // 2: poker.TexasGameEventNotify.end_info:type_name -> poker.TexasGameEndInfo
	23, // 3: poker.TexasDealEventNotify.pot_pool:type_name -> poker.TexasPotPoolData
	23, // 4: poker.TexasBetEventNotify.pot_pool:type_name -> poker.TexasPotPoolData
	24, // 5: poker.TexasPlayerEventNotify.player:type_name -> poker.TexasPlayerData
	25, // 6: poker.TexasJoinRoomRsp.head:type_name -> poker.RspHead
	26, // 7: poker.TexasJoinRoomRsp.room_info:type_name -> poker.TexasRoomBaseInfo
	27, // 8: poker.TexasJoinRoomRsp.table_info:type_name -> poker.TexasTableData
	25, // 9: poker.TexasBuyInRsp.head:type_name -> poker.RspHead
	25, // 10: poker.TexasSitDownRsp.head:type_name -> poker.RspHead
	25, // 11: poker.TexasStandUpRsp.head:type_name -> poker.RspHead
	25, // 12: poker.TexasDoBetRsp.head:type_name -> poker.RspHead
	25, // 13: poker.TexasRoomInfoRsp.head:type_name -> poker.RspHead
	26, // 14: poker.TexasRoomInfoRsp.base:type_name -> poker.TexasRoomBaseInfo
	27, // 15: poker.TexasRoomInfoRsp.table_info:type_name -> poker.TexasTableData
	25, // 16: poker.TexasCreateRoomRsp.head:type_name -> poker.RspHead
	26, // 17: poker.TexasCreateRoomRsp.base:type_name -> poker.TexasRoomBaseInfo
	27, // 18: poker.TexasCreateRoomRsp.table_info:type_name -> poker.TexasTableData
	25, // 19: poker.TexasQuitRoomRsp.head:type_name -> poker.RspHead
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_client_proto_init() }
func file_client_proto_init() {
	if File_client_proto != nil {
		return
	}
	file_packet_proto_init()
	file_event_proto_init()
	file_room_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_proto_rawDesc), len(file_client_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_proto_goTypes,
		DependencyIndexes: file_client_proto_depIdxs,
		MessageInfos:      file_client_proto_msgTypes,
	}.Build()
	File_client_proto = out.File
	file_client_proto_goTypes = nil
	file_client_proto_depIdxs = nil
}
